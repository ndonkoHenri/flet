{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flet","text":"<p>Flet is a framework that allows building web, desktop and mobile applications in Python without prior experience in frontend development.</p> <p>You can build a UI for your program with Flet controls which are based on Flutter by Google. Flet goes beyond merely wrapping Flutter widgets. It adds its own touch by combining smaller widgets, simplifying complexities, implementing UI best practices, and applying sensible defaults. This ensures that your applications look stylish and polished without requiring additional design efforts on your part.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#installation","title":"Installation","text":"<p>Follow these instructions to install Flet and  get started based on your operating system.</p>"},{"location":"#example","title":"Example","text":"<p>The following is a simple counter app that demonstrates how to use Flet to create a user interface with buttons and text fields.</p> counter.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n\n    field = ft.TextField(value=\"0\", text_align=ft.TextAlign.RIGHT, width=100)\n\n    def minus_click(e):\n        field.value = str(int(field.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        field.value = str(int(field.value) + 1)\n        page.update()\n\n    page.add(\n        ft.Row(\n            alignment=ft.MainAxisAlignment.CENTER,\n            controls=[\n                ft.IconButton(ft.Icons.REMOVE, on_click=minus_click),\n                field,\n                ft.IconButton(ft.Icons.ADD, on_click=plus_click),\n            ],\n        )\n    )\n\nft.run(main)\n</code></pre> <p>To run the app install <code>flet</code> module (create a new Flet environment):</p> uvpippoetry <pre><code>uv run flet run counter.py\n</code></pre> <pre><code>flet run counter.py\n</code></pre> <pre><code>poetry run flet run counter.py\n</code></pre> <p>The app will be started in a native OS window - what a nice alternative to Electron!</p> <p></p> <p>macOS</p> <p></p> <p>Windows</p> <p>If you want to run the app in a web browser, you can use the <code>--web</code> (or <code>-w</code>) cli flag:</p> uvpippoetry <pre><code>uv run flet run --web counter.py\n</code></pre> <pre><code>flet run --web counter.py\n</code></pre> <pre><code>poetry run flet run --web counter.py\n</code></pre> <p></p> <p>Web app</p>"},{"location":"api/controls/","title":"Overview","text":""},{"location":"api/controls/animations/animatedswitcher/","title":"AnimatedSwitcher","text":""},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher","title":"<code>AnimatedSwitcher</code>","text":"<p>               Bases: <code>ConstrainedControl</code></p> <p>Used to switch between controls with an animation.</p> <p>mkdocstrings-python-xref example: <code>content</code></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_offset","title":"<code>animate_offset: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_offset</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.offset</code> property.</p> <p><code>offset</code> property is an instance of <code>transform.Offset</code> class which specifies  horizontal <code>x</code> and vertical <code>y</code> offset of a control scaled to control's size.  For example, an offset <code>Offset(-0.25, 0)</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>Offset animation is used for various sliding effects:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        offset=ft.transform.Offset(-2, 0),\n        animate_offset=ft.animation.Animation(1000),\n    )\n\n    def animate(e):\n        c.offset = ft.transform.Offset(0, 0)\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Reveal!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_opacity","title":"<code>animate_opacity: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_opacity</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.opacity</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        animate_opacity=300,\n    )\n\n    def animate_opacity(e):\n        c.opacity = 0 if c.opacity == 1 else 1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\n            \"Animate opacity\",\n            on_click=animate_opacity,\n        ),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_position","title":"<code>animate_position: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_position</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class (see above) enables implicit animation of Control's  <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> properties.</p> <p>Please note Control position works inside <code>Stack</code> control only.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c1 = ft.Container(width=50, height=50, bgcolor=\"red\", animate_position=1000)\n\n    c2 = ft.Container(\n        width=50, height=50, bgcolor=\"green\", top=60, left=0, animate_position=500\n    )\n\n    c3 = ft.Container(\n        width=50, height=50, bgcolor=\"blue\", top=120, left=0, animate_position=1000\n    )\n\n    def animate_container(e):\n        c1.top = 20\n        c1.left = 200\n        c2.top = 100\n        c2.left = 40\n        c3.top = 180\n        c3.left = 100\n        page.update()\n\n    page.add(\n        ft.Stack([c1, c2, c3], height=250),\n        ft.ElevatedButton(\"Animate!\", on_click=animate_container),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_rotation","title":"<code>animate_rotation: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_rotation</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.rotate</code>  property.</p> Example <pre><code>from math import pi\nimport flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=100,\n        height=70,\n        bgcolor=\"blue\",\n        border_radius=5,\n        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),\n        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.rotate.angle += pi / 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_scale","title":"<code>animate_scale: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_scale</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.scale</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=\"blue\",\n        border_radius=5,\n        scale=ft.transform.Scale(scale=1),\n        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.scale = 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.animate_size","title":"<code>animate_size: AnimationValue | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.aspect_ratio","title":"<code>aspect_ratio: OptionalNumber = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.badge","title":"<code>badge: BadgeValue | None = None</code>","text":"<p>The <code>badge</code> property supports both strings and  <code>Badge</code> objects.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.bottom","title":"<code>bottom: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's bottom edge is inset from the bottom of the stack.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.col","title":"<code>col: ResponsiveNumber = 12</code>","text":"<p>If a parent of the control is ResponsiveRow, <code>col</code> property is used to determine  how many virtual columns of a screen the control will span. </p> <p>Can be a number or a dictionary configured to have a different value for specific  breakpoints, for example <code>col={\"sm\": 6}</code>. Breakpoints are named dimension ranges:</p> Breakpoint Dimension xs &lt;576px sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p>If <code>col</code> property is not specified, it spans the maximum number of columns (12).</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.content","title":"<code>content: Control</code>","text":"<p>The content to display. When the <code>content</code> changes, the AnimatedSwitcher will animate the transition from the old <code>content</code> to the new one.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.data","title":"<code>data: Any = skip_field()</code>","text":"<p>Arbitrary data of any type that can be attached to a control.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.disabled","title":"<code>disabled: bool = False</code>","text":"<p>Every control has <code>disabled</code> property which is <code>False</code> by default - control and all  its children are enabled. This property is mostly used with data entry controls like <code>TextField</code>,  <code>Dropdown</code>, <code>Checkbox</code>, buttons.</p> Note <p>The value of this property will be propagated down to all children controls recursively.</p> Example <p>For example, if you have a form with multiple entry controls you can disable them  all together by disabling container:</p> <pre><code>c = ft.Column(\n    disabled = True,\n    controls=[\n        ft.TextField(),\n        ft.TextField()\n    ]\n)\npage.add(c)\n</code></pre>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.duration","title":"<code>duration: DurationValue = field(default_factory=lambda: Duration(seconds=1))</code>","text":"<p>The duration, in milliseconds, of the transition from the old <code>content</code> value to the new one.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.expand","title":"<code>expand: bool | int | None = None</code>","text":"<p>When a child Control is placed into a <code>Column</code>  or a <code>Row</code> you can \"expand\" it to fill the  available space.  <code>expand</code> property could be a boolean value (<code>True</code> - expand control to fill all  available space) or an integer - an \"expand factor\" specifying how to divide a free  space with other expanded child controls.</p> <p>For more information and examples about <code>expand</code> property see \"Expanding children\"  sections in <code>Column</code> or  <code>Row</code>.</p> Example <p>Here is an example of expand being used in action for both <code>Column</code>  and <code>Row</code>:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.spacing = 0\n    page.padding = 0\n    page.add(\n        ft.Column(\n            controls=[\n                ft.Row(\n                    [\n                        ft.Card(\n                            content=ft.Text(\"Card_1\"),\n                            color=ft.Colors.ORANGE_300,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                        ft.Card(\n                            content=ft.Text(\"Card_2\"),\n                            color=ft.Colors.GREEN_100,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                    ],\n                    expand=True,\n                    spacing=0,\n                ),\n            ],\n            expand=True,\n            spacing=0,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.expand_loose","title":"<code>expand_loose: bool | None = None</code>","text":"<p>Effective only if <code>expand</code> is <code>True</code>. </p> <p>If <code>expand_loose</code> is <code>True</code>, the child control of a  <code>Column</code> or a <code>Row</code>  will be given the flexibility to expand to fill the available space in the main  axis (e.g., horizontally for a Row or vertically for a Column), but will not be  required to fill the available space.</p> <p>The default value is <code>False</code>.</p> Example <p>Here is the example of Containers placed in Rows with <code>expand_loose = True</code>: <pre><code>import flet as ft\n\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\n\ndef main(page: ft.Page):\n    chat = ft.ListView(\n        padding=10,\n        spacing=10,\n        controls=[\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Hi, how are you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Hi I am good thanks, how about you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Lorem Ipsum is simply dummy text of the printing and \n                        typesetting industry. Lorem Ipsum has been the industry's \n                        standard dummy text ever since the 1500s, when an unknown \n                        printer took a galley of type and scrambled it to make a \n                        type specimen book.\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Thank you!\",\n                    ),\n                ],\n            ),\n        ],\n    )\n\n    page.window.width = 393\n    page.window.height = 600\n    page.window.always_on_top = False\n\n    page.add(chat)\n\n\nft.run(main)\n</code></pre></p> <p></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.height","title":"<code>height: OptionalNumber = None</code>","text":"<p>Imposed Control height in virtual pixels.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.key","title":"<code>key: str | int | float | bool | ValueKey | ScrollKey | None = None</code>","text":""},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.left","title":"<code>left: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's left edge is inset from the left of the stack.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.offset","title":"<code>offset: OffsetValue | None = None</code>","text":"<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size.  For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>The following example displays container at <code>0, 0</code> top left corner of a stack as  transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and  vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            width=1000,\n            height=1000,\n            controls=[\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n        )\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.on_animation_end","title":"<code>on_animation_end: OptionalControlEventHandler[ConstrainedControl] = None</code>","text":"<p>All controls with <code>animate_*</code> properties have <code>on_animation_end</code> event handler  which is called when animation complete and can be used to chain multiple  animations.</p> <p>Event's object <code>data</code> field contains the name of animation:</p> <ul> <li><code>opacity</code></li> <li><code>rotation</code></li> <li><code>scale</code></li> <li><code>offset</code></li> <li><code>position</code></li> <li><code>container</code></li> </ul> Example <p>For example:</p> <pre><code>ft.Container(\n    ft.Text(\"Animate me!\"),\n    animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n    on_animation_end=lambda e: print(\"Container animation end:\", e.data)\n)\n</code></pre>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.opacity","title":"<code>opacity: Number = 1.0</code>","text":"<p>Defines the transparency of the control.</p> <p>Value ranges from <code>0.0</code> (completely transparent) to <code>1.0</code> (completely opaque  without any transparency) and defaults to <code>1.0</code>.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.page","title":"<code>page: Page | PageView | None</code>","text":"<p>The page (of type <code>Page</code> or <code>PageView</code>) to which this control belongs to.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.parent","title":"<code>parent: BaseControl | None</code>","text":"<p>The direct ancestor(parent) of this control.</p> <p>It defaults to <code>None</code> and will only have a value when this control is mounted (added to the page tree).</p> <p>The <code>Page</code> control (which is the root of the tree) is an exception - it always has <code>parent=None</code>.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.reverse_duration","title":"<code>reverse_duration: DurationValue = field(default_factory=lambda: Duration(seconds=1))</code>","text":"<p>The duration, in milliseconds, of the transition from the new <code>content</code> value to the old one.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.right","title":"<code>right: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's right edge is inset from the right of the stack.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.rotate","title":"<code>rotate: RotateValue | None = None</code>","text":"<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code>  radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> -  the location of rotation center.</li> </ul> Example <p>For example: <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.Alignment.center_left())\n)\n</code></pre></p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.rtl","title":"<code>rtl: bool = False</code>","text":"<p>Whether the text direction of the control should be right-to-left (RTL).</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.scale","title":"<code>scale: ScaleValue | None = None</code>","text":"<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not  scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting  <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class.</p> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them.</p> Example <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.switch_in_curve","title":"<code>switch_in_curve: AnimationCurve = AnimationCurve.LINEAR</code>","text":"<p>The animation curve to use when transitioning in a new <code>content</code>.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.switch_out_curve","title":"<code>switch_out_curve: AnimationCurve = AnimationCurve.LINEAR</code>","text":"<p>The animation curve to use when transitioning a previous <code>content</code> out.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.tooltip","title":"<code>tooltip: TooltipValue | None = None</code>","text":"<p>The <code>tooltip</code> property supports both strings  and <code>Tooltip</code> objects.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.top","title":"<code>top: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's top edge is inset from the top of the stack.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.transition","title":"<code>transition: AnimatedSwitcherTransition = AnimatedSwitcherTransition.FADE</code>","text":"<p>An animation type to transition between new and old <code>content</code>.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.visible","title":"<code>visible: bool = True</code>","text":"<p>Every control has <code>visible</code> property which is <code>True</code> by default - control is  rendered on the page. Setting <code>visible</code> to <code>False</code> completely prevents control (and  all its children if any) from rendering on a page canvas. Hidden controls cannot be  focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"api/controls/animations/animatedswitcher/#flet.AnimatedSwitcher.width","title":"<code>width: OptionalNumber = None</code>","text":"<p>Imposed Control width in virtual pixels.</p>"},{"location":"api/controls/animations/animatedswitcher/#examples","title":"Examples","text":"<p>Live example</p>"},{"location":"api/controls/animations/animatedswitcher/#example-1","title":"Example 1","text":"<p>Animated switching between two containers with scale effect.</p> <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"AnimatedSwitcher examples\"\n\n    c1 = ft.Container(\n        ft.Text(\"Hello!\", theme_style=ft.TextThemeStyle.HEADLINE_MEDIUM),\n        alignment=ft.Alignment.center(),\n        width=200,\n        height=200,\n        bgcolor=ft.Colors.GREEN,\n    )\n    c2 = ft.Container(\n        ft.Text(\"Bye!\", size=50),\n        alignment=ft.Alignment.center(),\n        width=200,\n        height=200,\n        bgcolor=ft.Colors.YELLOW,\n    )\n    c = ft.AnimatedSwitcher(\n        c1,\n        transition=ft.AnimatedSwitcherTransition.SCALE,\n        duration=500,\n        reverse_duration=100,\n        switch_in_curve=ft.AnimationCurve.BOUNCE_OUT,\n        switch_out_curve=ft.AnimationCurve.BOUNCE_IN,\n    )\n\n    def scale(e):\n        c.content = c2 if c.content == c1 else c1\n        c.transition = ft.AnimatedSwitcherTransition.SCALE\n        c.update()\n\n    def fade(e):\n        c.content = c2 if c.content == c1 else c1\n        c.transition = ft.AnimatedSwitcherTransition.FADE\n        c.update()\n\n    def rotate(e):\n        c.content = c2 if c.content == c1 else c1\n        c.transition = ft.AnimatedSwitcherTransition.ROTATION\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Scale\", on_click=scale),\n        ft.ElevatedButton(\"Fade\", on_click=fade),\n        ft.ElevatedButton(\"Rotate\", on_click=rotate),\n    )\n\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/","title":"CupertinoActionSheetAction","text":""},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction","title":"<code>CupertinoActionSheetAction</code>","text":"<p>               Bases: <code>ConstrainedControl</code></p> <p>An action button typically used in a CupertinoActionSheet.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_offset","title":"<code>animate_offset: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_offset</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.offset</code> property.</p> <p><code>offset</code> property is an instance of <code>transform.Offset</code> class which specifies  horizontal <code>x</code> and vertical <code>y</code> offset of a control scaled to control's size.  For example, an offset <code>Offset(-0.25, 0)</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>Offset animation is used for various sliding effects:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        offset=ft.transform.Offset(-2, 0),\n        animate_offset=ft.animation.Animation(1000),\n    )\n\n    def animate(e):\n        c.offset = ft.transform.Offset(0, 0)\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Reveal!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_opacity","title":"<code>animate_opacity: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_opacity</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.opacity</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        animate_opacity=300,\n    )\n\n    def animate_opacity(e):\n        c.opacity = 0 if c.opacity == 1 else 1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\n            \"Animate opacity\",\n            on_click=animate_opacity,\n        ),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_position","title":"<code>animate_position: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_position</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class (see above) enables implicit animation of Control's  <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> properties.</p> <p>Please note Control position works inside <code>Stack</code> control only.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c1 = ft.Container(width=50, height=50, bgcolor=\"red\", animate_position=1000)\n\n    c2 = ft.Container(\n        width=50, height=50, bgcolor=\"green\", top=60, left=0, animate_position=500\n    )\n\n    c3 = ft.Container(\n        width=50, height=50, bgcolor=\"blue\", top=120, left=0, animate_position=1000\n    )\n\n    def animate_container(e):\n        c1.top = 20\n        c1.left = 200\n        c2.top = 100\n        c2.left = 40\n        c3.top = 180\n        c3.left = 100\n        page.update()\n\n    page.add(\n        ft.Stack([c1, c2, c3], height=250),\n        ft.ElevatedButton(\"Animate!\", on_click=animate_container),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_rotation","title":"<code>animate_rotation: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_rotation</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.rotate</code>  property.</p> Example <pre><code>from math import pi\nimport flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=100,\n        height=70,\n        bgcolor=\"blue\",\n        border_radius=5,\n        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),\n        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.rotate.angle += pi / 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_scale","title":"<code>animate_scale: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_scale</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.scale</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=\"blue\",\n        border_radius=5,\n        scale=ft.transform.Scale(scale=1),\n        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.scale = 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.animate_size","title":"<code>animate_size: AnimationValue | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.aspect_ratio","title":"<code>aspect_ratio: OptionalNumber = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.badge","title":"<code>badge: BadgeValue | None = None</code>","text":"<p>The <code>badge</code> property supports both strings and  <code>Badge</code> objects.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.bottom","title":"<code>bottom: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's bottom edge is inset from the bottom of the stack.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.col","title":"<code>col: ResponsiveNumber = 12</code>","text":"<p>If a parent of the control is ResponsiveRow, <code>col</code> property is used to determine  how many virtual columns of a screen the control will span. </p> <p>Can be a number or a dictionary configured to have a different value for specific  breakpoints, for example <code>col={\"sm\": 6}</code>. Breakpoints are named dimension ranges:</p> Breakpoint Dimension xs &lt;576px sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p>If <code>col</code> property is not specified, it spans the maximum number of columns (12).</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.content","title":"<code>content: StrOrControl</code>","text":"<p>The child control to be shown in this action button.</p> <p>In case both <code>text</code> and <code>content</code> are provided, then <code>content</code> will be used.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.data","title":"<code>data: Any = skip_field()</code>","text":"<p>Arbitrary data of any type that can be attached to a control.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.default","title":"<code>default: bool = False</code>","text":"<p>Whether this action should receive the style of an emphasized, default action.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.destructive","title":"<code>destructive: bool = False</code>","text":"<p>Whether this action should receive the style of a destructive action.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.disabled","title":"<code>disabled: bool = False</code>","text":"<p>Every control has <code>disabled</code> property which is <code>False</code> by default - control and all  its children are enabled. This property is mostly used with data entry controls like <code>TextField</code>,  <code>Dropdown</code>, <code>Checkbox</code>, buttons.</p> Note <p>The value of this property will be propagated down to all children controls recursively.</p> Example <p>For example, if you have a form with multiple entry controls you can disable them  all together by disabling container:</p> <pre><code>c = ft.Column(\n    disabled = True,\n    controls=[\n        ft.TextField(),\n        ft.TextField()\n    ]\n)\npage.add(c)\n</code></pre>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.expand","title":"<code>expand: bool | int | None = None</code>","text":"<p>When a child Control is placed into a <code>Column</code>  or a <code>Row</code> you can \"expand\" it to fill the  available space.  <code>expand</code> property could be a boolean value (<code>True</code> - expand control to fill all  available space) or an integer - an \"expand factor\" specifying how to divide a free  space with other expanded child controls.</p> <p>For more information and examples about <code>expand</code> property see \"Expanding children\"  sections in <code>Column</code> or  <code>Row</code>.</p> Example <p>Here is an example of expand being used in action for both <code>Column</code>  and <code>Row</code>:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.spacing = 0\n    page.padding = 0\n    page.add(\n        ft.Column(\n            controls=[\n                ft.Row(\n                    [\n                        ft.Card(\n                            content=ft.Text(\"Card_1\"),\n                            color=ft.Colors.ORANGE_300,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                        ft.Card(\n                            content=ft.Text(\"Card_2\"),\n                            color=ft.Colors.GREEN_100,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                    ],\n                    expand=True,\n                    spacing=0,\n                ),\n            ],\n            expand=True,\n            spacing=0,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.expand_loose","title":"<code>expand_loose: bool | None = None</code>","text":"<p>Effective only if <code>expand</code> is <code>True</code>. </p> <p>If <code>expand_loose</code> is <code>True</code>, the child control of a  <code>Column</code> or a <code>Row</code>  will be given the flexibility to expand to fill the available space in the main  axis (e.g., horizontally for a Row or vertically for a Column), but will not be  required to fill the available space.</p> <p>The default value is <code>False</code>.</p> Example <p>Here is the example of Containers placed in Rows with <code>expand_loose = True</code>: <pre><code>import flet as ft\n\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\n\ndef main(page: ft.Page):\n    chat = ft.ListView(\n        padding=10,\n        spacing=10,\n        controls=[\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Hi, how are you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Hi I am good thanks, how about you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Lorem Ipsum is simply dummy text of the printing and \n                        typesetting industry. Lorem Ipsum has been the industry's \n                        standard dummy text ever since the 1500s, when an unknown \n                        printer took a galley of type and scrambled it to make a \n                        type specimen book.\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Thank you!\",\n                    ),\n                ],\n            ),\n        ],\n    )\n\n    page.window.width = 393\n    page.window.height = 600\n    page.window.always_on_top = False\n\n    page.add(chat)\n\n\nft.run(main)\n</code></pre></p> <p></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.height","title":"<code>height: OptionalNumber = None</code>","text":"<p>Imposed Control height in virtual pixels.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.key","title":"<code>key: str | int | float | bool | ValueKey | ScrollKey | None = None</code>","text":""},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.left","title":"<code>left: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's left edge is inset from the left of the stack.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.mouse_cursor","title":"<code>mouse_cursor: MouseCursor | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.offset","title":"<code>offset: OffsetValue | None = None</code>","text":"<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size.  For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>The following example displays container at <code>0, 0</code> top left corner of a stack as  transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and  vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            width=1000,\n            height=1000,\n            controls=[\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n        )\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.on_animation_end","title":"<code>on_animation_end: OptionalControlEventHandler[ConstrainedControl] = None</code>","text":"<p>All controls with <code>animate_*</code> properties have <code>on_animation_end</code> event handler  which is called when animation complete and can be used to chain multiple  animations.</p> <p>Event's object <code>data</code> field contains the name of animation:</p> <ul> <li><code>opacity</code></li> <li><code>rotation</code></li> <li><code>scale</code></li> <li><code>offset</code></li> <li><code>position</code></li> <li><code>container</code></li> </ul> Example <p>For example:</p> <pre><code>ft.Container(\n    ft.Text(\"Animate me!\"),\n    animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n    on_animation_end=lambda e: print(\"Container animation end:\", e.data)\n)\n</code></pre>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.on_click","title":"<code>on_click: OptionalControlEventHandler[CupertinoActionSheetAction] = None</code>","text":"<p>Fires when this action button is clicked.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.opacity","title":"<code>opacity: Number = 1.0</code>","text":"<p>Defines the transparency of the control.</p> <p>Value ranges from <code>0.0</code> (completely transparent) to <code>1.0</code> (completely opaque  without any transparency) and defaults to <code>1.0</code>.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.page","title":"<code>page: Page | PageView | None</code>","text":"<p>The page (of type <code>Page</code> or <code>PageView</code>) to which this control belongs to.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.parent","title":"<code>parent: BaseControl | None</code>","text":"<p>The direct ancestor(parent) of this control.</p> <p>It defaults to <code>None</code> and will only have a value when this control is mounted (added to the page tree).</p> <p>The <code>Page</code> control (which is the root of the tree) is an exception - it always has <code>parent=None</code>.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.right","title":"<code>right: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's right edge is inset from the right of the stack.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.rotate","title":"<code>rotate: RotateValue | None = None</code>","text":"<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code>  radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> -  the location of rotation center.</li> </ul> Example <p>For example: <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.Alignment.center_left())\n)\n</code></pre></p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.rtl","title":"<code>rtl: bool = False</code>","text":"<p>Whether the text direction of the control should be right-to-left (RTL).</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.scale","title":"<code>scale: ScaleValue | None = None</code>","text":"<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not  scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting  <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class.</p> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them.</p> Example <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.tooltip","title":"<code>tooltip: TooltipValue | None = None</code>","text":"<p>The <code>tooltip</code> property supports both strings  and <code>Tooltip</code> objects.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.top","title":"<code>top: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's top edge is inset from the top of the stack.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.visible","title":"<code>visible: bool = True</code>","text":"<p>Every control has <code>visible</code> property which is <code>True</code> by default - control is  rendered on the page. Setting <code>visible</code> to <code>False</code> completely prevents control (and  all its children if any) from rendering on a page canvas. Hidden controls cannot be  focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#flet.CupertinoActionSheetAction.width","title":"<code>width: OptionalNumber = None</code>","text":"<p>Imposed Control width in virtual pixels.</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#examples","title":"Examples","text":"<p>Live example</p>"},{"location":"api/controls/buttons/cupertinoactionsheetaction/#example-1","title":"Example 1","text":"<pre><code>import flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Default Action\"),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Normal Action\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Destructive Action\"),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/dialogs/alertdialog/","title":"AlertDialog","text":""},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog","title":"<code>AlertDialog</code>","text":"<p>               Bases: <code>DialogControl</code></p> <p>An alert dialog informs the user about situations that require acknowledgement. It has an optional title and an optional list of actions. The title is displayed above the content and the actions are displayed below the content.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.action_button_padding","title":"<code>action_button_padding: OptionalPaddingValue = None</code>","text":"<p>The padding that surrounds each button in <code>actions</code>.</p> <p>Value is of type <code>PaddingValue</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.actions","title":"<code>actions: list[Control] = field(default_factory=list)</code>","text":"<p>The (optional) set of actions that are displayed at the bottom of the dialog.</p> <p>Typically this is a list of <code>TextButton</code>  controls.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.actions_alignment","title":"<code>actions_alignment: MainAxisAlignment | None = None</code>","text":"<p>Defines the horizontal layout of the actions.</p> <p>Value is of type <code>MainAxisAlignment</code>  and defaults to <code>MainAxisAlignment.END</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.actions_overflow_button_spacing","title":"<code>actions_overflow_button_spacing: OptionalNumber = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.actions_padding","title":"<code>actions_padding: OptionalPaddingValue = None</code>","text":"<p>Padding around the set of actions at the bottom of the dialog.</p> <p>Typically used to provide padding to the button bar between the button bar and the  edges of the dialog.</p> <p>If are no actions, then no padding will be included. The padding around the button  bar defaults to zero.</p> <p>Value is of type <code>PaddingValue</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.adaptive","title":"<code>adaptive: bool | None = None</code>","text":"<p><code>adaptive</code> property can be specified for a control in the following cases:</p> <ul> <li> <p>A control has matching Cupertino control with similar functionality/presentation      and graphics as expected on iOS/macOS. In this case, if <code>adaptive</code> is <code>True</code>,      either Material or Cupertino control will be created depending on the target      platform.  </p> <p>These controls have their Cupertino analogs and <code>adaptive</code> property:</p> <ul> <li><code>AlertDialog</code></li> <li><code>AppBar</code></li> <li><code>Checkbox</code></li> <li><code>ListTile</code></li> <li><code>NavigationBar</code></li> <li><code>Radio</code></li> <li><code>Slider</code></li> <li><code>Switch</code></li> </ul> </li> <li> <p>A control has child controls. In this case <code>adaptive</code> property value is passed on      to its children that don't have their <code>adaptive</code> property set. </p> <p>The following container controls have <code>adaptive</code> property:</p> <ul> <li><code>Card</code></li> <li><code>Column</code></li> <li><code>Container</code></li> <li><code>Dismissible</code></li> <li><code>ExpansionPanel</code></li> <li><code>FletApp</code></li> <li><code>GestureDetector</code></li> <li><code>GridView</code></li> <li><code>ListView</code></li> <li><code>Page</code></li> <li><code>Row</code></li> <li><code>SafeArea</code></li> <li><code>Stack</code></li> <li><code>Tabs</code></li> <li><code>View</code></li> </ul> </li> </ul>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.alignment","title":"<code>alignment: Alignment | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.badge","title":"<code>badge: BadgeValue | None = None</code>","text":"<p>The <code>badge</code> property supports both strings and  <code>Badge</code> objects.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.barrier_color","title":"<code>barrier_color: OptionalColorValue = None</code>","text":"<p>The color of the modal barrier that  darkens everything below the dialog.</p> <p>If <code>None</code>, the <code>DialogTheme.barrier_color</code>  is used. If it is also <code>None</code>, then <code>Colors.BLACK_54</code> is used.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.bgcolor","title":"<code>bgcolor: OptionalColorValue = None</code>","text":"<p>The background color of the dialog's  surface.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.clip_behavior","title":"<code>clip_behavior: ClipBehavior | None = None</code>","text":"<p>Controls how the contents of the dialog are clipped (or not) to the given <code>shape</code>.</p> <p>Value is of type <code>ClipBehavior</code>  and defaults to <code>ClipBehavior.NONE</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.col","title":"<code>col: ResponsiveNumber = 12</code>","text":"<p>If a parent of the control is ResponsiveRow, <code>col</code> property is used to determine  how many virtual columns of a screen the control will span. </p> <p>Can be a number or a dictionary configured to have a different value for specific  breakpoints, for example <code>col={\"sm\": 6}</code>. Breakpoints are named dimension ranges:</p> Breakpoint Dimension xs &lt;576px sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p>If <code>col</code> property is not specified, it spans the maximum number of columns (12).</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.content","title":"<code>content: Control | None = None</code>","text":"<p>The (optional) content of the dialog is displayed in the center of the dialog in a  lighter font. Typically this is a <code>Column</code>  that contains the dialog's <code>Text</code> message.</p> <p>Value is of type <code>Control</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.content_padding","title":"<code>content_padding: OptionalPaddingValue = None</code>","text":"<p>Padding around the content.</p> <p>If there is no content, no padding will be provided. Otherwise, padding of 20  pixels is provided above the content to separate the content from the title, and  padding of 24 pixels is provided on the left, right, and bottom to separate the  content from the other edges of the dialog.</p> <p>Value is of type <code>PaddingValue</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.content_text_style","title":"<code>content_text_style: TextStyle | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.data","title":"<code>data: Any = skip_field()</code>","text":"<p>Arbitrary data of any type that can be attached to a control.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.disabled","title":"<code>disabled: bool = False</code>","text":"<p>Every control has <code>disabled</code> property which is <code>False</code> by default - control and all  its children are enabled. This property is mostly used with data entry controls like <code>TextField</code>,  <code>Dropdown</code>, <code>Checkbox</code>, buttons.</p> Note <p>The value of this property will be propagated down to all children controls recursively.</p> Example <p>For example, if you have a form with multiple entry controls you can disable them  all together by disabling container:</p> <pre><code>c = ft.Column(\n    disabled = True,\n    controls=[\n        ft.TextField(),\n        ft.TextField()\n    ]\n)\npage.add(c)\n</code></pre>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.elevation","title":"<code>elevation: OptionalNumber = None</code>","text":"<p>Defines the elevation (z-coordinate) at which the dialog should appear.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.expand","title":"<code>expand: bool | int | None = None</code>","text":"<p>When a child Control is placed into a <code>Column</code>  or a <code>Row</code> you can \"expand\" it to fill the  available space.  <code>expand</code> property could be a boolean value (<code>True</code> - expand control to fill all  available space) or an integer - an \"expand factor\" specifying how to divide a free  space with other expanded child controls.</p> <p>For more information and examples about <code>expand</code> property see \"Expanding children\"  sections in <code>Column</code> or  <code>Row</code>.</p> Example <p>Here is an example of expand being used in action for both <code>Column</code>  and <code>Row</code>:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.spacing = 0\n    page.padding = 0\n    page.add(\n        ft.Column(\n            controls=[\n                ft.Row(\n                    [\n                        ft.Card(\n                            content=ft.Text(\"Card_1\"),\n                            color=ft.Colors.ORANGE_300,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                        ft.Card(\n                            content=ft.Text(\"Card_2\"),\n                            color=ft.Colors.GREEN_100,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                    ],\n                    expand=True,\n                    spacing=0,\n                ),\n            ],\n            expand=True,\n            spacing=0,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.expand_loose","title":"<code>expand_loose: bool | None = None</code>","text":"<p>Effective only if <code>expand</code> is <code>True</code>. </p> <p>If <code>expand_loose</code> is <code>True</code>, the child control of a  <code>Column</code> or a <code>Row</code>  will be given the flexibility to expand to fill the available space in the main  axis (e.g., horizontally for a Row or vertically for a Column), but will not be  required to fill the available space.</p> <p>The default value is <code>False</code>.</p> Example <p>Here is the example of Containers placed in Rows with <code>expand_loose = True</code>: <pre><code>import flet as ft\n\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\n\ndef main(page: ft.Page):\n    chat = ft.ListView(\n        padding=10,\n        spacing=10,\n        controls=[\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Hi, how are you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Hi I am good thanks, how about you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Lorem Ipsum is simply dummy text of the printing and \n                        typesetting industry. Lorem Ipsum has been the industry's \n                        standard dummy text ever since the 1500s, when an unknown \n                        printer took a galley of type and scrambled it to make a \n                        type specimen book.\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Thank you!\",\n                    ),\n                ],\n            ),\n        ],\n    )\n\n    page.window.width = 393\n    page.window.height = 600\n    page.window.always_on_top = False\n\n    page.add(chat)\n\n\nft.run(main)\n</code></pre></p> <p></p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.icon","title":"<code>icon: Control | None = None</code>","text":"<p>A control that is displayed at the top of the dialog. Typically a <code>Icon</code>  control.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.icon_color","title":"<code>icon_color: OptionalColorValue = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.icon_padding","title":"<code>icon_padding: OptionalPaddingValue = None</code>","text":"<p>Padding around the <code>icon</code>.</p> <p>Value is of type <code>PaddingValue</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.inset_padding","title":"<code>inset_padding: OptionalPaddingValue = None</code>","text":"<p>Padding around the Dialog itself.</p> <p>Value is of type <code>PaddingValue</code>.</p> <p>Defaults to <code>padding.symmetric(vertical=40, horizontal=24)</code> - 40 pixels  horizontally and 24 pixels vertically outside of the dialog box.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.key","title":"<code>key: str | int | float | bool | ValueKey | ScrollKey | None = None</code>","text":""},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.modal","title":"<code>modal: bool = False</code>","text":"<p>Whether dialog can be dismissed/closed by clicking the area outside of it.</p> <p>Value is of type <code>bool</code> and defaults to <code>False</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.on_dismiss","title":"<code>on_dismiss: OptionalControlEventHandler[DialogControl] = None</code>","text":"<p>Fires when dialog is dismissed.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.opacity","title":"<code>opacity: Number = 1.0</code>","text":"<p>Defines the transparency of the control.</p> <p>Value ranges from <code>0.0</code> (completely transparent) to <code>1.0</code> (completely opaque  without any transparency) and defaults to <code>1.0</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.open","title":"<code>open: bool = False</code>","text":"<p>Set to <code>True</code> to display a dialog.</p> <p>Value is of type <code>bool</code> and defaults to <code>False</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.page","title":"<code>page: Page | PageView | None</code>","text":"<p>The page (of type <code>Page</code> or <code>PageView</code>) to which this control belongs to.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.parent","title":"<code>parent: BaseControl | None</code>","text":"<p>The direct ancestor(parent) of this control.</p> <p>It defaults to <code>None</code> and will only have a value when this control is mounted (added to the page tree).</p> <p>The <code>Page</code> control (which is the root of the tree) is an exception - it always has <code>parent=None</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.rtl","title":"<code>rtl: bool = False</code>","text":"<p>Whether the text direction of the control should be right-to-left (RTL).</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.scrollable","title":"<code>scrollable: bool = False</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.semantics_label","title":"<code>semantics_label: str | None = None</code>","text":"<p>The semantic label of the dialog used by accessibility frameworks to announce  screen transitions when the dialog is opened and closed.</p> <p>In iOS, if this label is not provided, a semantic label will be inferred from the  <code>title</code> if it is not null.</p> <p>Value is of type <code>str</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.shadow_color","title":"<code>shadow_color: OptionalColorValue = None</code>","text":"<p>The color used to paint a drop shadow  under the dialog, which reflects the dialog's elevation.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.shape","title":"<code>shape: OutlinedBorder | None = None</code>","text":"<p>The shape of the dialog.</p> <p>Value is of type <code>OutlinedBorder</code>  and defaults to <code>RoundedRectangleBorder(radius=4.0)</code>.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.surface_tint_color","title":"<code>surface_tint_color: OptionalColorValue = None</code>","text":"<p>The color used as a surface tint overlay  on the dialog's background color, which reflects the dialog's elevation.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.title","title":"<code>title: StrOrControl | None = None</code>","text":"<p>The (optional) title of the dialog is displayed in a large font at the top of the  dialog.</p> <p>Typically a <code>Text</code> control.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.title_padding","title":"<code>title_padding: OptionalPaddingValue = None</code>","text":"<p>Padding around the title.</p> <p>If there is no title, no padding will be provided. Otherwise, this padding is used.</p> <p>Value is of type <code>PaddingValue</code>.</p> <p>Defaults to providing <code>24</code> pixels on the top, left, and right of the title. If the  <code>content</code> is not <code>None</code>, then no bottom padding is provided (but see <code>content_padding</code>). If it is not set, then an extra <code>20</code> pixels of bottom padding is added to separate  the title from the actions.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.title_text_style","title":"<code>title_text_style: TextStyle | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.tooltip","title":"<code>tooltip: TooltipValue | None = None</code>","text":"<p>The <code>tooltip</code> property supports both strings  and <code>Tooltip</code> objects.</p>"},{"location":"api/controls/dialogs/alertdialog/#flet.AlertDialog.visible","title":"<code>visible: bool = True</code>","text":"<p>Every control has <code>visible</code> property which is <code>True</code> by default - control is  rendered on the page. Setting <code>visible</code> to <code>False</code> completely prevents control (and  all its children if any) from rendering on a page canvas. Hidden controls cannot be  focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"api/controls/dialogs/alertdialog/#examples","title":"Examples","text":"<p>Live example</p>"},{"location":"api/controls/dialogs/alertdialog/#example-1","title":"Example 1","text":"<p>Displays a basic (non-modal) and a modal dialog.</p> <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"AlertDialog examples\"\n\n    dlg = ft.AlertDialog(\n        title=ft.Text(\"Hello\"),\n        content=ft.Text(\"You are notified!\"),\n        alignment=ft.Alignment.center(),\n        on_dismiss=lambda e: print(\"Dialog dismissed!\"),\n        title_padding=ft.Padding.all(25),\n    )\n\n    dlg_modal = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Please confirm\"),\n        content=ft.Text(\"Do you really want to delete all those files?\"),\n        actions=[\n            ft.TextButton(\"Yes\", on_click=lambda e: page.pop_dialog()),\n            ft.TextButton(\"No\", on_click=lambda e: page.pop_dialog()),\n        ],\n        actions_alignment=ft.MainAxisAlignment.END,\n        on_dismiss=lambda e: print(\"Modal dialog dismissed!\"),\n    )\n\n    page.add(\n        ft.ElevatedButton(\"Open dialog\", on_click=lambda e: page.show_dialog(dlg)),\n        ft.ElevatedButton(\n            \"Open modal dialog\", on_click=lambda e: page.show_dialog(dlg_modal)\n        ),\n    )\n\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/","title":"CupertinoActionSheet","text":""},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet","title":"<code>CupertinoActionSheet</code>","text":"<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style action sheet.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.actions","title":"<code>actions: list[Control] | None = None</code>","text":"<p>A list of action buttons to be shown in the sheet.</p> <p>These actions are typically <code>CupertinoActionSheetAction</code>s.</p> <p>This list must have at least one action.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_offset","title":"<code>animate_offset: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_offset</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.offset</code> property.</p> <p><code>offset</code> property is an instance of <code>transform.Offset</code> class which specifies  horizontal <code>x</code> and vertical <code>y</code> offset of a control scaled to control's size.  For example, an offset <code>Offset(-0.25, 0)</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>Offset animation is used for various sliding effects:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        offset=ft.transform.Offset(-2, 0),\n        animate_offset=ft.animation.Animation(1000),\n    )\n\n    def animate(e):\n        c.offset = ft.transform.Offset(0, 0)\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Reveal!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_opacity","title":"<code>animate_opacity: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_opacity</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.opacity</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=\"blue\",\n        border_radius=10,\n        animate_opacity=300,\n    )\n\n    def animate_opacity(e):\n        c.opacity = 0 if c.opacity == 1 else 1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\n            \"Animate opacity\",\n            on_click=animate_opacity,\n        ),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_position","title":"<code>animate_position: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_position</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class (see above) enables implicit animation of Control's  <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> properties.</p> <p>Please note Control position works inside <code>Stack</code> control only.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c1 = ft.Container(width=50, height=50, bgcolor=\"red\", animate_position=1000)\n\n    c2 = ft.Container(\n        width=50, height=50, bgcolor=\"green\", top=60, left=0, animate_position=500\n    )\n\n    c3 = ft.Container(\n        width=50, height=50, bgcolor=\"blue\", top=120, left=0, animate_position=1000\n    )\n\n    def animate_container(e):\n        c1.top = 20\n        c1.left = 200\n        c2.top = 100\n        c2.left = 40\n        c3.top = 180\n        c3.left = 100\n        page.update()\n\n    page.add(\n        ft.Stack([c1, c2, c3], height=250),\n        ft.ElevatedButton(\"Animate!\", on_click=animate_container),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_rotation","title":"<code>animate_rotation: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_rotation</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.rotate</code>  property.</p> Example <pre><code>from math import pi\nimport flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=100,\n        height=70,\n        bgcolor=\"blue\",\n        border_radius=5,\n        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),\n        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.rotate.angle += pi / 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_scale","title":"<code>animate_scale: AnimationValue | None = None</code>","text":"<p>Setting control's <code>animate_scale</code> to either <code>True</code>, number or an instance of  <code>animation.Animation</code> class enables implicit animation of <code>Control.scale</code>  property.</p> Example <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=\"blue\",\n        border_radius=5,\n        scale=ft.transform.Scale(scale=1),\n        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.scale = 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.animate_size","title":"<code>animate_size: AnimationValue | None = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.aspect_ratio","title":"<code>aspect_ratio: OptionalNumber = None</code>","text":"<p>TBD</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.badge","title":"<code>badge: BadgeValue | None = None</code>","text":"<p>The <code>badge</code> property supports both strings and  <code>Badge</code> objects.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.bottom","title":"<code>bottom: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's bottom edge is inset from the bottom of the stack.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.cancel","title":"<code>cancel: Control | None = None</code>","text":"<p>An optional control to be shown below the actions but grouped separately from them.</p> <p>Typically a <code>CupertinoActionSheetAction</code>  button.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.col","title":"<code>col: ResponsiveNumber = 12</code>","text":"<p>If a parent of the control is ResponsiveRow, <code>col</code> property is used to determine  how many virtual columns of a screen the control will span. </p> <p>Can be a number or a dictionary configured to have a different value for specific  breakpoints, for example <code>col={\"sm\": 6}</code>. Breakpoints are named dimension ranges:</p> Breakpoint Dimension xs &lt;576px sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p>If <code>col</code> property is not specified, it spans the maximum number of columns (12).</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.data","title":"<code>data: Any = skip_field()</code>","text":"<p>Arbitrary data of any type that can be attached to a control.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.disabled","title":"<code>disabled: bool = False</code>","text":"<p>Every control has <code>disabled</code> property which is <code>False</code> by default - control and all  its children are enabled. This property is mostly used with data entry controls like <code>TextField</code>,  <code>Dropdown</code>, <code>Checkbox</code>, buttons.</p> Note <p>The value of this property will be propagated down to all children controls recursively.</p> Example <p>For example, if you have a form with multiple entry controls you can disable them  all together by disabling container:</p> <pre><code>c = ft.Column(\n    disabled = True,\n    controls=[\n        ft.TextField(),\n        ft.TextField()\n    ]\n)\npage.add(c)\n</code></pre>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.expand","title":"<code>expand: bool | int | None = None</code>","text":"<p>When a child Control is placed into a <code>Column</code>  or a <code>Row</code> you can \"expand\" it to fill the  available space.  <code>expand</code> property could be a boolean value (<code>True</code> - expand control to fill all  available space) or an integer - an \"expand factor\" specifying how to divide a free  space with other expanded child controls.</p> <p>For more information and examples about <code>expand</code> property see \"Expanding children\"  sections in <code>Column</code> or  <code>Row</code>.</p> Example <p>Here is an example of expand being used in action for both <code>Column</code>  and <code>Row</code>:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.spacing = 0\n    page.padding = 0\n    page.add(\n        ft.Column(\n            controls=[\n                ft.Row(\n                    [\n                        ft.Card(\n                            content=ft.Text(\"Card_1\"),\n                            color=ft.Colors.ORANGE_300,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                        ft.Card(\n                            content=ft.Text(\"Card_2\"),\n                            color=ft.Colors.GREEN_100,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                    ],\n                    expand=True,\n                    spacing=0,\n                ),\n            ],\n            expand=True,\n            spacing=0,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.expand_loose","title":"<code>expand_loose: bool | None = None</code>","text":"<p>Effective only if <code>expand</code> is <code>True</code>. </p> <p>If <code>expand_loose</code> is <code>True</code>, the child control of a  <code>Column</code> or a <code>Row</code>  will be given the flexibility to expand to fill the available space in the main  axis (e.g., horizontally for a Row or vertically for a Column), but will not be  required to fill the available space.</p> <p>The default value is <code>False</code>.</p> Example <p>Here is the example of Containers placed in Rows with <code>expand_loose = True</code>: <pre><code>import flet as ft\n\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\n\ndef main(page: ft.Page):\n    chat = ft.ListView(\n        padding=10,\n        spacing=10,\n        controls=[\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Hi, how are you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Hi I am good thanks, how about you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Lorem Ipsum is simply dummy text of the printing and \n                        typesetting industry. Lorem Ipsum has been the industry's \n                        standard dummy text ever since the 1500s, when an unknown \n                        printer took a galley of type and scrambled it to make a \n                        type specimen book.\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Thank you!\",\n                    ),\n                ],\n            ),\n        ],\n    )\n\n    page.window.width = 393\n    page.window.height = 600\n    page.window.always_on_top = False\n\n    page.add(chat)\n\n\nft.run(main)\n</code></pre></p> <p></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.height","title":"<code>height: OptionalNumber = None</code>","text":"<p>Imposed Control height in virtual pixels.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.key","title":"<code>key: str | int | float | bool | ValueKey | ScrollKey | None = None</code>","text":""},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.left","title":"<code>left: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's left edge is inset from the left of the stack.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.message","title":"<code>message: StrOrControl | None = None</code>","text":"<p>A control containing a descriptive message that provides more details about the reason for the alert.</p> <p>Typically a <code>Text</code> control.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.offset","title":"<code>offset: OffsetValue | None = None</code>","text":"<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size.  For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal  translation of one quarter the width of the control.</p> Example <p>The following example displays container at <code>0, 0</code> top left corner of a stack as  transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and  vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            width=1000,\n            height=1000,\n            controls=[\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n        )\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.on_animation_end","title":"<code>on_animation_end: OptionalControlEventHandler[ConstrainedControl] = None</code>","text":"<p>All controls with <code>animate_*</code> properties have <code>on_animation_end</code> event handler  which is called when animation complete and can be used to chain multiple  animations.</p> <p>Event's object <code>data</code> field contains the name of animation:</p> <ul> <li><code>opacity</code></li> <li><code>rotation</code></li> <li><code>scale</code></li> <li><code>offset</code></li> <li><code>position</code></li> <li><code>container</code></li> </ul> Example <p>For example:</p> <pre><code>ft.Container(\n    ft.Text(\"Animate me!\"),\n    animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n    on_animation_end=lambda e: print(\"Container animation end:\", e.data)\n)\n</code></pre>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.opacity","title":"<code>opacity: Number = 1.0</code>","text":"<p>Defines the transparency of the control.</p> <p>Value ranges from <code>0.0</code> (completely transparent) to <code>1.0</code> (completely opaque  without any transparency) and defaults to <code>1.0</code>.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.page","title":"<code>page: Page | PageView | None</code>","text":"<p>The page (of type <code>Page</code> or <code>PageView</code>) to which this control belongs to.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.parent","title":"<code>parent: BaseControl | None</code>","text":"<p>The direct ancestor(parent) of this control.</p> <p>It defaults to <code>None</code> and will only have a value when this control is mounted (added to the page tree).</p> <p>The <code>Page</code> control (which is the root of the tree) is an exception - it always has <code>parent=None</code>.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.right","title":"<code>right: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's right edge is inset from the right of the stack.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.rotate","title":"<code>rotate: RotateValue | None = None</code>","text":"<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code>  radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> -  the location of rotation center.</li> </ul> Example <p>For example: <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.Alignment.center_left())\n)\n</code></pre></p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.rtl","title":"<code>rtl: bool = False</code>","text":"<p>Whether the text direction of the control should be right-to-left (RTL).</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.scale","title":"<code>scale: ScaleValue | None = None</code>","text":"<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not  scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting  <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class.</p> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them.</p> Example <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.title","title":"<code>title: StrOrControl | None = None</code>","text":"<p>A control containing the title of the action sheet.</p> <p>Typically a <code>Text</code> control.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.tooltip","title":"<code>tooltip: TooltipValue | None = None</code>","text":"<p>The <code>tooltip</code> property supports both strings  and <code>Tooltip</code> objects.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.top","title":"<code>top: OptionalNumber = None</code>","text":"<p>Effective inside <code>Stack</code> only. The distance  that the child's top edge is inset from the top of the stack.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.visible","title":"<code>visible: bool = True</code>","text":"<p>Every control has <code>visible</code> property which is <code>True</code> by default - control is  rendered on the page. Setting <code>visible</code> to <code>False</code> completely prevents control (and  all its children if any) from rendering on a page canvas. Hidden controls cannot be  focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#flet.CupertinoActionSheet.width","title":"<code>width: OptionalNumber = None</code>","text":"<p>Imposed Control width in virtual pixels.</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#examples","title":"Examples","text":"<p>Live example</p>"},{"location":"api/controls/dialogs/cupertinoactionsheet/#example-1","title":"Example 1","text":"<pre><code>import flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Default Action\"),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Normal Action\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Destructive Action\"),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/navigation/appbar/","title":"AppBar","text":""},{"location":"api/controls/navigation/appbar/#flet.AppBar","title":"<code>AppBar</code>","text":"<p>               Bases: <code>AdaptiveControl</code></p> <p>A material design app bar.</p> RAISES DESCRIPTION <code>AssertionError</code> <p>If</p> Note <p>This control is non-visual and should be added to <code>Page.services</code> list before it can be used.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.actions","title":"<code>actions: list[Control] | None = None</code>","text":"<p>A list of <code>Control</code>s to display in a row after the title control.</p> <p>Typically these controls are <code>IconButtons</code>  representing common operations. For less common operations, consider using a  <code>PopupMenuButton</code> as the last  action.</p> <p>Note that, if <code>AppBar.adaptive=True</code> and the app is opened on an iOS or macOS  device, only the first element of this list will be used. This is because the  <code>CupertinoAppBar</code>(which will be used on those two platforms) only accepts one -  trailing - action control.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.adaptive","title":"<code>adaptive: bool | None = None</code>","text":"<p><code>adaptive</code> property can be specified for a control in the following cases:</p> <ul> <li> <p>A control has matching Cupertino control with similar functionality/presentation      and graphics as expected on iOS/macOS. In this case, if <code>adaptive</code> is <code>True</code>,      either Material or Cupertino control will be created depending on the target      platform.  </p> <p>These controls have their Cupertino analogs and <code>adaptive</code> property:</p> <ul> <li><code>AlertDialog</code></li> <li><code>AppBar</code></li> <li><code>Checkbox</code></li> <li><code>ListTile</code></li> <li><code>NavigationBar</code></li> <li><code>Radio</code></li> <li><code>Slider</code></li> <li><code>Switch</code></li> </ul> </li> <li> <p>A control has child controls. In this case <code>adaptive</code> property value is passed on      to its children that don't have their <code>adaptive</code> property set. </p> <p>The following container controls have <code>adaptive</code> property:</p> <ul> <li><code>Card</code></li> <li><code>Column</code></li> <li><code>Container</code></li> <li><code>Dismissible</code></li> <li><code>ExpansionPanel</code></li> <li><code>FletApp</code></li> <li><code>GestureDetector</code></li> <li><code>GridView</code></li> <li><code>ListView</code></li> <li><code>Page</code></li> <li><code>Row</code></li> <li><code>SafeArea</code></li> <li><code>Stack</code></li> <li><code>Tabs</code></li> <li><code>View</code></li> </ul> </li> </ul>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.automatically_imply_leading","title":"<code>automatically_imply_leading: bool = True</code>","text":"<p>Controls whether we should try to imply the leading widget if null.</p> <p>If <code>True</code> and <code>leading</code> is null, automatically try to deduce what the leading  widget should be. If <code>False</code> and <code>leading</code> is null, leading space is given to  title. If leading widget is not null, this parameter has no effect.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.badge","title":"<code>badge: BadgeValue | None = None</code>","text":"<p>The <code>badge</code> property supports both strings and  <code>Badge</code> objects.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.bgcolor","title":"<code>bgcolor: OptionalColorValue = None</code>","text":"<p>The fill color to use for an AppBar.  Default color is defined by current theme.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.center_title","title":"<code>center_title: bool = False</code>","text":"<p>Whether the title should be centered.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.clip_behavior","title":"<code>clip_behavior: ClipBehavior | None = None</code>","text":"<p>The content will be clipped (or not) according to this option.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.col","title":"<code>col: ResponsiveNumber = 12</code>","text":"<p>If a parent of the control is ResponsiveRow, <code>col</code> property is used to determine  how many virtual columns of a screen the control will span. </p> <p>Can be a number or a dictionary configured to have a different value for specific  breakpoints, for example <code>col={\"sm\": 6}</code>. Breakpoints are named dimension ranges:</p> Breakpoint Dimension xs &lt;576px sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p>If <code>col</code> property is not specified, it spans the maximum number of columns (12).</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.color","title":"<code>color: OptionalColorValue = None</code>","text":"<p>The default color for <code>Text</code> and <code>Icon</code>  controls within the app bar. Default color is defined by current theme.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.data","title":"<code>data: Any = skip_field()</code>","text":"<p>Arbitrary data of any type that can be attached to a control.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.disabled","title":"<code>disabled: bool = False</code>","text":"<p>Every control has <code>disabled</code> property which is <code>False</code> by default - control and all  its children are enabled. This property is mostly used with data entry controls like <code>TextField</code>,  <code>Dropdown</code>, <code>Checkbox</code>, buttons.</p> Note <p>The value of this property will be propagated down to all children controls recursively.</p> Example <p>For example, if you have a form with multiple entry controls you can disable them  all together by disabling container:</p> <pre><code>c = ft.Column(\n    disabled = True,\n    controls=[\n        ft.TextField(),\n        ft.TextField()\n    ]\n)\npage.add(c)\n</code></pre>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.elevation","title":"<code>elevation: OptionalNumber = None</code>","text":"<p>The app bar's elevation.</p> <p>Note: This effect is only visible when using the Material 2 design  (<code>Theme.use_material3=False</code>).</p> <p>Value is of type <code>OptionalNumber</code>  and defaults to <code>4</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.elevation_on_scroll","title":"<code>elevation_on_scroll: OptionalNumber = None</code>","text":"<p>The elevation to be used if this app bar has something scrolled underneath it.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.exclude_header_semantics","title":"<code>exclude_header_semantics: bool = False</code>","text":"<p>Whether the <code>title</code> should be wrapped with header <code>Semantics</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.expand","title":"<code>expand: bool | int | None = None</code>","text":"<p>When a child Control is placed into a <code>Column</code>  or a <code>Row</code> you can \"expand\" it to fill the  available space.  <code>expand</code> property could be a boolean value (<code>True</code> - expand control to fill all  available space) or an integer - an \"expand factor\" specifying how to divide a free  space with other expanded child controls.</p> <p>For more information and examples about <code>expand</code> property see \"Expanding children\"  sections in <code>Column</code> or  <code>Row</code>.</p> Example <p>Here is an example of expand being used in action for both <code>Column</code>  and <code>Row</code>:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.spacing = 0\n    page.padding = 0\n    page.add(\n        ft.Column(\n            controls=[\n                ft.Row(\n                    [\n                        ft.Card(\n                            content=ft.Text(\"Card_1\"),\n                            color=ft.Colors.ORANGE_300,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                        ft.Card(\n                            content=ft.Text(\"Card_2\"),\n                            color=ft.Colors.GREEN_100,\n                            expand=True,\n                            height=page.height,\n                            margin=0,\n                        ),\n                    ],\n                    expand=True,\n                    spacing=0,\n                ),\n            ],\n            expand=True,\n            spacing=0,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.expand_loose","title":"<code>expand_loose: bool | None = None</code>","text":"<p>Effective only if <code>expand</code> is <code>True</code>. </p> <p>If <code>expand_loose</code> is <code>True</code>, the child control of a  <code>Column</code> or a <code>Row</code>  will be given the flexibility to expand to fill the available space in the main  axis (e.g., horizontally for a Row or vertically for a Column), but will not be  required to fill the available space.</p> <p>The default value is <code>False</code>.</p> Example <p>Here is the example of Containers placed in Rows with <code>expand_loose = True</code>: <pre><code>import flet as ft\n\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\n\ndef main(page: ft.Page):\n    chat = ft.ListView(\n        padding=10,\n        spacing=10,\n        controls=[\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Hi, how are you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Hi I am good thanks, how about you?\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.START,\n                controls=[\n                    Message(\n                        author=\"John\",\n                        body=\"Lorem Ipsum is simply dummy text of the printing and \n                        typesetting industry. Lorem Ipsum has been the industry's \n                        standard dummy text ever since the 1500s, when an unknown \n                        printer took a galley of type and scrambled it to make a \n                        type specimen book.\",\n                    ),\n                ],\n            ),\n            ft.Row(\n                alignment=ft.MainAxisAlignment.END,\n                controls=[\n                    Message(\n                        author=\"Jake\",\n                        body=\"Thank you!\",\n                    ),\n                ],\n            ),\n        ],\n    )\n\n    page.window.width = 393\n    page.window.height = 600\n    page.window.always_on_top = False\n\n    page.add(chat)\n\n\nft.run(main)\n</code></pre></p> <p></p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.force_material_transparency","title":"<code>force_material_transparency: bool = False</code>","text":"<p>Forces the app bar to be transparent (instead of Material's default type).</p> <p>This will also remove the visual display of <code>bgcolor</code> and <code>elevation</code>, and affect  other characteristics of this app bar.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.is_secondary","title":"<code>is_secondary: bool = False</code>","text":"<p>Whether this app bar is not being displayed at the top of the screen.</p> <p>Value is of type <code>bool</code> and defaults to <code>False</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.key","title":"<code>key: str | int | float | bool | ValueKey | ScrollKey | None = None</code>","text":""},{"location":"api/controls/navigation/appbar/#flet.AppBar.leading","title":"<code>leading: Control | None = None</code>","text":"<p>A <code>Control</code> to display before the toolbar's title.</p> <p>Typically the leading control is an <code>Icon</code>  or an <code>IconButton</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.leading_width","title":"<code>leading_width: OptionalNumber = None</code>","text":"<p>Defines the width of leading control.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.opacity","title":"<code>opacity: Number = 1.0</code>","text":"<p>Defines the transparency of the control.</p> <p>Value ranges from <code>0.0</code> (completely transparent) to <code>1.0</code> (completely opaque  without any transparency) and defaults to <code>1.0</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.page","title":"<code>page: Page | PageView | None</code>","text":"<p>The page (of type <code>Page</code> or <code>PageView</code>) to which this control belongs to.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.parent","title":"<code>parent: BaseControl | None</code>","text":"<p>The direct ancestor(parent) of this control.</p> <p>It defaults to <code>None</code> and will only have a value when this control is mounted (added to the page tree).</p> <p>The <code>Page</code> control (which is the root of the tree) is an exception - it always has <code>parent=None</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.rtl","title":"<code>rtl: bool = False</code>","text":"<p>Whether the text direction of the control should be right-to-left (RTL).</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.shadow_color","title":"<code>shadow_color: OptionalColorValue = None</code>","text":"<p>The color of the shadow below the app bar.</p> <p>A shadow is only visible and displayed if the <code>elevation</code> is greater than zero.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.shape","title":"<code>shape: OutlinedBorder | None = None</code>","text":"<p>The shape of the app bar's Material as well as its shadow.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.surface_tint_color","title":"<code>surface_tint_color: OptionalColorValue = None</code>","text":"<p>The color of the surface tint overlay applied to the app bar's <code>bgcolor</code> to  indicate elevation.</p> <p>By default, no overlay will be applied.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.title","title":"<code>title: StrOrControl | None = None</code>","text":"<p>The primary <code>Control</code> displayed in the app bar. Typically a <code>Text</code>  control that contains a description of the current contents of the app.</p> <p>Note that, if <code>AppBar.adaptive=True</code> and the app is opened on an iOS or macOS  device, this control will be automatically centered.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.title_spacing","title":"<code>title_spacing: OptionalNumber = None</code>","text":"<p>The spacing around <code>title</code> on the horizontal axis. It is applied even if there are  no <code>leading</code> or <code>actions</code> controls.</p> <p>If you want <code>title</code> to take all the space available, set this value to <code>0.0</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.title_text_style","title":"<code>title_text_style: TextStyle | None = None</code>","text":"<p>The style to be used for the <code>Text</code> controls in the <code>title</code>.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.toolbar_height","title":"<code>toolbar_height: OptionalNumber = None</code>","text":"<p>Defines the height of the toolbar component of an AppBar.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.toolbar_opacity","title":"<code>toolbar_opacity: Number = 1.0</code>","text":"<p>The opacity of the toolbar. Value ranges from <code>0.0</code> (transparent) to <code>1.0</code> (fully  opaque).</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.toolbar_text_style","title":"<code>toolbar_text_style: TextStyle | None = None</code>","text":"<p>The style to be used for the <code>Text</code> controls in the app bar's <code>leading</code> and  <code>actions</code> (but not <code>title</code>).</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.tooltip","title":"<code>tooltip: TooltipValue | None = None</code>","text":"<p>The <code>tooltip</code> property supports both strings  and <code>Tooltip</code> objects.</p>"},{"location":"api/controls/navigation/appbar/#flet.AppBar.visible","title":"<code>visible: bool = True</code>","text":"<p>Every control has <code>visible</code> property which is <code>True</code> by default - control is  rendered on the page. Setting <code>visible</code> to <code>False</code> completely prevents control (and  all its children if any) from rendering on a page canvas. Hidden controls cannot be  focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"api/controls/navigation/appbar/#examples","title":"Examples","text":"<p>Live example</p>"},{"location":"api/controls/navigation/appbar/#example-1","title":"Example 1","text":"<pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"AppBar Example\"\n\n    def check_item_clicked(e):\n        e.control.checked = not e.control.checked\n        page.update()\n\n    page.appbar = ft.AppBar(\n        leading=ft.Icon(ft.Icons.PALETTE),\n        leading_width=40,\n        title=ft.Text(\"AppBar Example\"),\n        center_title=False,\n        bgcolor=ft.Colors.BLUE_GREY_400,\n        actions=[\n            ft.IconButton(ft.Icons.WB_SUNNY_OUTLINED),\n            ft.IconButton(ft.Icons.FILTER_3),\n            ft.PopupMenuButton(\n                items=[\n                    ft.PopupMenuItem(text=\"Item 1\"),\n                    ft.PopupMenuItem(),  # divider\n                    ft.PopupMenuItem(\n                        text=\"Checked item\", checked=False, on_click=check_item_clicked\n                    ),\n                ]\n            ),\n        ],\n    )\n    page.add(ft.Text(\"Body!\"))\n\n\nft.run(main)\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/introducing-flet/","title":"Introducing Flet","text":"<p>Today we announce the first release of Flet!</p> <p>Flet is a framework for building real-time web, desktop and mobile applications in Python.</p> <p>No more complex architecture with JavaScript frontend, REST API backend, database, cache, etc. With Flet you just write a monolith stateful app in Python only and get multi-user, realtime Single-Page Application (SPA) or a mobile app.</p> <p>To start developing with Flet, you just need your favorite IDE or text editor. No SDKs, no thousands of dependencies, no complex tooling - Flet has built-in web server with assets hosting and desktop clients.</p> <p>Flet UI is built with Flutter, so your app looks professional and can be delivered to any platform. Flet simplifies Flutter model by combining smaller \"widgets\" into ready-to-use \"controls\" with imperative programming model. You get all the power of Flutter without having to learn Dart!</p> <p>Flet app is deployed as a regular web app and can be instanly accessed with a browser or installed as a PWA on a mobile device. Web app also exposes an API that can be used by a Flet client (planned for future releases) running on iOS and Android and providing native mobile experience.</p> <p>Some examples:</p> <ul> <li>Greeter</li> <li>Counter</li> <li>To-Do</li> <li>Icons Browser (Online Demo)</li> </ul> <p>Give Flet a try and let us know what you think!</p>","tags":["news","product"]},{"location":"blog/using-custom-fonts-in-flet-app/","title":"Using custom fonts in a Flet app","text":"<p>You can now use your own fonts in a Flet app!</p> <p>The following font formats are supported:</p> <ul> <li><code>.ttc</code></li> <li><code>.ttf</code></li> <li><code>.otf</code></li> </ul> <p>Use <code>page.fonts</code> property to import fonts.</p> <p>Set <code>page.fonts</code> property to a dictionary where key is the font family name to refer that font and the value is the URL of the font file to import:</p> <pre><code>def main(page: ft.Page):\n    page.fonts = {\n        \"Kanit\": \"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\",\n        \"Aleo Bold Italic\": \"https://raw.githubusercontent.com/google/fonts/master/ofl/aleo/Aleo-BoldItalic.ttf\"\n    }\n    page.update()\n\n    # ...\n</code></pre> <p>Font can be imported from external resource by providing an absolute URL or from application assets by providing relative URL and <code>assets_dir</code>.</p> <p>Specify <code>assets_dir</code> in <code>flet.app()</code> call to set the location of assets that should be available to the application. <code>assets_dir</code> could be a relative to your <code>main.py</code> directory or an absolute path. For example, consider the following program structure:</p> <pre><code>/assets\n   /fonts\n       /OpenSans-Regular.ttf\nmain.py\n</code></pre>","tags":["how-to"]},{"location":"blog/using-custom-fonts-in-flet-app/#code-sample","title":"Code sample","text":"<p>The following program loads \"Kanit\" font from GitHub and \"Open Sans\" from the assets. \"Kanit\" is set as a default app font and \"Open Sans\" is used for a specific Text control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Custom fonts\"\n\n    page.fonts = {\n        \"Kanit\": \"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\",\n        \"Open Sans\": \"fonts/OpenSans-Regular.ttf\",\n    }\n\n    page.theme = ft.Theme(font_family=\"Kanit\")\n\n    page.add(\n        ft.Text(\"This is rendered with Kanit font\"),\n        ft.Text(\"This is Open Sans font example\", font_family=\"Open Sans\"),\n    )\n\nft.app(target=main, assets_dir=\"assets\")\n</code></pre> <p></p>","tags":["how-to"]},{"location":"blog/using-custom-fonts-in-flet-app/#static-vs-variable-fonts","title":"Static vs Variable fonts","text":"<p>At the moment only static fonts are supported, i.e. fonts containing only one specific width/weight/style combination, for example \"Open Sans Regular\" or \"Roboto Bold Italic\".</p> <p>Variable fonts support is still work in progress.</p> <p>However, if you need to use a variable font in your app you can create static \"instantiations\" at specific weights using fonttools, then use those:</p> <pre><code>fonttools varLib.mutator ./YourVariableFont-VF.ttf wght=140 wdth=85\n</code></pre> <p>To explore available font features (e.g. possible options for <code>wght</code>) use Wakamai Fondue online tool.</p> <p>Give Flet a try and let us know what you think!</p>","tags":["how-to"]},{"location":"cookbook/accessibility/","title":"Accessibility","text":"<p>Flet is based on Flutter which includes first-class framework support for accessibility in addition to that provided by the underlying operating system.</p>"},{"location":"cookbook/accessibility/#screen-readers","title":"Screen readers","text":"<p>For mobile, screen readers (TalkBack, VoiceOver) enable visually impaired users to get spoken feedback about the contents of the screen and interact with the UI via gestures on mobile and keyboard shortcuts on desktop. Turn on VoiceOver or TalkBack on your mobile device and navigate around your app.</p> <p>For web, the following screen readers are currently supported:</p> <p>Mobile Browsers:</p> <ul> <li>iOS - VoiceOver</li> <li>Android - TalkBack</li> </ul> <p>Desktop Browsers:</p> <ul> <li>MacOS - VoiceOver</li> <li>Windows - JAWs &amp; NVDA</li> </ul> <p>Screen Readers users on web will need to toggle \"Enable accessibility\" button to build the semantics tree.</p>"},{"location":"cookbook/accessibility/#text","title":"Text","text":"<p>Use <code>Text.semantics_label</code> property to override default Text control semantics.</p>"},{"location":"cookbook/accessibility/#buttons","title":"Buttons","text":"<p>All buttons with text on them generate proper semantics.</p> <p>Use <code>tooltip</code> property to add screen reader semantics for <code>IconButton</code>, <code>FloatingActionButton</code> and <code>PopupMenuButton</code> buttons.</p>"},{"location":"cookbook/accessibility/#textfield-and-dropdown","title":"<code>TextField</code> and <code>Dropdown</code>","text":"<p>Use <code>TextField.label</code> and <code>Dropdown.label</code> properties to add screen reader semantics to those controls.</p>"},{"location":"cookbook/accessibility/#custom-semantics","title":"Custom semantics","text":"<p>For any specific requirements use <code>Semantics</code> control.</p>"},{"location":"cookbook/accessibility/#debugging-semantics","title":"Debugging semantics","text":"<p>Set <code>page.show_semantics_debugger</code> to <code>True</code> to show an overlay that shows the accessibility information reported by the framework.</p> <p>You can implement a specific keyboard shortcut to conveniently toggle semantics debugger during app development:</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def on_keyboard(e: ft.KeyboardEvent):\n        print(e)\n        if e.key == \"S\" and e.ctrl:\n            page.show_semantics_debugger = not page.show_semantics_debugger\n            page.update()\n\n    page.on_keyboard_event = on_keyboard\n\n    txt_number = ft.Text(\"0\", size=40)\n\n    def button_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    page.add(\n        txt_number,\n        ft.Text(\"Press CTRL+S to toggle semantics debugger\"),\n        ft.FloatingActionButton(\n            icon=ft.Icons.ADD, tooltip=\"Increment number\", on_click=button_click\n        ),\n    )\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"cookbook/animations/","title":"Animations","text":""},{"location":"cookbook/animations/#implicit-animations","title":"Implicit animations","text":"<p>With implicit animations, you can animate a control property by setting a target value; whenever that target value changes, the control animates the property from the old value to the new one. Animation produces interpolated values between the old and the new value over the given duration. By default, the animation is linearly increasing the animation value, however, a curve can be applied to the animation which changes the value according to the provided curve. For example, <code>easeOutCubic</code> curve increases the animation value quickly at the beginning of the animation and then slows down until the target value is reached:</p> <p>Each <code>Control</code> provides a number of <code>animate_{something}</code> properties, described below, to enable implicit animation of its appearance:</p> <ul> <li><code>animate_opacity</code></li> <li><code>animate_rotation</code></li> <li><code>animate_scale</code></li> <li><code>animate_offset</code></li> <li><code>animate_position</code></li> <li><code>animate</code> (Container)</li> </ul> <p><code>animate_*</code> properties could have one of the following values:</p> <ul> <li>Instance of <code>ft.Animation</code> class - allows configuring the duration (in milliseconds) and the curve of the animation, for example <code>animate_rotation=ft.animation.Animation(duration=300, curve=\"bounceOut\")</code>. See Curves in Flutter docs for possible values. Default is <code>linear</code>.</li> <li><code>int</code> value - enables animation with specified duration in milliseconds and <code>linear</code> curve.</li> <li><code>bool</code> value - enables animation with the duration of 1000 milliseconds and <code>linear</code> curve.</li> </ul>"},{"location":"cookbook/animations/#opacity-animation","title":"Opacity animation","text":"<p>Setting control's <code>animate_opacity</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of <code>Control.opacity</code> property.</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=ft.Colors.BLUE,\n        border_radius=10,\n        animate_opacity=300,\n    )\n\n    def animate_opacity(e):\n        c.opacity = 0 if c.opacity == 1 else 1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\n            \"Animate opacity\",\n            on_click=animate_opacity,\n        ),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#rotation-animation","title":"Rotation animation","text":"<p>Setting control's <code>animate_rotation</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of <code>Control.rotate</code> property.</p> <p></p> <pre><code>from math import pi\nimport flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=100,\n        height=70,\n        bgcolor=ft.Colors.BLUE,\n        border_radius=5,\n        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),\n        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.rotate.angle += pi / 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#scale-animation","title":"Scale animation","text":"<p>Setting control's <code>animate_scale</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of <code>Control.scale</code> property.</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=ft.Colors.BLUE,\n        border_radius=5,\n        scale=ft.transform.Scale(scale=1),\n        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.scale = 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#offset-animation","title":"Offset animation","text":"<p>Setting control's <code>animate_offset</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of <code>Control.offset</code> property.</p> <p><code>offset</code> property is an instance of <code>transform.Offset</code> class which specifies horizontal <code>x</code> and vertical <code>y</code> offset of a control scaled to control's size. For example, an offset <code>transform.Offset(-0.25, 0)</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>Offset animation is used for various sliding effects:</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=ft.Colors.BLUE,\n        border_radius=10,\n        offset=ft.transform.Offset(-2, 0),\n        animate_offset=ft.animation.Animation(1000),\n    )\n\n    def animate(e):\n        c.offset = ft.transform.Offset(0, 0)\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Reveal!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#position-animation","title":"Position animation","text":"<p>Setting control's <code>animate_position</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of Control's <code>left</code>, <code>top</code>, <code>right</code> and <code>bottom</code> properties.</p> <p>Please note Control position works inside <code>Stack</code> control only.</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    c1 = ft.Container(width=50, height=50, bgcolor=ft.Colors.RED, animate_position=1000)\n\n    c2 = ft.Container(\n        width=50, height=50, bgcolor=ft.Colors.GREEN, top=60, left=0, animate_position=500\n    )\n\n    c3 = ft.Container(\n        width=50, height=50, bgcolor=ft.Colors.BLUE, top=120, left=0, animate_position=1000\n    )\n\n    def animate_container(e):\n        c1.top = 20\n        c1.left = 200\n        c2.top = 100\n        c2.left = 40\n        c3.top = 180\n        c3.left = 100\n        page.update()\n\n    page.add(\n        ft.Stack([c1, c2, c3], height=250),\n        ft.ElevatedButton(\"Animate!\", on_click=animate_container),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#animated-container","title":"Animated container","text":"<p>Setting <code>Container.animate</code> to either <code>True</code>, number or an instance of <code>animation.Animation</code> class (see above) enables implicit animation of container properties such as size, background color, border style, gradient.</p> <p></p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor=ft.Colors.RED,\n        animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate_container(e):\n        c.width = 100 if c.width == 150 else 150\n        c.height = 50 if c.height == 150 else 150\n        c.bgcolor = ft.Colors.BLUE if c.bgcolor == ft.Colors.RED else ft.Colors.RED\n        c.update()\n\n    page.add(c, ft.ElevatedButton(\"Animate container\", on_click=animate_container))\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#animated-content-switcher","title":"Animated content switcher","text":"<p><code>AnimatedSwitcher</code> allows animated transition between a new control and the control previously set on the AnimatedSwitcher as a <code>content</code>.</p> <p></p> <pre><code>import time\n\nimport flet as ft\n\ndef main(page: ft.Page):\n\n    i = ft.Image(src=\"https://picsum.photos/150/150\", width=150, height=150)\n\n    def animate(e):\n        sw.content = ft.Image(\n            src=f\"https://picsum.photos/150/150?{time.time()}\", width=150, height=150\n        )\n        page.update()\n\n    sw = ft.AnimatedSwitcher(\n        i,\n        transition=ft.AnimatedSwitcherTransition.SCALE,\n        duration=500,\n        reverse_duration=500,\n        switch_in_curve=ft.AnimationCurve.BOUNCE_OUT,\n        switch_out_curve=ft.AnimationCurve.BOUNCE_IN,\n    )\n\n    page.add(\n        sw,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/animations/#animation-end-callback","title":"Animation end callback","text":"<p>All controls with <code>animate_*</code> properties have <code>on_animation_end</code> event handler which is called when animation complete and can be used to chain multiple animations.</p> <p>Event's <code>data</code> field/property contains the name of animation:</p> <ul> <li><code>opacity</code></li> <li><code>rotation</code></li> <li><code>scale</code></li> <li><code>offset</code></li> <li><code>position</code></li> <li><code>container</code></li> </ul> <p>For example:</p> <pre><code> c = ft.Container(\n        ft.Text(\"Animate me!\"),\n        # ...\n        animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n        on_animation_end=lambda e: print(\"Container animation end:\", e.data)\n    )\n</code></pre>"},{"location":"cookbook/assets/","title":"Assets","text":"<p>Flet apps can include both code and assets/resources.  An asset is a file that is bundled and deployed with your app and is accessible at runtime.  Common types of assets include static data (e.g., JSON files), configuration files, icons, images, videos, etc.</p> <p>To use relative paths for your asset files, you need to provide a path to your assets directory  when launching your app with the <code>ft.run()</code> function.  The parameter for this is called <code>assets_dir</code>, which defaults to <code>\"assets\"</code>.  This parameter specifies the folder where local assets are stored and can be either an absolute  path or a path relative to the app's entry point file, such as <code>main.py</code>.</p>"},{"location":"cookbook/assets/#example-displaying-a-local-image","title":"Example: Displaying a Local Image","text":"<p>Suppose you have a folder named <code>assets</code> in the same directory as your <code>main.py</code> file, and  this folder contains an image file named <code>sample.png</code> in a subfolder called <code>images</code>:</p> <pre><code>\ud83d\udcc1 assets\n\u2514\u2500\u2500 \ud83d\udcc1 images\n    \u2514\u2500\u2500 \ud83d\udcc4 sample.png\n\ud83d\udcc4 main.py\n</code></pre> <p>To display this image in your app, you can do the following:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Image(src=\"images/sample.png\")\n    )\n\nft.run(main, assets_dir=\"assets\")\n</code></pre> <p>The same approach applies to other asset types like fonts, Lottie animations, Rive files, etc.</p>"},{"location":"cookbook/authentication/","title":"Authentication","text":"<p>You can implement user authentication (\"Login with X\" buttons) in your Flet app using  3<sup>rd</sup>-party identity providers such as GitHub, Google, Azure, Auth0, LinkedIn and others.</p> <p>Identity provider must support OAuth 2.0 Authorization Code Flow to retrieve API access token.</p> <p>Built-in Flet login with credentials and user management is planned for future releases. If you have a requirement to create and manage user accounts in your app you can implement it by your own or use Auth0 identity provider which provides a generous free tier.</p> <p>Flet authentication features:</p> <ul> <li>Works with Flet desktop, web and mobile apps.</li> <li>Using multiple authentication providers in one app.</li> <li>Built-in OAuth providers with automatic user details fetching:</li> <li>GitHub</li> <li>Azure</li> <li>Google</li> <li>Auth0</li> <li>Optional groups fetching.</li> <li>Automatic token refresh.</li> <li>Login with a saved token (\"Remember me\").</li> <li>Custom OAuth providers.</li> </ul>"},{"location":"cookbook/authentication/#login-process-overview","title":"Login process overview","text":"<ul> <li>Configure OAuth provider (built-in or generic) with Client ID, Client secret, Redirect URL.</li> <li>Call <code>page.login(provider)</code> to initiate OAuth web flow.</li> <li>User is being redirected to OAuth provider website.</li> <li>On provider website user signs in and gives consent to access service API with requested scopes.</li> <li>Provider website redirects to Flet's OAuth callback URL with authorization code.</li> <li>Flet exchanges authorization code for a token and calls <code>page.on_login</code> event handler.</li> <li>Flet app can retrieve API token from <code>page.auth.token</code> property and user details from <code>page.auth.user</code>.</li> </ul>"},{"location":"cookbook/authentication/#configuring-oauth-provider","title":"Configuring OAuth provider","text":"<p>Flet has the following built-in OAuth providers:</p> <ul> <li>GitHub</li> <li>Azure</li> <li>Google</li> <li>Auth0</li> </ul> <p>Additionally, you can configure a generic OAuth provider and provide authorization, token and user info endpoints.</p> <p>In this guide we will configure Flet login page with GitHub account.</p> <p>To integrate Flet authentication with GitHub a new GitHub OAuth app should be registered first (Profile settings \u2192 Developer settings \u2192 OAuth Apps).</p> <p>Authorization callback URL should be in the format:</p> <pre><code>{application-url}/oauth_callback\n</code></pre> <p></p> <p>On OAuth app details page click \"Generate a new client secret\" button. Copy \"Client ID\" and \"Client secret\" values to a safe place - you'll need them in a Flet app.</p> <p></p>"},{"location":"cookbook/authentication/#sign-in-with-oauth-provider","title":"Sign in with OAuth provider","text":"<pre><code>import os\n\nimport flet as ft\nfrom flet.auth.providers import GitHubOAuthProvider\n\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nassert GITHUB_CLIENT_ID, \"set GITHUB_CLIENT_ID environment variable\"\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nassert GITHUB_CLIENT_SECRET, \"set GITHUB_CLIENT_SECRET environment variable\"\n\ndef main(page: ft.Page):\n    provider = GitHubOAuthProvider(\n        client_id=GITHUB_CLIENT_ID,\n        client_secret=GITHUB_CLIENT_SECRET,\n        redirect_url=\"http://localhost:8550/oauth_callback\",\n    )\n\n    def login_click(e):\n        page.login(provider)\n\n    def on_login(e):\n        print(\"Login error:\", e.error)\n        print(\"Access token:\", page.auth.token.access_token)\n        print(\"User ID:\", page.auth.user.id)\n\n    page.on_login = on_login\n    page.add(ft.ElevatedButton(\"Login with GitHub\", on_click=login_click))\n\nft.run(main, port=8550, view=ft.WEB_BROWSER)\n</code></pre> <p>Caution</p> <p>Notice, we are fetching OAuth app client ID and client secret from an environment variables. Do not embed any secrets into source code to avoid accidental exposure to a public!</p> <p>Before running the app set the secret environment variables in a command line:</p> <pre><code>$ export GITHUB_CLIENT_ID=\"&lt;client_id&gt;\"\n$ export GITHUB_CLIENT_SECRET=\"&lt;client_secret&gt;\"\n</code></pre> <p>Run the program and click \"Login with GitHub\" button. GitHub authorize app page will be opened in:</p> <ul> <li>Desktop app - a new browser window or tab.</li> <li>Web app - a new popup window (make sure popup blocker is off).</li> <li>Mobile app - an in-app web browser.</li> </ul> <p></p>"},{"location":"cookbook/authentication/#redirect-url","title":"Redirect URL","text":"<p>We used <code>http://localhost:8550/oauth_callback</code> as a redirect URL while registering GitHub OAuth app. Notice it has a fixed port <code>8550</code>. To run your Flet app on a fixed port use <code>port</code> argument in <code>flet.app</code> call:</p> <pre><code>ft.run(main, port=8550)\n</code></pre>"},{"location":"cookbook/authentication/#scope","title":"Scope","text":"<p>Most of OAuth providers allows applications to request one or more scopes to limit application's access to a user's account.</p> <p>Built-in Flet providers, by default, request scopes to access user profile, but you can request additional scopes in login method, like <code>public_repo</code> in the example above:</p> <pre><code>page.login(\n    provider,\n    scope=[\"public_repo\"]\n)\n</code></pre> <p><code>page.login()</code> method has a number of arguments to control authentication process:</p> <ul> <li><code>fetch_user</code> (bool) - whether to fetch user details into <code>page.auth.user</code>. Default is <code>True</code>.</li> <li><code>fetch_groups</code> (bool) - whether to fetch user groups into <code>page.auth.user.groups</code>. Default is <code>False</code>.</li> <li><code>scope</code> - a list of scopes to request.</li> <li><code>saved_token</code> - a JSON snapshot of <code>page.auth.token</code> to restore authorization from. Token can be serialized with <code>page.auth.token.to_json()</code>, encrypted and saved in <code>page.client_storage</code>. See below.</li> <li><code>on_open_authorization_url</code> - a callback to open a browser with authorization URL. See below.</li> <li><code>complete_page_html</code> - a custom HTML contents of \"You've been successfully authenticated. Close this page now\" page.</li> <li><code>redirect_to_page</code> (bool) - used with Flet web app only when authorization page is opened in the same browser tab.</li> </ul> <p>The result of <code>page.login()</code> call is an instance of <code>Authorization</code> class with the following fields:</p> <ul> <li><code>token</code> - OAuth token used to access provider's API. See below.</li> <li><code>user</code> - user details with a mandatory <code>id</code> field and other fields specific to OAuth provider.</li> <li><code>provider</code> - an instance of OAuth provider used for authorization.</li> </ul> <p>A reference to the last authorization is saved in <code>page.auth</code> property.</p> <p>If your app allows authorizations with multiple OAuth providers you can save authorizations in a session, for example:</p> <pre><code>page.session[\"github_auth\"] = page.login(github_provider)\npage.session[\"google_auth\"] = page.login(google_provider)\n</code></pre>"},{"location":"cookbook/authentication/#checking-authentication-results","title":"Checking authentication results","text":"<p>Upon successful or failed authorization <code>page.on_login</code> event handler is called.</p> <p>Event handler argument <code>e</code> is an instance of <code>LoginEvent</code> class with the following properties:</p> <ul> <li><code>error</code> (str) - OAuth error.</li> <li><code>error_description</code> (str) - OAuth error description.</li> </ul> <p>Authorization was successful if <code>error</code> is an empty string.</p> <p>You can use this event handler to toggle signed in/out UI, for example:</p> <pre><code>import os\n\nimport flet\nfrom flet import ElevatedButton, LoginEvent, Page\nfrom flet.auth.providers import GitHubOAuthProvider\n\ndef main(page: Page):\n    provider = GitHubOAuthProvider(\n        client_id=os.getenv(\"GITHUB_CLIENT_ID\"),\n        client_secret=os.getenv(\"GITHUB_CLIENT_SECRET\"),\n        redirect_url=\"http://localhost:8550/oauth_callback\",\n    )\n\n    def login_button_click(e):\n        page.login(provider, scope=[\"public_repo\"])\n\n    def on_login(e: LoginEvent):\n        if not e.error:\n            toggle_login_buttons()\n\n    def logout_button_click(e):\n        page.logout()\n\n    def on_logout(e):\n        toggle_login_buttons()\n\n    def toggle_login_buttons():\n        login_button.visible = page.auth is None\n        logout_button.visible = page.auth is not None\n        page.update()\n\n    login_button = ElevatedButton(\"Login with GitHub\", on_click=login_button_click)\n    logout_button = ElevatedButton(\"Logout\", on_click=logout_button_click)\n    toggle_login_buttons()\n    page.on_login = on_login\n    page.on_logout = on_logout\n    page.add(login_button, logout_button)\n\nflet.app(main, port=8550, view=flet.WEB_BROWSER)\n</code></pre>"},{"location":"cookbook/authentication/#accessing-user-details","title":"Accessing user details","text":"<p>If <code>page.login()</code> method is called with <code>fetch_user=True</code> (default) a user profile will be assigned to <code>page.auth.user</code>.</p> <p>All built-in OAuth providers implement <code>user.id</code> property - unique user identifier - which value depends on the provider (a number, Guid or email) and can be used in your app as a user key.</p> <p>The rest of user profile properties depends on provider and can be accessed with an indexer. For example, to print some properties of GitHub user:</p> <pre><code>print(\"Name:\", page.auth.user[\"name\"])\nprint(\"Login:\", page.auth.user[\"login\"])\nprint(\"Email:\", page.auth.user[\"email\"])\n</code></pre>"},{"location":"cookbook/authentication/#using-oauth-token","title":"Using OAuth token","text":"<p>Upon successful authorization <code>page.auth.token</code> will contain OAuth token that can be used to access providers's API. Token object has the following properties:</p> <ul> <li><code>access_token</code> - access token used as an authorization token in API request header.</li> <li><code>scope</code> - token's scope.</li> <li><code>token_type</code> - access token type, e.g. <code>Bearer</code>.</li> <li><code>expires_in</code> - optional number of seconds when access token expires.</li> <li><code>expires_at</code> - optional time (<code>time.time()</code> + <code>expires_in</code>) when access token expires.</li> <li><code>refresh_token</code> - optional refresh token which is used to get a new access token, when the old one expires.</li> </ul> <p>Usually, only <code>page.auth.token.access_token</code> is needed to call provider's API, for example to list user's GitHub repositories:</p> <pre><code>import requests\nheaders = {\"Authorization\": \"Bearer {}\".format(page.auth.token.access_token)}\nrepos_resp = requests.get(\"https://api.github.com/user/repos\", headers=headers)\nuser_repos = json.loads(repos_resp.text)\nfor repo in user_repos:\n    print(repo[\"full_name\"])\n</code></pre> <p>Note</p> <p>Do not save a reference to <code>page.auth.token</code> somewhere in your code, but rather call <code>page.auth.token</code> every time you need to grab access token. <code>page.auth.token</code> is a property which automatically refreshes OAuth token if/when it expires.</p> <p>Correct code:</p> <pre><code>access_token = page.auth.token.access_token\n</code></pre> <p>Wrong code:</p> <pre><code>token = page.auth.token\n# some other code\naccess_token = token.access_token # token could expire by this moment\n</code></pre>"},{"location":"cookbook/authentication/#saving-and-restoring-an-auth-token","title":"Saving and restoring an auth token","text":"<p>To implement persistent login (\"Remember me\" checkbox on login page) you can save auth token in a client storage and use it to login next time a user opens your Flet app.</p> <p>To serialize auth token to JSON:</p> <pre><code>jt = page.auth.token.to_json()\n</code></pre> <p>Caution</p> <p>Encrypt sensitive data before sending it to a client storage.</p> <p>Flet includes utility methods for encrypting text data using symmetric algorithm (where the same key is used for encryption and decryption). They use Fernet implementation from cryptography package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase.</p> <p>To encrypt JSON token:</p> <pre><code>import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv(\"MY_APP_SECRET_KEY\")\n# returns base64-encoded string\nejt = encrypt(jt, secret_key)\n</code></pre> <p>Caution</p> <p>Notice, we are fetching a secret key (aka passphrase, password, etc.) from an environment variable. Do not embed any secrets into source code to avoid accidental exposure to a public!</p> <p>Before running the app set the secret in a command line:</p> <pre><code>$ export MY_APP_SECRET_KEY=\"&lt;secret&gt;\"\n</code></pre> <p>Now, encrypted value can be stored in a client storage:</p> <pre><code>page.client_storage.set(\"myapp.auth_token\", ejt)\n</code></pre> <p>Next time a user opens the app you can read encrypted token from a client storage and, if it exists, decrypt it and use in <code>page.login()</code> method:</p> <pre><code>ejt = page.client_storage.get(\"myapp.auth_token\")\nif ejt:\n    jt = decrypt(ejt, secret_key)\n    page.login(provider, saved_token=jt)\n</code></pre> <p>See complete app example.</p>"},{"location":"cookbook/authentication/#signing-out","title":"Signing out","text":"<p>Calling <code>page.logout()</code> resets <code>page.auth</code> reference and triggers <code>page.on_logout</code> event handlers.</p> <p>You can remove saved token in logout method, for example:</p> <pre><code>def logout_button_click(e):\n    page.client_storage.remove(AUTH_TOKEN_KEY)\n    page.logout()\n</code></pre> <p>See complete app example.</p>"},{"location":"cookbook/authentication/#customizing-authorization-flow","title":"Customizing authorization flow","text":"<p>By default, OAuth authorization flow is happening in either new browser window/tab (desktop app), browser popup window (web) or in-app web view (mobile).</p> <p>Upon completion of authorization flow a user is redirected to Flet's OAuth callback page (<code>/oauth_callback</code>) which tries to close a browser window/tab with JavaScript and provides user with instructions to close the window manually if JavaScript close didn't work.</p> <p>This section is applicable to Flet desktop and web apps only as in-app web view in mobile apps can be closed by Flet without relying on JavaScript.</p> <p>You can customize the contents of \"Authorization complete\" page in <code>page.login()</code> method, for example:</p> <pre><code>complete_page_html = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Signed in to MyApp&lt;/title&gt;\n  &lt;/head&gt;\n&lt;body&gt;\n  &lt;script type=\"text/javascript\"&gt;\n      window.close();\n  &lt;/script&gt;\n  &lt;p&gt;You've been successfully signed in! You can close this tab or window now.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\npage.login(\n    provider,\n    complete_page_html=complete_page_html,\n)\n</code></pre> <p>You can also change web app to open provider's authorization page in the same tab which might be more familiar to your users and save them from dealing with popup blockers:</p> <pre><code>page.login(\n    provider,\n    on_open_authorization_url=lambda url: page.launch_url(url, web_window_name=\"_self\"),\n    redirect_to_page=True\n)\n</code></pre> <p>To open flow in a new tab (notice <code>_self</code> replaced with <code>_blank</code>):</p> <pre><code>page.login(\n    provider,\n    on_open_authorization_url=lambda url: page.launch_url(url, web_window_name=\"_blank\")\n)\n</code></pre>"},{"location":"cookbook/authentication/#configuring-a-custom-oauth-provider","title":"Configuring a custom OAuth provider","text":"<p>You can configure any OAuth-compatible authentication provider in your app with <code>flet.auth.oauth_provider.OAuthProvider</code> class.</p> <p>Following the instructions in LinkedIn Authorization Code Flow guide we are able to get all required parameters to configure LinkedIn OAuth provider to allow users of your Flet app to login with their LinkedIn accounts:</p> <pre><code>import os\n\nimport flet\nfrom flet import ElevatedButton, Page\nfrom flet.auth import OAuthProvider\n\ndef main(page: Page):\n    provider = OAuthProvider(\n        client_id=os.getenv(\"LINKEDIN_CLIENT_ID\"),\n        client_secret=os.getenv(\"LINKEDIN_CLIENT_SECRET\"),\n        authorization_endpoint=\"https://www.linkedin.com/oauth/v2/authorization\",\n        token_endpoint=\"https://www.linkedin.com/oauth/v2/accessToken\",\n        user_endpoint=\"https://api.linkedin.com/v2/me\",\n        user_scopes=[\"r_liteprofile\", \"r_emailaddress\"],\n        user_id_fn=lambda u: u[\"id\"],\n        redirect_url=\"http://localhost:8550/oauth_callback\",\n    )\n\n    def login_click(e):\n        page.login(provider)\n\n    def on_login(e):\n        if e.error:\n            raise Exception(e.error)\n        print(\"User ID:\", page.auth.user.id)\n        print(\"Access token:\", page.auth.token.access_token)\n\n    page.on_login = on_login\n    page.add(ElevatedButton(\"Login with LinkedIn\", on_click=login_click))\n\nflet.app(main, port=8550, view=flet.WEB_BROWSER)\n</code></pre> <p>Mandatory provider settings:</p> <ul> <li><code>client_id</code></li> <li><code>client_secret</code></li> <li><code>authorization_endpoint</code></li> <li><code>token_endpoint</code></li> <li><code>redirect_url</code></li> </ul> <p>Similar to other examples client ID and client secret are fetched from environment variables.</p>"},{"location":"cookbook/client-storage/","title":"Client storage","text":"<p>Flet's client storage API allows storing key-value data on a client side in a persistent storage.  Flet implementation uses <code>shared_preferences</code> Flutter package.</p> <p>The actual storage mechanism depends on a platform where Flet app is running:</p> <ul> <li>Web - Local storage.</li> <li>Desktop - JSON file.</li> <li>iOS - NSUserDefaults.</li> <li>Android - SharedPreferences.</li> </ul> <p>Writing data to the storage: <pre><code># strings\npage.client_storage.set(\"key\", \"value\")\n\n# numbers, booleans\npage.client_storage.set(\"number.setting\", 12345)\npage.client_storage.set(\"bool_setting\", True)\n\n# lists\npage.client_storage.set(\"favorite_colors\", [\"red\", \"green\", \"blue\"])\n</code></pre></p> <p>Note</p> <p>Each Flutter application using <code>shared_preferences</code> plugin has its own set of preferences. As the same Flet client (which is a Flutter app) is used to run UI for multiple Flet apps any values stored in one Flet application are visible/available to another Flet app running by the same user.</p> <p>To distinguish one application settings from another it is recommended to use some unique prefix for all storage keys, for example <code>{company}.{product}.</code>. For example to store auth token in one app you could use <code>acme.one_app.auth_token</code> key and in another app use <code>acme.second_app.auth_token</code>.</p> <p>Caution</p> <p>It is responsibility of Flet app developer to encrypt sensitive data before sending it to a client storage, so it's not read/tampered by another app or an app user.</p> <p>Reading data: <pre><code># The value is automatically converted back to the original type\nvalue = page.client_storage.get(\"key\")\n\ncolors = page.client_storage.get(\"favorite_colors\")\n# colors = [\"red\", \"green\", \"blue\"]\n</code></pre></p> <p>Check if a key exists: <pre><code>page.client_storage.contains_key(\"key\") # True if the key exists\n</code></pre></p> <p>Get all keys: <pre><code>page.client_storage.get_keys(\"key-prefix.\")\n</code></pre></p> <p>Remove a value: <pre><code>page.client_storage.remove(\"key\")\n</code></pre></p> <p>Clear the storage: <pre><code>page.client_storage.clear()\n</code></pre></p> <p>Caution</p> <p><code>clear()</code> is a dangerous function that removes all preferences of all Flet apps ever run by the same user and serves as a heads-up that permanent application data shouldn't be stored in the client storage.</p>"},{"location":"cookbook/control-refs/","title":"Control Refs","text":"<p>Flet controls are objects and to access their properties we need to keep references (variables) to those objects.</p> <p>Consider the following example:</p> <pre><code>import flet as ft\n\ndef main(page):\n    first_name = ft.TextField(label=\"First name\", autofocus=True)\n    last_name = ft.TextField(label=\"Last name\")\n    greetings = ft.Column()\n\n    def btn_click(e):\n        greetings.controls.append(ft.Text(f\"Hello, {first_name.value} {last_name.value}!\"))\n        first_name.value = \"\"\n        last_name.value = \"\"\n        page.update()\n        first_name.focus()\n\n    page.add(\n        first_name,\n        last_name,\n        ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n        greetings,\n    )\n\nft.run(main)\n</code></pre> <p>In the very beginning of <code>main()</code> method we create three controls which we are going to use in button's  <code>on_click</code> handler: two <code>TextField</code> for first and last names and a <code>Column</code> - container for greeting messages.  We create controls with all their properties set and in the end of <code>main()</code> method, in <code>page.add()</code> call,  we use their references (variables).</p> <p>When more and more controls and event handlers are added it becomes challenging to keep all control  definitions in one place, so they become scattered across <code>main()</code> body. Glancing at <code>page.add()</code> parameters it's  hard to imagine (without constant jumping to variable definitions in IDE) what would the end form look like:</p> <pre><code>    page.add(\n        first_name,\n        last_name,\n        ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n        greetings,\n    )\n</code></pre> <p>Is <code>first_name</code> a TextField, does it have autofocus set? Is greetings a <code>Row</code> or a <code>Column</code>?</p>"},{"location":"cookbook/control-refs/#ref-class","title":"<code>Ref</code> class","text":"<p>Flet provides <code>Ref</code> utility class which allows to define a reference to the control, use that reference in event handlers and set the reference to a real control later, while building a tree. The idea comes from React.</p> <p>To define a new typed control reference:</p> <pre><code>first_name = ft.Ref[ft.TextField]()\n</code></pre> <p>To access referenced control (control de-reference) use <code>Ref.current</code> property:</p> <pre><code># empty first name\nfirst_name.current.value = \"\"\n</code></pre> <p>To assign control to a reference set <code>Control.ref</code> property to a reference:</p> <pre><code>page.add(\n    ft.TextField(ref=first_name, label=\"First name\", autofocus=True)\n)\n</code></pre> <p>Note</p> <p>All Flet controls have <code>ref</code> property.</p> <p>We could re-write our program to use references:</p> <pre><code>import flet as ft\n\n\ndef main(page):\n\n    first_name = ft.Ref[ft.TextField]()\n    last_name = ft.Ref[ft.TextField]()\n    greetings = ft.Ref[ft.Column]()\n\n    def btn_click(e):\n        greetings.current.controls.append(\n            ft.Text(f\"Hello, {first_name.current.value} {last_name.current.value}!\")\n        )\n        first_name.current.value = \"\"\n        last_name.current.value = \"\"\n        page.update()\n        first_name.current.focus()\n\n    page.add(\n        ft.TextField(ref=first_name, label=\"First name\", autofocus=True),\n        ft.TextField(ref=last_name, label=\"Last name\"),\n        ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n        ft.Column(ref=greetings),\n    )\n\nft.run(main)\n</code></pre> <p>Now we can clearly see in <code>page.add()</code> the structure of the page and all the controls it's built of.</p> <p>Yes, the logic becomes a little bit more verbose as you need to add <code>.current.</code> to access ref's control, but it's a matter of personal preference :)</p>"},{"location":"cookbook/drag-and-drop/","title":"Drag and drop","text":"<p>The mechanics of drag-and-drop in Flet is pretty simple - a user starts dragging <code>Draggable</code> control and \"drops\" it on <code>DragTarget</code>. If both draggable and drag target has the same <code>group</code> a drag target will call <code>on_accept</code> event handler and pass draggable control ID as event data. In this case draggable serves as a source \"data\" for drag-and-drop operation.</p> <p>Let's take a look at the following example. In the program below you can drag left control displaying \"1\" on top of the right control displaying \"0\" and when drag operation completes left control is replaced with \"0\" and the right control becomes \"1\":</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Drag and Drop example\"\n\n    def drag_accept(e):\n        # get draggable (source) control by its ID\n        src = page.get_control(e.src_id)\n        # update text inside draggable control\n        src.content.content.value = \"0\"\n        # update text inside drag target control\n        e.control.content.content.value = \"1\"\n        page.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.Draggable(\n                    group=\"number\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.CYAN_200,\n                        border_radius=5,\n                        content=ft.Text(\"1\", size=20),\n                        alignment=ft.alignment.center,\n                    ),\n                ),\n                ft.Container(width=100),\n                ft.DragTarget(\n                    group=\"number\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.PINK_200,\n                        border_radius=5,\n                        content=ft.Text(\"0\", size=20),\n                        alignment=ft.alignment.center,\n                    ),\n                    on_accept=drag_accept,\n                ),\n            ]\n        )\n    )\n\nft.run(main)\n</code></pre> <p></p> <p>So, it's developer's responsibility to determine what happens with \"source\" (draggable) and \"destination\" (drag target) controls when <code>on_accept</code> event occurs.</p> <p>Try something</p> <p>Change DragTarget's group property to <code>number1</code> and note <code>on_accept</code> is not called any more when you drop \"1\" on the target.</p> <p>There are additional properties and event handlers to make drag-and-drop operation even more interactive. For example, draggable has <code>content_when_dragging</code> property to display a different control instead of <code>content</code> when drag operation is under way. There is also <code>content_feedback</code> property to show a different control under the pointer. By default, the same <code>content</code> control, but with 50% opacity is displayed under cursor when dragging.</p> <p>Let's modify Draggable in our example to display a \"hole\" in place of dragged control and just \"1\" under cursor while dragging:</p> <pre><code>...\n                ft.Draggable(\n                    group=\"number\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.CYAN_200,\n                        border_radius=5,\n                        content=ft.Text(\"1\", size=20),\n                        alignment=ft.alignment.center,\n                    ),\n                    content_when_dragging=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.BLUE_GREY_200,\n                        border_radius=5,\n                    ),\n                    content_feedback=ft.Text(\"1\"),\n                ),\n...\n</code></pre> <p></p> <p>Drag target control additionally has <code>on_will_accept</code> and <code>on_leave</code> event handlers which help better visualize when it's a good time to \"drop\" something on the target. Let's modify DragTarget in our example to draw a border around target control when it's ready to accept incoming drag:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Drag and Drop example 2\"\n\n    def drag_accept(e):\n        # get draggable (source) control by its ID\n        src = page.get_control(e.src_id)\n        # update text inside draggable control\n        src.content.content.value = \"0\"\n        # reset source group, so it cannot be dropped to a target anymore\n        src.group = \"\"\n        # update text inside drag target control\n        e.control.content.content.value = \"1\"\n        # reset border\n        e.control.content.border = None\n        page.update()\n\n    def drag_will_accept(e):\n        # black border when it's allowed to drop and red when it's not\n        e.control.content.border = ft.border.all(\n            2, ft.Colors.BLACK45 if e.data == \"true\" else ft.Colors.RED\n        )\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.Draggable(\n                    group=\"number\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.CYAN_200,\n                        border_radius=5,\n                        content=ft.Text(\"1\", size=20),\n                        alignment=ft.alignment.center,\n                    ),\n                    content_when_dragging=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.BLUE_GREY_200,\n                        border_radius=5,\n                    ),\n                    content_feedback=ft.Text(\"1\"),\n                ),\n                ft.Container(width=100),\n                ft.DragTarget(\n                    group=\"number\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.Colors.PINK_200,\n                        border_radius=5,\n                        content=ft.Text(\"0\", size=20),\n                        alignment=ft.alignment.center,\n                    ),\n                    on_accept=drag_accept,\n                    on_will_accept=drag_will_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"cookbook/encrypting-sensitive-data/","title":"Encrypting sensitive data","text":"<p>Sensitive data such as tokens, keys, credit card numbers and other \"secrets\" must be stored at rest (database, files, client storage) in encrypted form to avoid data breaches.</p> <p>Flet includes utility methods to encrypt and decrypt sensitive text data using symmetric algorithm (where the same key is used for encryption and decryption). They use Fernet implementation from cryptography package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase.</p>"},{"location":"cookbook/encrypting-sensitive-data/#secret-key","title":"Secret key","text":"<p>Encryption secret key (aka password, or passphrase) is an arbitrary password-like string configured by a user and used for encrypting and decrypting data. Crypto algorithm uses secret key to \"derive\" encryption key (32 bytes).</p> <p>Danger</p> <p>Do not embed any secrets into the source code to avoid accidental exposure to the public!</p> <p>You can provide a secret to your app via environment variable:</p> <pre><code>import os\nsecret_key = os.getenv(\"MY_APP_SECRET_KEY\")\n</code></pre> <p>Before running the app set the secret in a command line:</p> <pre><code>$ export MY_APP_SECRET_KEY=\"&lt;secret&gt;\"\n</code></pre> <p>Note</p> <p>While passing secrets via environment variables is a common practice amongst developers and service providers it does not fully prevent secrets leaking in some environments. Other mechanisms can be used to inject secrets to your application such as mounting secret files or vault services.</p>"},{"location":"cookbook/encrypting-sensitive-data/#encrypting-data","title":"Encrypting data","text":"<p>Use <code>encrypt()</code> method to encrypt a string:</p> <pre><code>import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv(\"MY_APP_SECRET_KEY\")\nplain_text = \"This is a secret message!\"\nencrypted_data = encrypt(plain_text, secret_key)\n</code></pre> <p><code>encrypted_data</code> is a URL-safe base64-encoded string.</p> <p><code>encrypt</code> accepts strings only, so any objects must be serialized to JSON, XML or other text-based format before encryption.</p>"},{"location":"cookbook/encrypting-sensitive-data/#decrypting-data","title":"Decrypting data","text":"<p>Use <code>decrypt()</code> method to decrypt the data:</p> <pre><code>import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv(\"MY_APP_SECRET_KEY\")\nencrypted_data = \"601llp2zpPp4QjBWe2cOwGdBQUFBQUJqTTFJbmgyWU5jblVp...\"\nplain_text = decrypt(encrypted_data, secret_key)\nprint(plain_text)\n</code></pre>"},{"location":"cookbook/file-picker-and-uploads/","title":"File picker and uploads","text":"<p>File picker control opens a native OS dialog for selecting files and directories.</p> <p>It works on all platforms: Web, macOS, Window, Linux, iOS and Android.</p> <p></p> <p>Check out source code of the demo above.</p> <p>File picker allows opening three dialogs:</p> <ul> <li>Pick files - one or multiple, any files or only specific types.</li> <li>Save file - choose directory and file name.</li> <li>Get directory - select directory.</li> </ul> <p>When running Flet app in a browser only \"Pick files\" option is available and it's used for uploads only as it, obviously, doesn't return a full path to a selected file.</p> <p>Where file picker really shines is a desktop! All three dialogs return full paths to selected files and directories - great assistance to your users!</p> <p>Info</p> <p>In Linux, the FilePicker control depends on Zenity  when running Flet as an app. This is not a requirement when running Flet in a browser.</p> <p>To install Zenity on Ubuntu/Debian run the following commands: <pre><code>sudo apt-get install zenity\n</code></pre></p>"},{"location":"cookbook/file-picker-and-uploads/#using-file-picker-in-your-app","title":"Using file picker in your app","text":"<p>It is recommended to add file picker to <code>page.overlay.controls</code> collection, so it doesn't affect the layout of your app. Despite file picker has 0x0 size it is still considered as a control when put into <code>Row</code> or <code>Column</code>.</p> <pre><code>import flet as ft\n\nfile_picker = ft.FilePicker()\npage.overlay.append(file_picker)\npage.update()\n</code></pre> <p>To open file picker dialog call one of the three methods:</p> <ul> <li><code>pick_files()</code></li> <li><code>save_file()</code></li> <li><code>get_directory_path()</code></li> </ul> <p>Lambda works pretty nice for that:</p> <pre><code>ft.ElevatedButton(\"Choose files...\",\n    on_click=lambda _: file_picker.pick_files(allow_multiple=True))\n</code></pre> <p>When dialog is closed <code>FilePicker.on_result</code> event handler is called which event object has one of the following properties set:</p> <ul> <li><code>files</code> - \"Pick files\" dialog only, a list of selected files or <code>None</code> if dialog was cancelled.</li> <li><code>path</code> - \"Save file\" and \"Get directory\" dialogs, a full path to a file or directory or <code>None</code> if dialog was cancelled.</li> </ul> <pre><code>import flet as ft\n\ndef on_dialog_result(e: ft.FilePickerResultEvent):\n    print(\"Selected files:\", e.files)\n    print(\"Selected file or directory:\", e.path)\n\nfile_picker = ft.FilePicker(on_result=on_dialog_result)\n</code></pre> <p>The last result is always available in <code>FilePicker.result</code> property.</p> <p>Check File picker control docs for all available dialog methods and their parameters.</p>"},{"location":"cookbook/file-picker-and-uploads/#uploading-files","title":"Uploading files","text":"<p>File picker has built-in upload capabilities that work on all platforms and the web.</p> <p>To upload one or more files you should call <code>FilePicker.pick_files()</code> first. When the files are selected by the user they are not automatically uploaded anywhere, but instead their references are kept in the file picker state.</p> <p>To perform an actual upload you should call <code>FilePicker.upload()</code> method and pass the list of files that need to be uploaded along with their upload URLs and upload method (<code>PUT</code> or <code>POST</code>):</p> <pre><code>import flet as ft\n\ndef upload_files(e):\n    upload_list = []\n    if file_picker.result != None and file_picker.result.files != None:\n        for f in file_picker.result.files:\n            upload_list.append(\n                FilePickerUploadFile(\n                    f.name,\n                    upload_url=page.get_upload_url(f.name, 600),\n                )\n            )\n        file_picker.upload(upload_list)\n\nft.ElevatedButton(\"Upload\", on_click=upload_files)\n</code></pre> <p>Note</p> <p>If you need to separate uploads for each user you can specify a filename prepended with any number of directories in <code>page.get_upload_url()</code> call, for example:</p> <pre><code>upload_url = page.get_upload_url(f\"/{username}/pictures/{f.name}\", 600)\n</code></pre> <p><code>/{username}/pictures</code> directories will be automatically created inside <code>upload_dir</code> if not exist.</p>"},{"location":"cookbook/file-picker-and-uploads/#upload-storage","title":"Upload storage","text":"<p>Notice the usage of <code>page.get_upload_url()</code> method - it generates a presigned upload URL for Flet's internal upload storage.</p> <p>Use any storage for file uploads</p> <p>You can generate presigned upload URL for AWS S3 storage using boto3 library.</p> <p>The same technique should work for Wasabi, Backblaze, MinIO and any other  storage providers with S3-compatible API.</p> <p>To enable Flet saving uploaded files to a directory provide full or relative path to that directory in <code>flet.app()</code> call:</p> <pre><code>ft.run(main, upload_dir=\"uploads\")\n</code></pre> <p>You can even put uploads inside \"assets\" directory, so uploaded files, e.g. pictures, docs or other media, can be accessed from a Flet client right away:</p> <pre><code>ft.run(main, assets_dir=\"assets\", upload_dir=\"assets/uploads\")\n</code></pre> <p>and somewhere in your app you can display uploaded picture with:</p> <pre><code>page.add(ft.Image(src=\"/uploads/&lt;some-uploaded-picture.png&gt;\"))\n</code></pre>"},{"location":"cookbook/file-picker-and-uploads/#upload-progress","title":"Upload progress","text":"<p>Once <code>FilePicker.upload()</code> method is called Flet client asynchronously starts uploading selected files one-by-one and reports the progress via <code>FilePicker.on_upload</code> callback.</p> <p>Event object of <code>on_upload</code> event is an instance of <code>FilePickerUploadEvent</code> class with the following fields:</p> <ul> <li><code>file_name</code></li> <li><code>progress</code> - a value from <code>0.0</code> to <code>1.0</code>.</li> <li><code>error</code></li> </ul> <p>The callback is called at least twice for every uploaded file: with <code>0</code> progress before upload begins and with <code>1.0</code> progress when upload is finished. For files larger than 1 MB a progress is additionally reported for every 10% uploaded.</p> <p>Check that example demonstrating multiple file uploads:</p> <p></p> <p>See File picker control docs for all its properties and examples.</p>"},{"location":"cookbook/fonts/","title":"Fonts","text":""},{"location":"cookbook/fonts/#system-fonts","title":"System fonts","text":"<p>You can use the (system) fonts installed on your computer, e.g. \"Consolas\", \"Arial\", \"Verdana\", \"Tahoma\", etc.</p> <p>Limitation</p> <p>System fonts cannot be used in Flet web apps rendered with \"canvas kit\".</p>"},{"location":"cookbook/fonts/#usage-example","title":"Usage Example","text":"<p>The following example demonstrates how to use the \"Consolas\" font in a Flet application.</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Text(\n            value=\"This text is rendered with Consolas font\",\n            font_family=\"Consolas\"\n        )\n    )\n\nft.run(main)\n</code></pre>"},{"location":"cookbook/fonts/#importing-fonts","title":"Importing Fonts","text":"<p>Font can be imported from external resource by providing an absolute URL or  from application assets directory (see Assets Guide).</p> <p>This is done by setting the page's <code>fonts</code> property.</p> <p>To apply one of the imported fonts, you can: - Use <code>Theme.font_family</code> to set a default/fallback app-wide font family. - Specify a font for individual controls. For example, <code>Text.font_family</code>.</p>"},{"location":"cookbook/fonts/#usage-example_1","title":"Usage Example","text":"<p>The example below loads the \"Kanit\" font from GitHub and \"Open Sans\" from local assets. \"Kanit\" is set as the default app font, while \"Open Sans\" is applied to a specific <code>Text</code> control.</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.fonts = {\n        \"Kanit\": \"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\",\n        \"Open Sans\": \"/fonts/OpenSans-Regular.ttf\"\n    }\n\n    page.theme = Theme(font_family=\"Kanit\")  # Default app font\n\n    page.add(\n        ft.Text(\"This text uses the Kanit font\"),\n        ft.Text(\"This text uses the Open Sans font\", font_family=\"Open Sans\")\n    )\n\nft.run(main, assets_dir=\"assets\")\n</code></pre>"},{"location":"cookbook/fonts/#static-and-variable-fonts","title":"Static and Variable Fonts","text":"<p>Currently, only static fonts are supported. These fonts have a specific width, weight, or style combination (e.g., \"Open Sans Regular\").</p> <p>Support for variable fonts is in progress. </p> <p>However, to use variable fonts, you can create static instances at specific weights using fonttools, e.g.:</p> <pre><code>```bash\nfonttools varLib.mutator ./YourVariableFont-VF.ttf wght=140 wdth=85\n```\n</code></pre> <p>To explore available font features (e.g. possible options for <code>wght</code>) use Wakamai Fondue online tool.</p>"},{"location":"cookbook/keyboard-shortcuts/","title":"Keyboard shortcuts","text":"<p>A solid keyboard support is a key for user productivity while using your web and, especially, desktop app. Indeed, it could be really annoying to constantly switch between mouse and keyboard.</p> <p>In addition to form controls' <code>.autofocus</code> property and <code>TextField.focus()</code> method Flet allows handling \"global\" keyboard events.</p> <p>To capture all keystrokes implement <code>page.on_keyboard_event</code> handler. Event handler parameter <code>e</code> is an instance of <code>KeyboardEvent</code> class with the following properties:</p> <ul> <li><code>key</code> - a textual representation of a pressed key, e.g. <code>A</code>, <code>Enter</code> or <code>F5</code>.</li> <li><code>shift</code> - <code>True</code> if \"Shift\" key is pressed.</li> <li><code>ctrl</code> - <code>True</code> if \"Control\" key is pressed.</li> <li><code>alt</code> - <code>True</code> if \"Alt\" (\"Option\") key is pressed.</li> <li><code>meta</code> - <code>True</code> if \"Command\" key is pressed.</li> </ul> <p>This is a simple usage example:</p> <p><pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def on_keyboard(e: ft.KeyboardEvent):\n        page.add(\n            ft.Text(\n                f\"Key: {e.key}, Shift: {e.shift}, Control: {e.ctrl}, Alt: {e.alt}, Meta: {e.meta}\"\n            )\n        )\n\n    page.on_keyboard_event = on_keyboard\n    page.add(\n        ft.Text(\"Press any key with a combination of CTRL, ALT, SHIFT and META keys...\")\n    )\n\nft.run(main)\n</code></pre> </p> <p>Here is more advanced example.</p>"},{"location":"cookbook/large-lists/","title":"Large lists","text":"<p>You can use <code>Column</code> and <code>Row</code> controls to display lists in the most cases, but if the list contains hundreds or thousands of items <code>Column</code> and <code>Row</code> will be ineffective with lagging UI as they render all items at once even they are not visible at the current scrolling position.</p> <p>In the following example we are adding 5,000 text controls to a page. Page uses <code>Column</code> as a default layout container:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    for i in range(5000):\n        page.controls.append(ft.Text(f\"Line {i}\"))\n    page.scroll = \"always\"\n    page.update()\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Run the program and notice that it's not just it takes a couple of seconds to initially load and render all text lines on a page, but scrolling is slow and laggy too:</p> <p></p> <p>For displaying lists with a lot of items use <code>ListView</code> and <code>GridView</code> controls which render items on demand, visible at the current scrolling position only.</p>"},{"location":"cookbook/large-lists/#listview","title":"ListView","text":"<p><code>ListView</code> could be either vertical (default) or horizontal. ListView items are displayed one after another in the scroll direction.</p> <p>ListView already implements effective on demand rendering of its children, but scrolling performance could be further improved if you can set the same fixed height or width (for <code>horizontal</code> ListView) for all items (\"extent\"). This could be done by either setting absolute extent with <code>item_extent</code> property or making the extent of all children equal to the extent of the first child by setting <code>first_item_prototype</code> to <code>True</code>.</p> <p>Let's output a list of 5,000 items using ListView control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    lv = ft.ListView(expand=True, spacing=10)\n    for i in range(5000):\n        lv.controls.append(ft.Text(f\"Line {i}\"))\n    page.add(lv)\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Now the scrolling is smooth and fast enough to follow mouse movements:</p> <p></p> <p>Note</p> <p>We used <code>expand=True</code> in ListView constructor. In order to function properly, ListView must have a height (or width if <code>horizontal</code>) specified. You could set an absolute size, e.g. <code>ListView(height=300, spacing=10)</code>, but in the example above we make ListView to take all available space on the page, i.e. expand. Read more about <code>Control.expand</code> property.</p>"},{"location":"cookbook/large-lists/#gridview","title":"GridView","text":"<p><code>GridView</code> allows arranging controls into a scrollable grid.</p> <p>You can make a \"grid\" with <code>ft.Column(wrap=True)</code> or <code>ft.Row(wrap=True)</code>, for example:</p> <pre><code>import os\nimport flet as ft\n\nos.environ[\"FLET_WS_MAX_MESSAGE_SIZE\"] = \"8000000\"\n\ndef main(page: ft.Page):\n    r = ft.Row(wrap=True, scroll=\"always\", expand=True)\n    page.add(r)\n\n    for i in range(5000):\n        r.controls.append(\n            ft.Container(\n                ft.Text(f\"Item {i}\"),\n                width=100,\n                height=100,\n                alignment=ft.alignment.center,\n                bgcolor=ft.Colors.AMBER_100,\n                border=ft.border.all(1, ft.Colors.AMBER_400),\n                border_radius=ft.border_radius.all(5),\n            )\n        )\n    page.update()\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p></p> <p>Try scrolling and resizing the browser window - everything works, but very laggy.</p> <p>Note</p> <p>At the start of the program we are setting the value of <code>FLET_WS_MAX_MESSAGE_SIZE</code> environment variable to <code>8000000</code> - this is the maximum size of WebSocket message in bytes that can be received by Flet Server rendering the page. Default size is 1 MB, but the size of JSON message describing 5,000 container controls would exceed 1 MB, so we are increasing allowed size to 8 MB.</p> <p>Squeezing large messages through WebSocket channel is, generally, not a good idea, so use batched updates approach to control channel load.</p> <p>GridView, similar to ListView, is very effective to render a lot of children. Let's implement the example above using GridView:</p> <pre><code>import os\nimport flet as ft\n\nos.environ[\"FLET_WS_MAX_MESSAGE_SIZE\"] = \"8000000\"\n\ndef main(page: ft.Page):\n    gv = ft.GridView(expand=True, max_extent=150, child_aspect_ratio=1)\n    page.add(gv)\n\n    for i in range(5000):\n        gv.controls.append(\n            ft.Container(\n                ft.Text(f\"Item {i}\"),\n                alignment=ft.alignment.center,\n                bgcolor=ft.Colors.AMBER_100,\n                border=ft.border.all(1, ft.Colors.AMBER_400),\n                border_radius=ft.border_radius.all(5),\n            )\n        )\n    page.update()\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p></p> <p>With GridView scrolling and window resizing are smooth and responsive!</p> <p>You can specify either fixed number of rows or columns (runs) with <code>runs_count</code> property or the maximum size of a \"tile\" with <code>max_extent</code> property, so the number of runs can vary automatically. In our example we set the maximum tile size to 150 pixels and set its shape to \"square\" with <code>child_aspect_ratio=1</code>. <code>child_aspect_ratio</code> is the ratio of the cross-axis to the main-axis extent of each child. Try changing it to <code>0.5</code> or <code>2</code>.</p>"},{"location":"cookbook/large-lists/#batch-updates","title":"Batch updates","text":"<p>When <code>page.update()</code> is called a message is being sent to Flet server over WebSockets containing page updates since the last <code>page.update()</code>. Sending a large message with thousands of added controls could make a user waiting for a few seconds until the messages is fully received and controls rendered.</p> <p>To increase usability of your program and present the results to a user as soon as possible you can send page updates in batches. For example, the following program adds 5,100 child controls to a ListView in batches of 500 items:</p> <p><pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    # add ListView to a page first\n    lv = ft.ListView(expand=1, spacing=10, item_extent=50)\n    page.add(lv)\n\n    for i in range(5100):\n        lv.controls.append(ft.Text(f\"Line {i}\"))\n        # send page to a page\n        if i % 500 == 0:\n            page.update()\n    # send the rest to a page\n    page.update()\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> </p>"},{"location":"cookbook/logging/","title":"Logging","text":"<p>This article explains how to control level of the logs messages generated by Flet library and its underlying components. You may need to enable detailed logging to troubleshoot Flet library or when submitting a new Flet issue.</p>"},{"location":"cookbook/logging/#python","title":"Python","text":"<p>Flet Python modules expose named loggers: <code>flet_core</code> and <code>flet</code>.</p> <p>To enable detailed/verbose Flet logging in your program add this code before calling <code>ft.run()</code>:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre> <p>This will enable loggers across all Flet modules (<code>flet_core</code> and <code>flet</code>).</p> <p>To reduce verbosity you may suppress logging messages from <code>flet_core</code> module, but adding:</p> <pre><code>logging.getLogger(\"flet_core\").setLevel(logging.INFO)\n</code></pre> <p>Debug logging is usually needed for troubleshooting purposes, when submitting a new Flet issue.</p> <p>In the most cases you should be fine with <code>INFO</code> logging level.</p>"},{"location":"cookbook/logging/#fletd-server","title":"Fletd server","text":"<p>You can control the logging of Fletd - built-in Flet web server.</p> <p>When <code>flet</code> Python logger level is configured its value is implicitly passed to Fletd server and you can see its log messages in the output.</p> <p>However, you can use <code>FLET_LOG_LEVEL</code> environment variable to override Fletd log level: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>debug</code>, <code>panic</code>, <code>fatal</code>.</p> <p>Additionally, to redirect Flet logs output to a file you can set <code>FLET_LOG_TO_FILE</code> environment variable to <code>true</code>. Flet logs will be saved to <code>/tmp/flet-server.log</code> on macOS and Linux and to <code>%TEMP%\\flet-server.log</code> on Windows.</p>"},{"location":"cookbook/mobile-support/","title":"Mobile support","text":"<p>This article covers Flet's vision for going mobile and provides a roadmap.</p>"},{"location":"cookbook/mobile-support/#server-driven-ui","title":"Server-Driven UI","text":"<p>Flet is a Server-driven UI (SDUI) framework. SDUI is an emerging technology which is the best described in Technology Radar post:</p> <p>Server-driven UI separates the rendering into a generic container in the mobile app while the structure and data for each view is provided by the server. This means that changes that once required a round trip to an app store can now be accomplished via simple changes to the responses the server sends.</p> <p>Companies like DoorDash, Airbnb, Lyft and others have been successfully implementing Server-driven UI in their mobile apps to reduce time-to-market.</p>"},{"location":"cookbook/mobile-support/#flet-approach","title":"Flet approach","text":"<p>Flet is going to implement Server-Driven UI approach where program written in Python or other language is running on the server and only a thin client - either standalone Flutter app (<code>.apk</code> or <code>.ipa</code> package) in app store or a Flutter widget as a part of another app - is delivered to a mobile:</p> <p></p> <p>Once SDUI experience is ready we'll start working on a standalone mobile package.</p>"},{"location":"cookbook/mobile-support/#roadmap","title":"Roadmap","text":"<p>To provide the best experience for Flet apps on mobile platforms, we plan to release the following items by the end of this year:</p>"},{"location":"cookbook/mobile-support/#flet-widget-for-flutter","title":"Flet widget for Flutter","text":"<p>The first step we are going to do is to separate Flet client into a Flutter widget and publish the package at https://pub.dev. Flet widget could be then integrated by mobile developers into existing or new Flutter apps for adding dynamic server-driven UI experiences to the core app functionality. A new Flutter app could be also created with a single Flet widget just for the purpose of hosting a complete Flet app.</p> <p>Developers will follow Flutter guide for packaging, signing and distributing their apps to Android, iOS, Linux, macOS or Windows platforms.</p> <p>Flet team will provide sample CI pipelines to automate packaging, signing and publishing of Flutter apps.</p>"},{"location":"cookbook/mobile-support/#flet-studio-for-ios-and-android","title":"Flet Studio for iOS and Android","text":"<p>The next step is a standalone \"Flet Studio\" app (the name is not final) in App Store and Google Play for \"testing mobile experiences developed with Flet framework\". Developers or beta testers will be able to \"register\" URL of their hosted Flet app within Flet Studio and instantly see how it performs on a mobile device.</p>"},{"location":"cookbook/mobile-support/#white-labeled-flet-mobile-app","title":"White-labeled Flet mobile app","text":"<p>We are going to provide a guide and CI pipeline for automatic publishing of white-labeled Flet app to a user App Store or Google Play account. This app will be \"pinned\" to a specific app URL and could additionally bundle app assets (media, fonts) to minimize network usage.</p>"},{"location":"cookbook/mobile-support/#standalone-mobile-package-for-flet-app","title":"Standalone mobile package for Flet app","text":"<p>We are going to investigate the way and develop a prototype for bundling together Flet framework, user program, language runtime and all dependencies into a standalone mobile package (<code>.apk</code> or <code>.ipa</code> package), so Flet program does not require a web server.</p>"},{"location":"cookbook/mobile-support/#embedding-flet-into-native-apps","title":"Embedding Flet into native apps","text":"<p>We are going to provide a guide, sample apps and CI pipeline to integrate Flet widget into existing native Android and iOS apps (not developed with Flutter) using Flutter Add-to-App feature. Put Flutter to work article gives a real-world example on how to integrate Flutter into existing mobile app.</p>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/","title":"Packaging desktop app","text":"<p>A better way to package is here</p> <p>You can now use <code>flet build</code> command to package your Flet app into executable or install bundle for macOS, Windows and Linux.</p> <p><code>flet build</code> does not longer rely on PyInstaller like <code>flet pack</code> does, but uses Flutter SDK to produce a fast, offline, fully customizable (your own icons, about dialog and metadata) executable for Windows, Linux and macOS with Python runtime embedded into executable and running in-process.</p> <p>Follow this guide for desktop packaging</p> <p>Flet Python app and all its dependencies can be packaged into an executable and user can run it on their computer without installing a Python interpreter or any modules.</p> <p>Flet wraps PyInstaller API to package Flet Python app and all its dependencies into a single package for Windows, macOS and Linux. To create Windows package, PyInstaller must be run on Windows; to build Linux app, it must be run on Linux; and to build macOS app - on macOS.</p> <p>Start from installing PyInstaller:</p> <pre><code>pip install pyinstaller\n</code></pre> <p>Navigate to the directory where your <code>.py</code> file is located and build your app with the following command:</p> <pre><code>flet pack your_program.py\n</code></pre> <p>Your bundled Flet app should now be available in <code>dist</code> folder. Try running the program to see if it works.</p> <p>On macOS:</p> <pre><code>open dist/your_program.app\n</code></pre> <p>on Windows:</p> <pre><code>dist\\your_program.exe\n</code></pre> <p>on Linux:</p> <pre><code>dist/your_program\n</code></pre> <p>Now you can just zip the contents of <code>dist</code> folder and distribute to your users! They don't need Python or Flet installed to run your packaged program - what a great alternative to Electron!</p> <p>By default, an executable/bundle has the same name as a Python script. You can change it with <code>--name</code> argument:</p> <pre><code>flet pack your_program.py --name bundle_name\n</code></pre>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/#customizing-package-icon","title":"Customizing package icon","text":"<p>Default bundle app icon is diskette which might be confusing for younger developers missed those ancient times when floppy disks were used to store computer data.</p> <p>You can replace the icon with your own by adding <code>--icon</code> argument:</p> <pre><code>flet pack your_program.py --icon &lt;your-image.png&gt;\n</code></pre> <p>PyInstaller will convert provided PNG to a platform specific format (<code>.ico</code> for Windows and <code>.icns</code> for macOS), but you need to install Pillow module for that:</p> <pre><code>pip install pillow\n</code></pre>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/#packaging-assets","title":"Packaging assets","text":"<p>Your Flet app can include assets. Provided app assets are in <code>assets</code> folder next to <code>your_program.py</code> they can be added to an application package with <code>--add-data</code> argument, on macOS/Linux:</p> <pre><code>flet pack your_program.py --add-data \"assets:assets\"\n</code></pre> <p>On Windows <code>assets;assets</code> must be delimited with <code>;</code>:</p> <pre><code>flet pack your_program.py --add-data \"assets;assets\"\n</code></pre>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/#customizing-macos-bundle","title":"Customizing macOS bundle","text":"<p>macOS bundle details can be customized with the following <code>flet pack</code> macOS-specific arguments:</p> <ul> <li><code>--product-name</code> - display name of macOS bundle, shown in Dock, Activity Monitor, About dialog.</li> <li><code>--product-version</code> - bundle version shown in \"About\" dialog.</li> <li><code>--copyright</code> - copyright notice shown in \"About\" dialog.</li> <li><code>--bundle-id</code> unique bundle ID.</li> </ul> <p></p>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/#customizing-windows-executable-metadata","title":"Customizing Windows executable metadata","text":"<p>Windows executable \"Details\" properties dialog can be customized with the following <code>flet pack</code> arguments:</p> <ul> <li><code>--product-name</code> - \"Product name\" field.</li> <li><code>--product-version</code> - \"Product version\" field.</li> <li><code>--file-version</code> - \"File version\" field.</li> <li><code>--file-description</code> - \"File description\" field, also program display name in Task Manager.</li> <li><code>--copyright</code> - \"Copyright\" field.</li> </ul>"},{"location":"cookbook/packaging-desktop-app-with-pyinstaller/#using-ci-for-multi-platform-packaging","title":"Using CI for multi-platform packaging","text":"<p>To create an app package with PyInstaller for specific OS it must be run on that OS.</p> <p>If you don't have an access to Mac or PC you can bundle your app for all three platforms with AppVeyor - Continuous Integration service for Windows, Linux and macOS. In short, Continuous Integration (CI) is an automated process of building, testing and deploying (Continuous Delivery - CD) application on every push to a repository.</p> <p>AppVeyor is free for open source projects hosted on GitHub, GitLab and Bitbucket. To use AppVeyor, push your app to a repository within one of those source-control providers.</p> <p>Note</p> <p>AppVeyor is the company behind Flet.</p> <p>To get started with AppVeyor sign up for a free account.</p> <p>Click \"New project\" button, authorize AppVeyor to access your GitHub, GitLab or Bitbucket account, choose a repository with your program and create a new project.</p> <p>Now, to configure packaging of your app for Windows, Linux and macOS, add file with the following contents into the root of your repository <code>appveyor.yml</code>. <code>appveyor.yml</code> is a build configuration file, or CI workflow, describing build, test, packaging and deploy commands that must be run on every commit.</p> <p>Note</p> <p>You can just fork flet-dev/python-ci-example repository and customize it to your needs.</p> <p>When you push any changes to GitHub repository, AppVeyor will automatically start a new build:</p> <p></p> <p>What that CI workflow does on every push to the repository:</p> <ul> <li>Clones the repository to a clean virtual machine.</li> <li>Installs app dependencies using <code>pip</code>.</li> <li>Runs <code>flet pack</code> to package Python app into a bundle for Windows, macOS and Ubuntu.</li> <li>Zip/Tar app bundles and uploads them to \"Artifacts\".</li> <li>Uploads app bundles to GitHub releases when a new tag is pushed. Just push a new tag to make a release!</li> </ul> <p>GITHUB_TOKEN</p> <p><code>GITHUB_TOKEN</code> in <code>appveyor.yml</code> is a GitHub Personal Access Token (PAT) used by AppVeyor to publish created packages to repository \"Releases\". You need to generate your own token and replace it in <code>appveyor.yml</code>. Login to your GitHub account and navigate to Personal access token page. Click \"Generate new token\" and select \"public_repo\" or \"repo\" scope for public or private repository respectively. Copy generated token to a clipboard and return to AppVeyor Portal. Navigate to Encrypt configuration data page and paste token to \"Value to encrypt\" field, click \"Encrypt\" button. Put encrypted value under <code>GITHUB_TOKEN</code> in your <code>appveyor.yml</code>.</p> <p>Configure AppVeyor for your Python project, push a new tag to a repository and \"automagically\" get desktop bundle for all three platforms in GitHub releases! \ud83c\udf89</p> <p></p> <p>In addition to GitHub Releases, you can also configure releasing of artifacts to Amazon S3 bucket or Azure Blob storage.</p>"},{"location":"cookbook/pub-sub/","title":"PubSub","text":"<p>If you build a chat app using Flet you need somehow to pass user messages between sessions. When a user sends a message it should be broadcasted to all other app sessions and displayed on their pages.</p> <p>Flet provides a simple built-in PubSub mechanism for asynchronous communication between page sessions.</p> <p>Flet PubSub allows broadcasting messages to all app sessions or sending only to specific \"topic\" (or \"channel\") subscribers.</p> <p>A typical PubSub usage would be:</p> <ul> <li>subscribe to broadcast messages or subscribe to a topic on app session start.</li> <li>send broadcast message or send to a topic on some event, like \"Send\" button click.</li> <li>unsubscribe from broadcast messages or unsubscribe from a topic on some event, like \"Leave\" button click.</li> <li>unsubscribe from everything on <code>page.on_close</code>.</li> </ul> <p>This is an example of a simple chat application:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Flet Chat\"\n\n    # subscribe to broadcast messages\n    def on_message(msg):\n        messages.controls.append(ft.Text(msg))\n        page.update()\n\n    page.pubsub.subscribe(on_message)\n\n    def send_click(e):\n        page.pubsub.send_all(f\"{user.value}: {message.value}\")\n        # clean up the form\n        message.value = \"\"\n        page.update()\n\n    messages = ft.Column()\n    user = ft.TextField(hint_text=\"Your name\", width=150)\n    message = ft.TextField(hint_text=\"Your message...\", expand=True)  # fill all the space\n    send = ft.ElevatedButton(\"Send\", on_click=send_click)\n    page.add(messages, ft.Row(controls=[user, message, send]))\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p></p>"},{"location":"cookbook/read-and-write-files/","title":"Read and write files","text":"<p>In some cases, you need to read and write files to disk.  For example, you might need to persist data across app launches, or download data from the internet and save it for later offline use.</p> <p>Flet makes it easy to work with files and directories on the mobile/desktop device, as seen in the following example.</p>"},{"location":"cookbook/read-and-write-files/#storage-paths","title":"Storage Paths","text":"<p>Flet provides two directory paths for data storage, available as environment variables: <code>FLET_APP_STORAGE_DATA</code> and <code>FLET_APP_STORAGE_TEMP</code>.</p> <p>Their values can be gotten as follows:</p> <pre><code>import os\n\napp_data_path = os.getenv(\"FLET_APP_STORAGE_DATA\")\napp_temp_path = os.getenv(\"FLET_APP_STORAGE_TEMP\")\n</code></pre>"},{"location":"cookbook/read-and-write-files/#writing-to-a-file","title":"Writing to a File","text":"<p>To write data to a new/existing file, you can use the built-in <code>open</code> function. </p> <p>For example: </p> <pre><code>import os\n\napp_data_path = os.getenv(\"FLET_APP_STORAGE_DATA\")\nmy_file_path = os.path.join(app_data_path, \"test_file.txt\")\n\nwith open(my_file_path, \"w\") as f:\n    f.write(\"Some file content...\")\n</code></pre>"},{"location":"cookbook/read-and-write-files/#reading-from-a-file","title":"Reading from a File","text":"<p>To read data from an existing file, you can equally use the built-in <code>open</code> function.</p> <p>For example:</p> <pre><code>import os\n\napp_data_path = os.getenv(\"FLET_APP_STORAGE_DATA\")\nmy_file_path = os.path.join(app_data_path, \"test_file.txt\")\n\nwith open(my_file_path, \"r\") as f:\n    file_content = f.read()\n    print(file_content)\n</code></pre> <p>Also, you can use the <code>os</code> module (or any other out there) to perform various file operations like renaming, deleting, listing files present in the directory, etc.</p>"},{"location":"cookbook/read-and-write-files/#example-counter-app","title":"Example: Counter App","text":"<p>Below is an example that showcases a basic Counter application, whose value persists across app launches.  This is made possible by writing the counter value to a file in the app's data storage directory and reading it when the app launches.</p> <pre><code>import os\nfrom datetime import datetime\nimport flet as ft\n\n# constants\nFLET_APP_STORAGE_DATA = os.getenv(\"FLET_APP_STORAGE_DATA\")\nCOUNTER_FILE_PATH = os.path.join(FLET_APP_STORAGE_DATA, \"counter.txt\")\nFLET_APP_CONSOLE = os.getenv(\"FLET_APP_CONSOLE\")\n\n\nclass Counter(ft.Text):\n    def __init__(self, storage_path=COUNTER_FILE_PATH):\n        super().__init__(theme_style=ft.TextThemeStyle.HEADLINE_LARGE)\n        self.storage_path = storage_path\n        self.count = self.__read_from_storage()\n\n    def increment(self):\n        \"\"\"Increment the counter, store the new value, and return it.\"\"\"\n        self.count += 1\n        self.update()\n        self.__write_to_storage()\n\n    def before_update(self):\n        super().before_update()\n        self.value = f\"Button tapped {self.count} time{'' if self.count == 1 else 's'}\"\n\n    def __log(self, action: str, value: int = None):\n        \"\"\"Log executed action.\"\"\"\n        if value is None:\n            value = self.count\n        print(f\"{datetime.now().strftime('%Y/%m/%d %H:%M:%S')} - {action} = {value}\")\n\n    def __read_from_storage(self):\n        \"\"\"Read counter value. If an error occurs, use 0.\"\"\"\n        try:\n            with open(self.storage_path, \"r\") as f:\n                value = int(f.read().strip())\n        except (FileNotFoundError, ValueError): \n            # file does not exist or int parsing failed\n            value = 0\n\n        self.__log(\"READ\", value)\n        return value\n\n    def __write_to_storage(self):\n        \"\"\"Write current counter value to storage.\"\"\"\n        with open(self.storage_path, \"w\") as f:\n            f.write(str(self.count))\n        self.__log(\"WRITE\")\n\n\ndef main(page: ft.Page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def show_logs(e: ft.ControlEvent):\n        if FLET_APP_CONSOLE is not None:\n            with open(FLET_APP_CONSOLE, \"r\") as f:\n                dlg = ft.AlertDialog(\n                    title=ft.Text(\"App Logs\"),\n                    content=ft.Text(f.read()),\n                    scrollable=True,\n                )\n                page.open(dlg)\n\n    counter = Counter()\n    page.appbar = ft.AppBar(\n        title=ft.Text(\"Storage Playground\", weight=ft.FontWeight.BOLD),\n        center_title=True,\n        bgcolor=ft.Colors.BLUE,\n        color=ft.Colors.WHITE,\n        adaptive=True,\n        actions=[\n            ft.IconButton(\n                icon=ft.Icons.REMOVE_RED_EYE,\n                tooltip=\"Show logs\",\n                visible=FLET_APP_CONSOLE is not None,\n                on_click=show_logs,\n            ),\n        ],\n    )\n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.Icons.ADD,\n        text=\"Increment Counter\",\n        foreground_color=ft.Colors.WHITE,\n        bgcolor=ft.Colors.BLUE,\n        on_click=lambda e: counter.increment(),\n    )\n    page.floating_action_button_location = ft.FloatingActionButtonLocation.CENTER_FLOAT\n\n    page.add(ft.SafeArea(counter))\n\n\nft.run(main)\n</code></pre> <ul> <li><code>Counter</code> class is a custom control, which is a subclass/extension of the <code>Text</code> control. More information here.</li> <li><code>FLET_APP_CONSOLE</code> is an environment variable that points to the application's console log file (<code>console.log</code>) which contains the app's console output (ex: <code>print()</code> statements). Its value is set in production mode.</li> <li>If you have an android emulator or physical device, you can download and install this apk. </li> <li>Follow this guide to package your app for all platforms.</li> </ul>"},{"location":"cookbook/session-storage/","title":"Session storage","text":"<p>Flet provides an API for storing key-value data in user's session on a server side.</p> <p>Writing data to the session:</p> <pre><code># strings\npage.session.set(\"key\", \"value\")\n\n# numbers, booleans\npage.session.set(\"number.setting\", 12345)\npage.session.set(\"bool_setting\", True)\n\n# lists\npage.session.set(\"favorite_colors\", [\"red\", \"green\", \"blue\"])\n</code></pre> <p>Caution</p> <p>In the current Flet implementation the data stored in a session store is transient and is not preserved between app restarts.</p> <p>Reading data:</p> <pre><code># The value is automatically converted back to the original type\nvalue = page.session.get(\"key\")\n\ncolors = page.session.get(\"favorite_colors\")\n# colors = [\"red\", \"green\", \"blue\"]\n</code></pre> <p>Check if a key exists:</p> <pre><code>page.session.contains_key(\"key\") # True if the key exists\n</code></pre> <p>Get all keys:</p> <pre><code>page.session.get_keys()\n</code></pre> <p>Remove a value:</p> <pre><code>page.session.remove(\"key\")\n</code></pre> <p>Clear the session storage:</p> <pre><code>page.session.clear()\n</code></pre>"},{"location":"cookbook/theming/","title":"Theming","text":"<p>It is possible to configure your application and/or the containing controls to follow a particular themes.</p>"},{"location":"cookbook/theming/#app-wide-themes","title":"App-wide themes","text":"<p>The <code>Page</code> control (uppermost control in the tree) has two useful properties for this: <code>theme</code> and <code>dark_theme</code> properties to configure the appearance/theme of the entire app in light and dark theme modes respectively.</p> <p>Both of type <code>Theme</code>, they represent the default/fallback themes to be used app-wide,  except explicitly modified/overriden in the tree.</p> <pre><code>page.theme = ft.Theme(color_scheme_seed=ft.Colors.GREEN)\npage.dark_theme = ft.Theme(color_scheme_seed=ft.Colors.BLUE)\n</code></pre>"},{"location":"cookbook/theming/#nested-themes","title":"Nested themes","text":"<p>You can have a part of your app to use a different theme or override some theme styles for specific controls.</p> <p>Some container-like controls have <code>theme</code> and <code>theme_mode</code> properties of type <code>Theme</code> and <code>ThemeMode</code> respectively.</p> <p>Specifying <code>theme_mode</code> in the <code>Container</code> means you don't want to inherit parent theme mode,  but want a completely new, unique scheme for all controls inside the container.  However, if the container does not have <code>theme_mode</code> property set then the styles from its theme property will override the ones from the parent inherited theme:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    # Yellow page theme with SYSTEM (default) mode\n    page.theme = ft.Theme(\n        color_scheme_seed=ft.Colors.YELLOW,\n    )\n\n    page.add(\n        # Page theme\n        ft.Container(\n            content=ft.ElevatedButton(\"Page theme button\"),\n            bgcolor=ft.Colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n\n        # Inherited theme with primary color overridden\n        ft.Container(\n            theme=ft.Theme(color_scheme=ft.ColorScheme(primary=ft.Colors.PINK)),\n            content=ft.ElevatedButton(\"Inherited theme button\"),\n            bgcolor=ft.Colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n\n        # Unique always DARK theme\n        ft.Container(\n            theme=ft.Theme(color_scheme_seed=ft.Colors.INDIGO),\n            theme_mode=ft.ThemeMode.DARK,\n            content=ft.ElevatedButton(\"Unique theme button\"),\n            bgcolor=ft.Colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"getting-started/adaptive-apps/","title":"Adaptive apps","text":"<p>Flet framework allows you to develop adaptive apps which means having a single codebase that will deliver different look depending on the device's platform.</p> <p>Below is the example of a very simple app that has a different look on iOS and Android platforms:</p> <pre><code>import flet as ft\n\n\ndef main(page):\n\n    page.adaptive = True\n\n    page.appbar = ft.AppBar(\n        leading=ft.TextButton(\"New\", style=ft.ButtonStyle(padding=0)),\n        title=ft.Text(\"Adaptive AppBar\"),\n        actions=[\n            ft.IconButton(ft.cupertino_icons.ADD, style=ft.ButtonStyle(padding=0))\n        ],\n        bgcolor=ft.Colors.with_opacity(0.04, ft.CupertinoColors.SYSTEM_BACKGROUND),\n    )\n\n    page.navigation_bar = ft.NavigationBar(\n        destinations=[\n            ft.NavigationBarDestination(icon=ft.Icons.EXPLORE, label=\"Explore\"),\n            ft.NavigationBarDestination(icon=ft.Icons.COMMUTE, label=\"Commute\"),\n            ft.NavigationBarDestination(\n                icon=ft.Icons.BOOKMARK_BORDER,\n                selected_icon=ft.Icons.BOOKMARK,\n                label=\"Bookmark\",\n            ),\n        ],\n        border=ft.Border(\n            top=ft.BorderSide(color=ft.CupertinoColors.SYSTEM_GREY2, width=0)\n        ),\n    )\n\n    page.add(\n        ft.SafeArea(\n            ft.Column(\n                [\n                    ft.Checkbox(value=False, label=\"Dark Mode\"),\n                    ft.Text(\"First field:\"),\n                    ft.TextField(keyboard_type=ft.KeyboardType.TEXT),\n                    ft.Text(\"Second field:\"),\n                    ft.TextField(keyboard_type=ft.KeyboardType.TEXT),\n                    ft.Switch(label=\"A switch\"),\n                    ft.FilledButton(content=ft.Text(\"Adaptive button\")),\n                    ft.Text(\"Text line 1\"),\n                    ft.Text(\"Text line 2\"),\n                    ft.Text(\"Text line 3\"),\n                ]\n            )\n        )\n    )\n\n\nft.run(main)\n</code></pre> <p>By setting just <code>page.adaptive = True</code> you can make you app looking awesome on both iOS and Android devices:</p> iPhone Android"},{"location":"getting-started/adaptive-apps/#material-and-cupertino-controls","title":"Material and Cupertino controls","text":"<p>Most of Flet controls are based on Material design. </p> <p>There is also a number of iOS-style controls in Flet that are called Cupertino controls. </p> <p>Cupertino controls usually have a matching Material control that has <code>adaptive</code> property which defaults to<code>False</code>. When using a Material control with <code>adaptive</code> property set to <code>True</code>, a different control will be created depending on the platform, for example: <pre><code>ft.Checkbox(adaptive=True, value=True, label=\"Adaptive Checkbox\")\n</code></pre></p> <p>Flet checks the value of <code>page.platform</code> property and if it is <code>ft.PagePlatform.IOS</code> or <code>ft.PagePlatform.MACOS</code>, Cupertino control will be created; in all other cases Material control will be created. </p> <p>::note <code>adaptive</code> property can be set for an individual control or a container control such as <code>Row</code>, <code>Column</code> or any other control that has <code>content</code> or <code>controls</code> property. If container control is adaptive, all its child controls will be adaptive, unless <code>adaptive</code> property is explicitly set to <code>False</code> for a child control. ::</p> <p>Below is the list of adaptive Material controls and their matching Cupertino controls:</p> AlertDialog CupertinoAlertDialog Any button in Dialog actions CupertinoDialogAction AppBar CupertinoAppBar NavigationBar CupertinoNavigationBar ListTile CupertinoListTile TextField CupertinoTextField Checkbox CupertinoCheckbox Slider CupertinoSlider Switch CupertinoSwitch Radio CupertinoRadio FilledButton CupertinoFilledButton FilledTonalButton CupertinoButton IconButton CupertinoButton ElevatedButton CupertinoButton OutlinedButton TextButton"},{"location":"getting-started/adaptive-apps/#custom-adaptive-controls","title":"Custom adaptive controls","text":"<p>While Flet offers a number of controls that will be adapted to a platform automatically using their <code>adaptive</code> property, there will be cases when you need more specific adaptive UI presentation, for example, using different icon, background color, padding etc. depending on the platform.</p> <p>With Flet, you can create your own reusable custom controls in Python that will inherit from a Flet control and implement specific properties you need. In the example below, we are creating a new <code>AdaptiveNavigationBarDestination</code> control that will be displaying different icon on iOS and Android:</p> <pre><code>class AdaptiveNavigationBarDestination(ft.NavigationBarDestination):\n    def __init__(self, ios_icon, android_icon, label):\n        super().__init__()\n        self._ios_icon = ios_icon\n        self._android_icon = android_icon\n        self.label = label\n\n    def build(self):\n        # we can check for platform in build method because self.page is known\n        self.icon = (\n            self._ios_icon\n            if self.page.platform == ft.PagePlatform.IOS\n            or self.page.platform == ft.PagePlatform.MACOS\n            else self._android_icon\n        )\n</code></pre> <p>We will use <code>AdaptiveNavigationBarDestination</code> in <code>NavigationBar</code>:</p> <p><pre><code>import flet as ft\nfrom adaptive_navigation_destination import AdaptiveNavigationBarDestination\n\ndef main(page):\n\n    page.adaptive = True\n\n    page.navigation_bar = ft.NavigationBar(\n        selected_index=2,\n        destinations=[\n            AdaptiveNavigationBarDestination(\n                ios_icon=ft.cupertino_icons.PERSON_3_FILL,\n                android_icon=ft.Icons.PERSON,\n                label=\"Contacts\",\n            ),\n            AdaptiveNavigationBarDestination(\n                ios_icon=ft.cupertino_icons.CHAT_BUBBLE_2,\n                android_icon=ft.Icons.CHAT,\n                label=\"Chats\",\n            ),\n            AdaptiveNavigationBarDestination(\n                ios_icon=ft.cupertino_icons.SETTINGS,\n                android_icon=ft.Icons.SETTINGS,\n                label=\"Settings\",\n            ),\n        ],\n    )\n\n    page.update()\n\n\nft.run(main)\n</code></pre> Now the NavigationBar and icons within it will look like different on Android and iOS:</p> iOS Android <p>::note You may utilise reusable controls approach to adapt your app not only depending on the <code>platform</code> but also use <code>page.web</code> property to have different UI depending on wether the app is running in a browser or not, or even combine <code>platform</code> and <code>web</code> properties to have specific UI for your MACOS or Windows desktop apps. ::</p>"},{"location":"getting-started/async-apps/","title":"Async apps","text":"<p>Flet app can be written as an async app and use <code>asyncio</code> and other Python async libraries. Calling coroutines is naturally supported in Flet, so you don't need to wrap them to run synchronously. </p> <p>By default, Flet executes control event handlers in separate threads, but sometimes that could be an ineffective usage of CPU or it does nothing while waiting for a HTTP response or executing <code>sleep()</code>.</p> <p>Asyncio, on the other hand, allows implementing concurrency in a single thread by switching execution context between \"coroutines\". This is especially important for apps that are going to be published as static websites using Pyodide. Pyodide is a Python runtime built as a WebAssembly (WASM) and running in the browser. At the time of writing it doesn't support threading yet.</p>"},{"location":"getting-started/async-apps/#getting-started-with-async","title":"Getting started with async","text":"<p>You could mark <code>main()</code> method of Flet app as <code>async</code> and then use any asyncio API inside it:</p> <pre><code>import flet as ft\n\nasync def main(page: ft.Page):\n    await asyncio.sleep(1)\n    page.add(ft.Text(\"Hello, async world!\"))\n\nft.run(main)\n</code></pre> <p>You can use <code>await ft.app_async(main)</code> if Flet app is part of a larger app and called from <code>async</code> code.</p>"},{"location":"getting-started/async-apps/#control-event-handlers","title":"Control event handlers","text":"<p>Control event handlers could be both sync and <code>async</code>.</p> <p>If a handler does not call any async methods it could be a regular sync method:</p> <pre><code>def page_resize(e):\n    print(\"New page size:\", page.window.width, page.window.height)\n\npage.on_resize = page_resize\n</code></pre> <p>However, if a handler calls async logic it must be async too:</p> <pre><code>async def main(page: ft.Page):\n\n    async def button_click(e):\n        await some_async_method()\n        page.add(ft.Text(\"Hello!\"))\n\n    page.add(ft.ElevatedButton(\"Say hello!\", on_click=button_click))\n\nft.run(main)\n</code></pre>"},{"location":"getting-started/async-apps/#async-lambdas","title":"Async lambdas","text":"<p>There are no async lambdas in Python. It's perfectly fine to have a lambda event handler in async app for simple things:</p> <pre><code>page.on_error = lambda e: print(\"Page error:\", e.data)\n</code></pre> <p>but you can't have an async lambda, so an async event handler must be used.</p>"},{"location":"getting-started/async-apps/#sleeping","title":"Sleeping","text":"<p>To delay code execution in async Flet app you should use <code>asyncio.sleep()</code> instead of <code>time.sleep()</code>, for example:</p> <pre><code>import asyncio\nimport flet as ft\n\ndef main(page: ft.Page):\n    async def button_click(e):\n        await asyncio.sleep(1)\n        page.add(ft.Text(\"Hello!\"))\n\n    page.add(\n        ft.ElevatedButton(\"Say hello with delay!\", on_click=button_click)\n    )\n\nft.run(main)\n</code></pre>"},{"location":"getting-started/async-apps/#threading","title":"Threading","text":"<p>To run something in the background use <code>page.run_task()</code>. For example, \"Countdown\" custom control which is self-updating on background could be implemented as following:</p> <pre><code>import asyncio\nimport flet as ft\n\nclass Countdown(ft.Text):\n    def __init__(self, seconds):\n        super().__init__()\n        self.seconds = seconds\n\n    def did_mount(self):\n        self.running = True\n        self.page.run_task(self.update_timer)\n\n    def will_unmount(self):\n        self.running = False\n\n    async def update_timer(self):\n        while self.seconds and self.running:\n            mins, secs = divmod(self.seconds, 60)\n            self.value = \"{:02d}:{:02d}\".format(mins, secs)\n            self.update()\n            await asyncio.sleep(1)\n            self.seconds -= 1\n\ndef main(page: ft.Page):\n    page.add(Countdown(120), Countdown(60))\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"getting-started/changelog/","title":"Flet changelog","text":""},{"location":"getting-started/changelog/#0700","title":"0.70.0","text":"<ul> <li>Flet 1.0 Alpha Released \u2013 Read the announcement</li> <li>New: Declarative and reactive programming style, alongside imperative</li> <li>New: Automatic page updates after event handler completion</li> <li>New: Service controls for non-visual functionality</li> <li>New: WebAssembly support for running web apps in the browser</li> <li>New: Offline mode support for web apps</li> <li>New: Ability to embed Flet web apps into multiple HTML elements on a page</li> <li>New: Modern, future-proof architecture:</li> <li>Controls in Python are now defined as plain dataclasses</li> <li>Unified diffing algorithm supports both imperative and declarative styles</li> <li>Refactored Flutter layer using inherited widgets and <code>Provider</code></li> <li>See the list of breaking changes</li> </ul>"},{"location":"getting-started/changelog/#0283","title":"0.28.3","text":"<ul> <li>New: Multiple subscribers can subscribe to a published topic by <code>send_all_on_topic</code> (#5303)</li> <li>Fixed: Local Images Not Rendering in Android App using Flet 0.27.6 (#5198)</li> <li>Fixed: FilePicker.save_file() opens blank gray screen in APK build (works fine in VS) (#5301)</li> <li>Fixed: Routing / Navigation broken since flet 0.28.2 (#5302)</li> </ul>"},{"location":"getting-started/changelog/#0282","title":"0.28.2","text":"<ul> <li>Fixed missing imports in <code>__init__.py</code> (#5292).</li> <li>Fixed: GestureDetector should have at least one event handler defined (#5293).</li> </ul>"},{"location":"getting-started/changelog/#0280","title":"0.28.0","text":"<ul> <li>feat(cli): <code>flet -V</code> as alternative to <code>flet --version</code> (#4791)</li> <li>New Features and Flutter 3.29 (#4891)</li> <li>Fixed: <code>Dropdown.expand</code> has no effect (#5042)</li> <li>feat: expose events (<code>on_double_tap</code>, <code>on_pan_start</code>) in <code>WindowDragArea</code> (#5043)</li> <li>feat: custom <code>ReorderableListView</code> drag handle listeners (#5051)</li> <li>Fixed: <code>LineChartDataPoint.tooltip</code> not properly rendered (#5105)</li> <li>Fixed: broken code in <code>Page.__on_authorize_async</code> (#5154)</li> <li>Remove Flet v0.25 deprecations (#5155)</li> <li>Prevent platform back button from popping a route with pop confirmation event (#5280)</li> <li>Fixed: SearchBar does not handle capitalization correctly (#5014)</li> <li>Fixed: <code>FilePicker</code> upload fails if original filename is modified (#5037)</li> </ul>"},{"location":"getting-started/changelog/#0276","title":"0.27.6","text":"<ul> <li>Fix <code>flet build</code>: allow dependencies with commas (#5033)</li> <li>Show app startup screen by default (#5036)</li> <li>fix: <code>Textfield</code> cursor position changes when modifying field content in <code>on_change</code> (#5019)</li> <li>Remove deperecated <code>Control.update_async()</code> method (#5005)</li> <li>fix: incorrect positioning of non-FAB controls assigned to page.floating_action_button (#5049)</li> </ul>"},{"location":"getting-started/changelog/#0275","title":"0.27.5","text":"<ul> <li>Added <code>FletApp.showAppStartupScreen</code> and <code>FletApp.appStartupScreenMessage</code> properties.</li> <li>Added <code>tool.flet.splash.icon_bgcolor</code> and <code>tool.flet.splash.icon_dark_bgcolor</code> settings for Android splash screen icon image.</li> <li>Added <code>tool.flet.app.boot_screen</code> and <code>tool.flet.app.startup_screen</code> settings for customizing Flet app \"loading\" screens.</li> <li>feat: <code>Dropdown.menu_width</code> property (#5007)</li> <li>PBKDF2 iteration count increased to 600,000 (#5023)</li> </ul>"},{"location":"getting-started/changelog/#0274","title":"0.27.4","text":"<ul> <li>Fix: do not remove <code>flutter-packages</code> on re-build if <code>dev_packages</code> configured.</li> </ul>"},{"location":"getting-started/changelog/#0273","title":"0.27.3","text":"<ul> <li>Fixes to make <code>flet build</code> work in CI environment (#4993)</li> </ul>"},{"location":"getting-started/changelog/#0272","title":"0.27.2","text":"<ul> <li>Error on second flet build run \"Because {app} depends on flet_{package} from path which doesn't exist\" (#4955)</li> <li>Editable packages in pyproject.toml to install from a path by flet build command (#4963)</li> <li>Setting Android manifest <code>&lt;application&gt;</code> element properties in <code>pyproject.toml</code> (#4977)</li> <li>Fixed regression: Added back <code>Control.build()</code> method.</li> </ul>"},{"location":"getting-started/changelog/#0271","title":"0.27.1","text":"<ul> <li>Fixed: binary file operations should not specify encoding.</li> </ul>"},{"location":"getting-started/changelog/#0270","title":"0.27.0","text":"<ul> <li><code>DropdownMenu</code> control (#1088)</li> <li>feat: <code>ReorderableListView</code> Control (#4865)</li> <li>Remove v0.24.0 deprecations #4932)</li> <li>Implement <code>Container.dark_theme</code> property (#4857)</li> <li>Upgrade to Pyodide 0.27 for <code>httpx</code> Support (#4840)</li> <li>Remove <code>CupertinoCheckbox.inactive_color</code> in favor of <code>fill_color</code> (#4837)</li> <li><code>flet build</code>: use Provisioning Profile to sign iOS app archive (<code>.ipa</code>), deprecate <code>--team</code> option (#4869)</li> <li>feat: <code>flet doctor</code> CLI command (#4803)</li> <li>feat: implement button themes (for <code>ElevatedButton</code>, <code>OutlinedButton</code>, <code>TextButton</code>, <code>FilledButton</code>, <code>IconButton</code>) (#4872)</li> <li><code>ControlEvent.data</code> should be of type <code>Optional[str]</code> and default to <code>None</code> (#4786)</li> <li><code>flet build</code>: add <code>--source-packages</code> to allow installing certain Python packages from source distros (#4762)</li> <li>disable markup for flet-cli stdout logs (#4796)</li> <li>Fixed: Disable rich's Markup for stdout logs (#4795)</li> <li>Fixed: Setting <code>SearchBar.bar_border_side</code> isn't visually honoured (#4767)</li> <li>Fixed: Dropdown: Long options cause the down-arrow to oveflow (#4838)</li> <li>Fixed: CupertinoSlider initialisation does not allow values less then zero/greater then 1 (#4853)</li> <li>Fixed: Same code shows different appearance in Flet APP/Web/PC local. (#4855)</li> <li>Fixed: Transforming scale renders a grey screen (#4759)</li> <li>Fixed: UnicodeDecodeError when using accented characters in manifest.json (#4713)</li> <li>Fixed: Implement <code>SearchBar.blur()</code> to programmatically unfocus the bar (#4827)</li> </ul>"},{"location":"getting-started/changelog/#0260","title":"0.26.0","text":"<ul> <li>Flutter extensions: <code>flet_*</code> packages moved to separate repositories (#4721)</li> <li>Automatic installation of Flutter, JDK and Android SDK (#4721)</li> <li>Migrated to Flutter 3.27.0 (#4593)</li> <li>New control properties, Flutter 3.27 fixes (#4703)</li> <li>Optional on-demand creation of <code>ListView.controls</code> (#3931)</li> <li>Reset <code>InteractiveViewer</code> tranformations (#4391)</li> <li>Passthrough of mouse events from main window to other applications (#1438)</li> <li>Remove v0.26.0-related deprecations (#4456)</li> <li>Implemented <code>Window.ignore_mouse_events</code> (#4465)</li> <li>Adding Google/Android TV platform support (#4581)</li> <li>Remove <code>Optional[]</code> from predefined typing <code>*Value</code>s (#4702)</li> <li>Throttle <code>InteractiveViewer</code> update events (#4704)</li> <li>Fixed: Update project_dependencies.py (#4459)</li> <li>Fixed: <code>SafeArea</code> object has no attribute <code>_SafeArea__minimum</code> (#4500)</li> <li>Fixed: Tooltip corruption in <code>Segment</code> and <code>BarChartRod</code> on <code>update()</code> (#4525)</li> <li>Fixed: Setting <code>CheckBox.border_side.stroke_align</code> to an Enum fails (#4526)</li> <li>Fixed: <code>ControlState</code> should be resolved based on user-defined order (#4556)</li> <li>Fixed: broken <code>Dismissible.dismiss_direction</code> (#4557)</li> <li>Fixed: Fix Rive not updating (#4582)</li> <li>Fixed: <code>DatePicker</code> regression with first and last dates (#4661)</li> <li><code>flet build</code> command: Copy <code>flutter-packages</code>, support for platform-specific dependencies (#4667)</li> <li>Fixed: <code>CupertinoBottomSheet</code> applies a red color and yellow underline to <code>Text</code>  content (#4673)</li> <li>Fixed: setting <code>ButtonTheme</code> displays a grey screen (#4731)</li> <li>Fixed: <code>Textfield</code> input border color considers user-specified <code>border_color</code> property (#4735)</li> <li>Fixed: make <code>Tooltip.message</code> a required parameter (#4736)</li> </ul>"},{"location":"getting-started/changelog/#0252","title":"0.25.2","text":""},{"location":"getting-started/changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix <code>flet publish</code> creates broken website if no <code>requirements.txt</code> or <code>pyproject.toml</code> found (#4493).</li> <li>Fix PyInstaller hook to avoid download Flet app bundle on first run (#4549).</li> <li>Support <code>git</code>, <code>path</code>, <code>url</code> Poetry-style dependencies in <code>pyproject.toml</code> (#4554).</li> <li>Fixed broken\u00a0<code>Map.center_on()</code>\u00a0and default animations\u00a0(#4519).</li> <li>Fixed Tooltip corruption in\u00a0<code>Segment</code>\u00a0and\u00a0<code>BarChartRod</code>\u00a0on\u00a0<code>update()</code>\u00a0(#4525).</li> <li>Fixed Setting\u00a0<code>CheckBox.border_side.stroke_align</code>\u00a0to an Enum fails\u00a0(#4526).</li> <li>Fixed <code>ControlState\u00a0should</code> be resolved based on user-defined order\u00a0(#4556).</li> <li>Fixed broken\u00a0<code>Dismissible.dismiss_direction</code>\u00a0(#4557).</li> </ul>"},{"location":"getting-started/changelog/#0251","title":"0.25.1","text":""},{"location":"getting-started/changelog/#changes","title":"Changes","text":"<ul> <li>Added InteractiveViewer programmatic transformations (#4451).</li> </ul>"},{"location":"getting-started/changelog/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>Fixed <code>flet build</code> creates bundle but running it gives <code>ImportError: No module named main</code> error (#4444).</li> <li>Fixed hook-flet with wrong import module (#4447).</li> <li>Fixed \"flutter/runtime/dart_vm_initializer.cc\" error on Linux (#4443).</li> </ul>"},{"location":"getting-started/changelog/#0250","title":"0.25.0","text":""},{"location":"getting-started/changelog/#new-controls","title":"New controls","text":"<ul> <li>Mobile Ads (<code>Banner</code> and <code>Interstitial</code>) (details and example).</li> <li><code>Button</code> control (#4265) - which is just an alias for <code>ElevatedButton</code> control.</li> </ul>"},{"location":"getting-started/changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Refactor <code>Badge</code> Control to a Dataclass; added new <code>badge</code> property to all controls (#4077).</li> </ul>"},{"location":"getting-started/changelog/#other-changes","title":"Other changes","text":"<ul> <li>Added <code>{value_length}</code>, <code>{max_length}</code>, and <code>{symbols_left}</code> placeholders to <code>TextField.counter_text</code> (#4403).</li> <li>Added <code>--skip-flutter-doctor</code> to build cli command (#4388).</li> <li><code>WebView</code> enhancements (#4018).</li> <li><code>Map</code> control enhancements (#3994).</li> <li>Exposed more <code>Theme</code> props (#4278, #4278).</li> <li>Exposed more properties in multiple Controls (#4105)</li> <li>Added <code>__contains__</code> methods in container-alike Controls (#4374).</li> <li>Added a custom <code>Markdown</code> code theme (#4343).</li> <li>Added <code>barrier_color</code> prop to dialogs (#4236).</li> <li>Merged <code>icon</code> and <code>icon_content</code> props into <code>icon: str | Control</code> (#4305).</li> <li>Migrated <code>colors</code> and <code>icons</code> variables to Enums (#4180).</li> <li>TextField: <code>suffix_icon</code>, <code>prefix_icon</code> and <code>icon</code> can be <code>Control</code> or <code>str</code> (#4173).</li> <li>Added <code>--pyinstaller-build-args</code> to <code>flet pack</code> CLI command (#4187).</li> <li>Made SearchBar's view height adjustable; added new properties (#4039).</li> <li>Bumped Rive version and fixed Linux app build template for <code>rive_common</code>.</li> </ul>"},{"location":"getting-started/changelog/#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>Fixed <code>Icon</code> rotation (#4384).</li> <li>Fixed regression in <code>Markdown.code_theme</code> when using <code>MarkdownCodeTheme</code> enum (#4373).</li> <li>Fixed <code>Segment</code> and <code>NavigationBarDestination</code> accept only string tooltips (#4326).</li> <li>Display informative message when <code>date</code> has wrong format (#4019).</li> <li>Fixed <code>MapConfiguration.interaction_configuration</code> is not honoured (#3976).</li> <li>Fixed <code>Video.jump_to()</code> fails with negative indexes (#4294).</li> <li>Fixed condition in <code>AppBar.tooltip_opacity</code> (#4280).</li> <li>Fixed wrong type (asyncio.Future -&gt; concurrent.futures.Future) and handle <code>CancelledError</code> (#4268).</li> <li>Fixed clicking on <code>CupertinoContextMenuAction</code> doesn't close context menu (#3948).</li> <li>Fixed dropdown <code>max_menu_height</code> (#3974).</li> <li>Fixed prevent button style from being modified in <code>before_update()</code> (#4181).</li> <li>Fixed disabling filled buttons is not visually respected (#4090).</li> <li>when <code>label</code> is set, use <code>MainAxisSize.min</code> for the <code>Row</code> (#3998).</li> <li>Fixed <code>NavigationBarDestination.disabled</code> has no visual effect (#4073).</li> <li>Fixed autofill in <code>CupertinoTextField</code> (#4103).</li> <li>Linechart: <code>jsonDecode</code> tooltip before displaying (#4069).</li> <li>Fixed button's <code>bgcolor</code>, <code>color</code> and <code>elevation</code> (#4126).</li> <li>Fixed scrolling issues on Windows (#4145).</li> <li>Skip running flutter doctor on windows if <code>no_rich_output</code> is <code>True</code> (#4108).</li> <li>Fixed <code>TextField</code> freezes on Linux Mint #4422](https://github.com/flet-dev/flet/pull/4422)).</li> </ul>"},{"location":"getting-started/changelog/#0241","title":"0.24.1","text":"<ul> <li>FIXED: <code>Tooltip</code> displays wrong message when used with <code>IconButton</code>, <code>FloatingActionButton</code> and <code>PopupMenuButton</code> (#3922)</li> <li>FIXED: <code>Image.src.base64</code> (#3919)</li> </ul>"},{"location":"getting-started/changelog/#0240","title":"0.24.0","text":"<ul> <li>NEW: <code>Placeholder</code> Control (#3646)</li> <li>NEW: <code>InteractiveViewer</code> Control (#3645)</li> <li>NEW: Adding Background/Foreground Services to GeoLocator UPDATE (#3803)</li> <li>NEW: <code>Container.ignore_interactions</code> property (#3639)</li> <li>NEW: Add <code>rtl</code> prop to more controls (#3641)</li> <li>NEW: <code>TextField.counter</code> property (#3676)</li> <li>NEW: window.icon: make the usage of relative paths possible (#3825)</li> <li>NEW: Add event to <code>flet_video</code> to know what song is playing (#3772)</li> <li>NEW: adds <code>floating_action_button_theme</code> property to <code>Theme</code> (#3771)</li> <li>NEW: Added <code>on_completed</code> event to <code>flet_video</code> (#3758)</li> <li>NEW: Add <code>focus</code>, <code>on_focus</code>, <code>on_blur</code> to <code>SearchBar</code> (#3417, #3752)</li> <li>NEW: <code>--no-rich-output</code> flag to prevent rich output (#3708)</li> <li>CHANGED: make <code>Tooltip</code> a dataclass which can be used in <code>Control.tooltip</code> (#3837)</li> <li>CHANGED: wrap <code>View</code>s into a background container (#3820)</li> <li>FIXED: export BottomSheetTheme (#3858)</li> <li>FIXED: setting SearchBar.value to an empty string is not respected (#3872)</li> <li>FIXED: add full-screen events to WindowEventType (#3857)</li> <li>FIXED: snackbar margin (#3856)</li> <li>FIXED: not error on inputfield when errorText is empty (#3855)</li> <li>FIXED: <code>flet.map</code> is not available after building app (#3845)</li> <li>FIXED: <code>InputFilter</code> clears <code>TextField</code> when an invalid character is entered (#3779)</li> <li>FIXED: <code>Dropdown.alignment</code> not respected (#3737)</li> <li>FIXED: scrolling issues in <code>CupertinoPicker</code> (#3678)</li> <li>FIXED: scrolling controls are not able to scroll due to wrong super class call (#3702)</li> <li>FIXED: Dismissible (#3690)</li> <li>FIXED: <code>PieChartEvent.type</code> on web (#3611)</li> <li>FIXED: <code>Switch.width</code> and <code>height</code> properties (#3670)</li> <li>FIXED: parsing issues in <code>TextStyle</code> and <code>*Event</code> classes (#3551)</li> <li>FIXED: issues with <code>*Button</code>s (#3582)</li> <li>Handle Multiple Trailing Controls in <code>CupertinoAppBar</code> (#3603)</li> <li>Event: implement str and repr magic methods (#3601)</li> <li>CHORE: remove handler-subscription and enhance event typing (#3808)</li> <li>CHORE: improve type hint for OptionalEventCallable (#3659)</li> <li>CHORE: Using <code>Sequence</code> instead of <code>list</code> (#3661)</li> <li>CHORE: Bump Flutter packages (#3719)</li> <li>CHORE: Cleanup (#3640)</li> </ul>"},{"location":"getting-started/changelog/#0232","title":"0.23.2","text":"<ul> <li>CHANGED: Enhance Typing of Event Handlers (#3523)</li> <li>CHANGED: Delete Page.window.on_resize | deprecate Page.on_resize in favor of Page.on_resized (#3516)</li> <li>CHANGED: View is not opened on tap (#3513)</li> <li>FIXED: <code>Slider.value</code> defaults to <code>min</code> (#3503)</li> <li>FIXED: add \"hide\" and \"show\" to WindowEventType enum (#3505)</li> <li>FIXED: TypeError raised for isinstance check with Union in before_update method (#3499)</li> <li>FIXED: Corrected <code>isinstance</code> check in <code>SnackBar.before_update</code> to use a tuple of types instead of Union, resolving TypeError: \"Subscripted generics cannot be used with class and instance checks\".</li> <li>FIXED: <code>Page.open()</code> breaking after multiple calls.</li> <li>FIXED: Typo in on_resized setter decorator</li> </ul>"},{"location":"getting-started/changelog/#0231","title":"0.23.1","text":"<ul> <li>FIX: Fix parseFloatingActionButtonLocation() to work on desktop (#3496)</li> <li>FIX: Flet 0.23 crashes on Ubuntu 22.04 (#3495)</li> <li>FIX: View.floating_action_button_location: conditionally use _set_attr.</li> <li>FIX: Import <code>ParamSpec</code> from <code>typing</code> for Python &gt;3.10.</li> <li>FIX: replace <code>len(list(filter(...)))</code> by <code>any(...)</code>.</li> <li>FIX: Make window and browser_context_menu private, and expose respective getters.</li> </ul>"},{"location":"getting-started/changelog/#0230","title":"0.23.0","text":"<ul> <li>NEW: <code>PermissionHandler</code> control (#3276)</li> <li>NEW: <code>Map</code> control (#3093)</li> <li>NEW: <code>Geolocator control</code> (#3179)</li> <li>NEW: <code>AutoFillGroup</code> Control (#3047)</li> <li>NEW: Migrated to Flutter 3.22 (#3396)</li> <li>NEW: An ability to access PubSubHub from outside Flet app (#3446)</li> <li>NEW: <code>TextStyle</code> props: <code>overflow</code>, <code>word_spacing</code>, <code>baseline</code> (#3435)</li> <li>NEW: Enable/disable browser context menu (#3434)</li> <li>NEW: <code>Container.color_filter</code> property (#3392)</li> <li>NEW: <code>dropdown.Option.text_style</code> property (#3293)</li> <li>NEW: <code>dropdown.Option.content</code> property (#3456)</li> <li>NEW: <code>Video.configuration</code> property (#3074)</li> <li>NEW: Enable Impeller on Android and macOS (#3458)</li> <li>NEW: AutoComplete: add selected_index read-only property (#3298)</li> <li>NEW: Renamed <code>NavigationDestination</code> to <code>NavigationBarDestination</code> (#3172)</li> <li>CHANGED: Prettify \"build\" command cli output (#3407)</li> <li>CHANGED: Set colorScheme.primary as defaultSideColor (#3421)</li> <li>CHANGED: feat(map): add missing py-events, better typing (#3464)</li> <li>CHORE: Refactor <code>numbers.dart</code> utils (#3263)</li> <li>CHORE: Global Code Refactoring/Clean-up (#3186)</li> <li>CHORE: Cleanup (#3406)</li> <li>CHORE: Error handling enhancements (#3175)</li> <li>CHORE: Improve type hint for run_task and run_thread (#3459)</li> <li>CHORE: Move <code>page.window_*</code> and <code>page.browser_context_menu_*</code> properties to <code>Window</code> and <code>BrowserContextMenu</code> classes (#3463)</li> <li>FIX: <code>Container.on_tap_down</code> not called when <code>on_click</code> is not provided (#3442)</li> <li>FIX: SnackBar bug #3311 (#3313)</li> </ul>"},{"location":"getting-started/changelog/#0221","title":"0.22.1","text":"<ul> <li><code>AutoComplete</code> control (#3003)</li> <li>Added <code>--exclude</code> option to <code>flet build</code> command (#3125)</li> <li><code>CupertinoTimePicker.alignment</code> property (#3036)</li> <li>Bump <code>file_picker</code> dependency to 8.0.3.</li> <li>Fix latest flet-build-template version in development mode (#3021)</li> <li>Fix <code>flet --version</code> command for source checkout.</li> <li>LineChart: fix regression (#3033)</li> <li>Fixed: OAuth expiry of token will hang fastapi server (#3150)</li> <li>Fixed: Disabled the dropwown, but the color isnot gray (#2989)</li> <li>Fixed: <code>pubspec.yaml</code> for adding custom Flutter packages requires <code>dependency_overrides</code> (#3187)</li> <li>Fixed <code>disabled</code> dropdown (#3183)</li> <li>Fixed default value for scrollbar thickness (#3147)</li> <li>Fixed: autoreload, restrict eventhandler from restart on open (#3098)</li> <li>Fixed (#3035) switch Flutter RichText to Text.rich (#3066)</li> <li>Fixed: Markdown code block is not selectable (#1753)</li> </ul>"},{"location":"getting-started/changelog/#0220","title":"0.22.0","text":"<ul> <li>Controls enhancement (see #2882 for details).</li> <li><code>Theme</code> Enhancement (#2955).</li> <li><code>Rive</code> Control (#2841).</li> <li><code>Control.parent</code> property (#2906).</li> <li><code>Container.on_tap_down</code> event.</li> <li>Add <code>upload_endpoint_path</code> into <code>flet.fastapi.app</code> (#2954).</li> <li>Add checkbox border side state (#2973).</li> <li>Global context for session (#2934).</li> <li>Fix silent error in <code>page.run_task</code> (#2959).</li> <li>Web: patch html title with app_name (#2909).</li> <li><code>Container</code>: fix triggered both <code>on_click</code> and <code>on_long_press</code> events (#2914).</li> </ul>"},{"location":"getting-started/changelog/#0212","title":"0.21.2","text":"<ul> <li>Add <code>--android-adaptive-icon-background</code> to <code>flet build</code> command.</li> <li>Fix for mobile Safari: Store session ID in SessionStorage instead of window.name.</li> <li>Fix <code>_FletSocketServer__receive_loop_task</code> error on Linux.</li> <li>Replace deprecated (in Python 3.12) <code>datetime.utcnow()</code> with <code>datetime.now(timezone.utc)</code>.</li> <li>Fix a call to <code>self.__executor.shutdown</code> for Python 3.8.</li> <li>Add client IP and user agent to a session ID.</li> <li>Generate crypto-strong strings across the framework.</li> </ul>"},{"location":"getting-started/changelog/#0211","title":"0.21.1","text":"<ul> <li>Python dependencies bumped and losen.</li> <li>Fixed: \"No supported WebSocket library detected.\" when running web app with Flet 0.21.0 (#2818).</li> <li>Fix <code>EventHandler</code>: do not call it when converter returned <code>None</code>.</li> </ul>"},{"location":"getting-started/changelog/#0210","title":"0.21.0","text":"<ul> <li>FastAPI instead of built-in Fletd server. Mixed async/sync apps. (#2700).</li> <li><code>CupertinoActivityIndicator</code> Control (#2762).</li> <li><code>Lottie</code>Control and <code>Video</code> v2 (#2673).</li> <li><code>CupertinoActionSheet</code> and <code>CupertinoActionSheetAction</code> controls (#2763).</li> <li><code>CupertinoSlidingSegmentedButton</code> and <code>CupertinoSegmentedButton</code> controls (#2767).</li> <li><code>CupertinoTimerPicker</code> and <code>CupertinorPicker</code> Controls (#2743).</li> <li><code>CupertinoContextMenu</code> and <code>CupertinoContextMenuAction</code> controls (#2772).</li> <li><code>CupertinoDatePicker</code> Control (#2795).</li> <li><code>Page.on_app_lifecycle_state_change</code> event (#2800).</li> <li>More <code>Semantics</code> properties and <code>SemanticsService</code> control (#2731).</li> <li>Fix container.dart for issue #2628 (#2701).(#2701)</li> <li>Adaptive fixes (#2720).</li> <li><code>label_style</code> property for <code>Checkbox</code>, <code>Switch</code>, and <code>Radio</code> (#2730).</li> <li>Additional properties (#2736).</li> <li>Reorder <code>__init__</code> (#2724).</li> </ul>"},{"location":"getting-started/changelog/#0202","title":"0.20.2","text":"<ul> <li>Move <code>system_overlay_style</code> from <code>AppBar</code> to <code>Theme</code> (#2667).</li> <li><code>flet build</code> command checks minimal Flutter SDK version.</li> <li>Buttons turn to <code>CupertinoDialogAction</code> controls inside adaptive dialogs.</li> <li><code>FletApp</code> control takes control create factories from a parent app.</li> </ul>"},{"location":"getting-started/changelog/#0201","title":"0.20.1","text":"<ul> <li>Migrated to Flutter 3.19</li> <li>Fixed scrolling behavior changes in scrollable controls.</li> <li>Remove <code>Page.design</code> and replace with <code>Page.adaptive</code> (#2650).</li> <li>Rename <code>Control.on_update</code> to <code>Control.before_update</code> (#2642).</li> </ul>"},{"location":"getting-started/changelog/#0200","title":"0.20.0","text":"<ul> <li><code>AppBar.system_overlay_style</code> property (#2615).</li> <li>New <code>CupertinoButton</code> props: <code>filled</code>, <code>style.bgcolor</code>, <code>style.padding</code>, <code>text</code>, <code>icon</code>, <code>icon_color</code>.</li> <li>Added <code>NavigationBar.border</code> property which is used in adaptive mode only.</li> <li><code>Page.design</code> and <code>Pagelet.design</code> properties to force Material, Cupertino or Adaptive design language on entire app (#2607).</li> <li><code>Page.media</code> property with the data about obstructed spaces on the device (#2613).</li> <li>Adaptive buttons (#2591).</li> <li><code>Control.on_update()</code> method for better custom controls.</li> <li><code>--include-packages</code> option and support for <code>pubspec.yaml</code> for custom Flutter packages plus API for adding custom Flutter packages.</li> <li>Add <code>rtl</code> property to multiple controls (#2582).</li> <li>Fix: Material icon is shown instead of Cupertino icon if its name is thesame (#2581).</li> <li><code>TextStyle.letter_spacing</code>property (#2574).</li> <li><code>Audio</code>, <code>AudioRecorder</code>, <code>Video</code> and <code>WebView</code> controls moved into separate Flutter packages (#2579).</li> <li>Introduced <code>Control.on_update()</code> overridable method (#2578).</li> <li>New <code>AlertDialog</code> properties: <code>icon</code>, <code>bgcolor</code>, <code>elevation</code>.</li> <li><code>expand_loose</code> property for Control and all controls that have <code>expand</code> property (#2561).</li> <li>Pyodide v0.25.0.</li> <li><code>flet create</code> command to show verbose output (#2544).</li> <li><code>AudioRecorder</code> control (#2494).</li> <li>Bugfix: <code>flet pack --distpath</code> deletes <code>dist</code> directory (#2500).</li> <li>Added recursive <code>adaptive</code> property to all container-alike controls.</li> <li><code>TextField.text_vertical_align</code> property (#2496).</li> <li><code>CupertinoButton</code> Control (#2495).</li> <li><code>CupertinoListTile</code> control (#2487).</li> <li>Support for custom Flutter controls (#2482).</li> <li><code>Pagelet</code> control (#2469).</li> <li>Add <code>AppBar.adaptive</code> (#2458).</li> <li>Cupertino Icons and Colors (#2433).</li> <li><code>CupertinoTextfield</code> control (#2417).</li> <li><code>FloatingActionButtonLocation</code> offset (#2411).</li> </ul>"},{"location":"getting-started/changelog/#0190","title":"0.19.0","text":"<ul> <li><code>flet build</code> to apply Python SSL fix when packaging for iOS and Android (#2349).</li> <li>Upgrade Android Gradle in flet <code>build app</code> template (#2350).</li> <li><code>flet build -vv</code> should run pip install with verbose output (#2351).</li> <li>Add Python output/logging to troubleshoot empty screens on startup of built app (#2352).</li> <li><code>flet build</code> should raise an error when trying to package an app with native modules for iOS or Android (#2356).</li> <li><code>flet build</code> to add timestamp (hash) asset with Flet Python app to re-extract when code changes (#2289).</li> <li>Handle/bypass <code>if __name__ == \"__main__\"</code> check on Android.</li> <li>Support reading dependencies from <code>pyproject.toml</code>.</li> <li><code>flet build</code> to fix <code>--base-url</code> with surrounding slashes (#2369).</li> <li><code>CupertinoAlertDialog</code>, <code>CupertinoDialogAction</code>, adaptive property for <code>AlertDialog</code> (#2365).</li> <li><code>Dismissible.confirmDismiss</code> prop (#2359).</li> <li><code>ListView.reverse</code> and <code>GridView.reverse</code> props (#2335).</li> <li><code>Text.style</code> type Deprecation warning (#2286).</li> <li>Add <code>LineChartData.prevent_curve_over_shooting</code> and <code>LineChartData.prevent_curve_over_shooting_threshold</code> props (#2354).</li> <li><code>flet build</code> to add checks to allow certain build commands according to \"build_on\" platform (#2343).</li> <li>Fixed: <code>flet build</code> gives \"OSError: [WinError 193] %1 is not a valid Win32 application\" for some users (#2318).</li> <li>Fixed: PubSub is not shared between pages in the same FastAPI app (#2368).</li> <li>Fixed: check for <code>DISPLAY</code> instead of <code>XDG_CURRENT_DESKTOP</code> to check if linux machine is GUIless or not (#2373).</li> </ul>"},{"location":"getting-started/changelog/#0180","title":"0.18.0","text":"<ul> <li><code>flet build</code> command to package Flet app for any platform (docs).</li> <li>Added TextStyle for the Text control (#2270).</li> <li>Refactor code, add Enum deprecation utils (#2259).</li> <li><code>CupertinoAppBar</code> control (#2278).</li> <li>Fix AlertDialog content updating (#2277).</li> <li>Fix FLET_VIEW_PATH ignored on linux (#2244).</li> <li><code>MenuBar</code>, <code>SubMenuButton</code> and <code>MenuItemButton</code> controls (#2252).</li> <li>convert 'key' to a super parameter (#2258).</li> </ul>"},{"location":"getting-started/changelog/#0170","title":"0.17.0","text":"<ul> <li><code>SearchBar</code> control (#2212).</li> <li><code>CupertinoNavigationBar</code> control (#2241).</li> </ul>"},{"location":"getting-started/changelog/#0160","title":"0.16.0","text":"<ul> <li><code>CupertinoSlider</code> control and <code>Slider.adaptive</code> (#2224).</li> <li><code>CupertinoRadio</code> control and <code>Radio.adaptive</code> (#2225).</li> <li>Fix <code>NavigationBar.label_bahavior</code> (#2229).</li> <li><code>CupertinoSwitch</code> control (docs).</li> <li>Disable fade-in effect on Flet app start.</li> <li>Tab alignment bug fix (#2208).</li> <li>Tab visibility (#2213).</li> <li>Dark window title for Windows (#2204).</li> <li>Fix <code>ValueError</code> on web page resize (#1564).</li> </ul>"},{"location":"getting-started/changelog/#0150","title":"0.15.0","text":"<ul> <li><code>ExpansionPanel</code> and <code>ExpansionPanelList</code> controls (docs).</li> <li><code>CupertinoCheckBox</code> control, adaptive <code>CheckBox</code> (docs).</li> <li>Additional control props (#2182):</li> <li><code>Card.shape</code>.</li> <li><code>NavigationDestination.tooltip</code>.</li> <li><code>NavigationRail</code>: <code>elevation</code>, <code>indicator_color</code>, <code>indicator_shape</code>.</li> <li><code>BottomSheet</code>: <code>bgcolor</code>, <code>elevation</code>.</li> <li>Added <code>Dropdown.Option.visible</code> property.</li> <li>Fix AlertDialog broken content when testing in Flet app (#2192).</li> </ul>"},{"location":"getting-started/changelog/#0140","title":"0.14.0","text":"<ul> <li><code>SelectionArea</code> control (docs).</li> <li><code>SegmentedButton</code> control (docs).</li> <li><code>ExpansionTile</code> control (docs).</li> <li><code>BottomAppBar</code> control (docs).</li> <li>Add console as a build argument (#2146).</li> <li><code>--uac-admin</code> flag added to <code>flet pack</code> command (#2149).</li> <li>Bump Flutter dependencies.</li> </ul>"},{"location":"getting-started/changelog/#0130","title":"0.13.0","text":"<ul> <li><code>Dismissible</code> Control (#2124).</li> <li><code>TimePicker</code> control (#2129).</li> <li>Fixed: verify <code>value</code> limits (#2121).</li> <li>Added <code>thumb_icon</code> to <code>Switch</code> (#2116).</li> <li>Feature: <code>TextField</code> Input validation (#2101).</li> </ul>"},{"location":"getting-started/changelog/#0122","title":"0.12.2","text":"<ul> <li>Flutter 3.16.0</li> <li>Added \u00b4repr\u00b4 to <code>Control</code> class (#2091).</li> <li>Added \u00b4skip_route_change_event\u00b4 to \u00b4page.go_async\u00b4 (#2092).</li> </ul>"},{"location":"getting-started/changelog/#0121","title":"0.12.1","text":"<ul> <li>Ability to expand <code>ButtomSheet</code> to the top of the screen with <code>BottomSheet.is_scroll_controlled</code> property (#2087).</li> <li><code>BottomSheet.maintain_bottom_view_insets_padding</code> to avoid obstructing controls with on-screen keyboard (#2010).</li> <li>Fixed: <code>NavigationDrawer</code> disappears when you move the window and is not opening again (#2062).</li> <li>Fixed: alert dialog doesn't close (#2011).</li> <li>Fixed: Resizing app's window with an opened BottomSheet triggers new addition to Overlay (#2075).</li> <li>Fixed: on_window_event isnt handled after page navigation (#2081).</li> <li>Fixed: Routing is not working in 0.12.0 (#2082).</li> <li>Fixed: routing regression.</li> <li>Fixed: Multiple dialogs (AlertDialog) will create a ghost dialog (#1670).</li> </ul>"},{"location":"getting-started/changelog/#0120","title":"0.12.0","text":"<ul> <li><code>NavigationDrawer</code> control (docs).</li> <li><code>Badge</code> control (docs).</li> <li><code>RangeSlider</code> control (docs).</li> <li><code>WebView</code> control (docs).</li> <li><code>Cookiecutter</code> replaces <code>Copier</code> (#2014).</li> <li><code>page.go()</code>: ability to skip route change event (#2039).</li> <li>Fixed: Two <code>Datepicker</code> Opening Issue (#2025).</li> <li>Fixed: Using Audio and FilePicker at the same time, when click on the FilePicker, the audio automatically replays (#1807).</li> <li>Fixed: Audio issue while Route Changing (#1236).</li> <li>Fixed: Snackbar cause Audio stop playing (#1772).</li> <li>Fixed: <code>scroll_to()</code> with zero duration does nothing (#1659).</li> <li>Fixed: cannot get height and width for page (#1960).</li> <li>Fixed: Put it the right version of flet (#1997).</li> <li>Fixed: <code>Chip.selected</code> property type changed to bool (#2048).</li> <li>Fixed: Unreliable detection of SVG images (#2053).</li> </ul>"},{"location":"getting-started/changelog/#0110","title":"0.11.0","text":"<ul> <li><code>DatePicker</code> control (docs).</li> <li><code>Chip</code> control (docs).</li> <li>Pyodide v0.24.1.</li> <li>Python 3.12 support.</li> <li>Added <code>AlertDialog.inset_padding</code> property (#1899.</li> <li>Embedded mode to work with <code>serious_python</code>.</li> </ul>"},{"location":"getting-started/changelog/#0103","title":"0.10.3","text":"<ul> <li>Add proxy_path parameter to flet_fastapi.app() (#1882).</li> <li>Fix <code>flet create</code> crashes with an empty project name.</li> </ul>"},{"location":"getting-started/changelog/#0102","title":"0.10.2","text":"<ul> <li>Wrapped --codesign-identity &amp; --add-binary for flet pack (#1789).</li> <li>Fix incomplete code blocks in <code>flet_core/page.py</code>.</li> <li>Fix disabled color of FilledButtons.</li> <li>Add <code>AppView</code> and <code>WebRenderer</code> enums to flet-pyodide.</li> <li>Pyodide v0.24.0.</li> </ul>"},{"location":"getting-started/changelog/#0101","title":"0.10.1","text":"<ul> <li>Fix Cavas.Text drawing (#1783)</li> <li>Use alternative method to determine user computer's IP (#1733)</li> </ul>"},{"location":"getting-started/changelog/#0100","title":"0.10.0","text":"<ul> <li>Hosting Flet web apps in FastAPI (docs).</li> <li>Migrated to Flutter 3.13.1.</li> <li>Pydantic 2.0 support (Copier upgraded to 8.2.0).</li> <li>BREAKING: <code>DataTable.data_row_height</code> replaced with <code>DataTable.data_row_min_height</code> and <code>DataTable.data_row_max_height</code>.</li> </ul>"},{"location":"getting-started/changelog/#090","title":"0.9.0","text":"<ul> <li>Added <code>--android</code> option to <code>flet run</code> command.</li> <li>Added <code>page.debug</code> property (#1649)</li> <li>Added <code>page.platform_brightness</code> property and <code>page.platform_brightness_change</code> event (#1630)</li> <li>Store session ID in <code>html.window.name</code> (#1629)</li> <li>Do not assign random port on Windows with <code>--ios</code> flag (#1620)</li> </ul>"},{"location":"getting-started/changelog/#084","title":"0.8.4","text":"<ul> <li>Bumping version as PyPi was out of space.</li> </ul>"},{"location":"getting-started/changelog/#083","title":"0.8.3","text":"<ul> <li>Fixed: FilePicker crash the flet.app() after open directory dialog and choose one directory (#1572)</li> </ul>"},{"location":"getting-started/changelog/#082","title":"0.8.2","text":"<ul> <li>Fix <code>flet pack</code> command on macOS (#1580)</li> <li>Fixed: Assets dir and manifest does not work (#1573)</li> <li>Fixed: Flet CLI crashes if <code>git</code> is not installed (#1581)</li> </ul>"},{"location":"getting-started/changelog/#081","title":"0.8.1","text":"<ul> <li>Fix <code>auth</code> and <code>PubSub</code> imports in <code>page.py</code> and <code>connection.py</code>.</li> <li>Fix broken <code>flet pack</code> command.</li> </ul>"},{"location":"getting-started/changelog/#080","title":"0.8.0","text":"<ul> <li>\ud83d\udcf1\ud83c\udf89 iOS support - build standalone iOS apps in Python:</li> <li>Flet app in App Store to test Flet projects on iOS devices.</li> <li>New <code>--ios</code> switch for <code>flet run</code> command to test Flet app on your iOS device.</li> <li>Testing on iOS guide.</li> <li>serious_python Flutter package to add Python support to a Flutter app.</li> <li>An example of Flutter app combining serious_python package, flet package and your Python program into a ready iOS app.</li> <li>Part of <code>flet</code> package logic moved to a new <code>flet-runtime</code> package. <code>flet</code> package depends on <code>flet-runtime</code>. The new <code>flet-embed</code> package introduced depending on <code>flet-runtime</code> - to run Python apps embedded into Flutter apps.</li> <li>Less annoying re-connecting logic and loading page for mobile Flet apps.</li> <li>Enum parameters for <code>ft.app()</code>s <code>view: ft.AppView</code> and <code>web_renderer: ft.WebRenderer</code> parameters (string values are still supported for backward compatibility), for example:</li> </ul> <pre><code>ft.app(main, view=ft.AppView.WEB_BROWSER, web_renderer=ft.WebRenderer.HTML)\n</code></pre> <ul> <li>Flet packages <code>version</code> is centralized in <code>flet_core.version</code>.</li> <li>\ud83d\udca5 Breaking change: OAuth providers must be imported from <code>flet.auth.providers</code> module, for example:</li> </ul> <pre><code>from flet.auth.providers import GitHubOAuthProvider\n</code></pre> <ul> <li>Added <code>Image.error_content</code> property - fallback content if image cannot be loaded.</li> <li>New <code>BottomSheet</code> properties: <code>dismissible</code>, <code>enable_drag</code>, <code>show_drag_handle</code>, <code>use_safe_area</code> (#1468).</li> <li><code>ListTile.toggle_inputs</code> property - clicking on a list tile should toggle the state of <code>Radio</code>, <code>Checkbox</code> or <code>Switch</code> inside the tile.</li> <li>New <code>page</code> methods for showing/closing overlays: <code>page.open_banner()</code>, <code>page.close_banner()</code>, <code>page.open_dialog()</code>, <code>page.close_dialog()</code>, <code>page.open_bottom_sheet()</code>, <code>page.close_bottom_sheet()</code>.</li> <li>New <code>FletApp</code> properties: <code>reconnect_interval_ms</code>, <code>reconnect_timeout_ms</code>, <code>on_error</code>.</li> <li>New <code>TextField</code> properties: <code>autocorrect</code>, <code>enable_suggestions</code>, <code>smart_dashes_type</code>, <code>smart_quotes_type</code>.</li> <li>New <code>SafeArea</code> control.</li> <li>New <code>SnackBar</code> properties: <code>behavior</code>, <code>dismiss_direction</code>, <code>show_close_icon</code>, <code>close_icon_color</code>, <code>margin</code>, <code>padding</code>, <code>width</code>, <code>elevation</code>.</li> <li>New <code>View.fullscreen_dialog</code> property.</li> <li><code>ft.app()</code> assumes <code>assets_dir=\"assets\"</code> by default.</li> <li>New <code>PaintSweepGradient.rotation</code> property.</li> </ul>"},{"location":"getting-started/changelog/#074","title":"0.7.4","text":"<ul> <li>Added <code>use_color_emoji</code> to <code>ft.app()</code> in <code>flet-pyodide</code> (#1416).</li> </ul>"},{"location":"getting-started/changelog/#073","title":"0.7.3","text":"<ul> <li>Fix missing <code>FLET_APP_WEB</code> declaration in <code>flet-pyodide</code>.</li> </ul>"},{"location":"getting-started/changelog/#072","title":"0.7.2","text":"<ul> <li>Fix: Route change by url is not working if <code>page.theme</code> specified (#1406).</li> <li>Rollback flutter_svg to 1.1.6 to fix regressions in Plotly charts (#1402).</li> <li>Force web server in desktop mode with <code>ft.app(view=ft.FLET_APP_WEB)</code>.</li> </ul>"},{"location":"getting-started/changelog/#071","title":"0.7.1","text":"<ul> <li><code>ButtonStyle</code> with <code>shape</code> or <code>side</code> params failed in flet 0.7.0 (#1390).</li> </ul>"},{"location":"getting-started/changelog/#070","title":"0.7.0","text":"<ul> <li>Programmatically control scroll position and subscribe to scrolling notifications in Page, View, Column, Row, ListView and GridView controls.</li> <li>Material color scheme customization</li> <li>Text theming</li> <li>Scrollbars theming</li> <li>Tabs theming</li> <li>Nested page themes</li> <li>Flutter upgraded to 3.10 with Dart 3.0 required. CanvasKit WASM size reduced from 2.8 to 1.5 MB.</li> <li>Bumped Flutter dependencies: window_manager 0.3.0 \u2192 0.3.2, flutter_markdown 0.6.13 \u2192 0.6.14, markdown 6.0.1 \u2192 7.0.0, file_picker 5.2.5 \u2192 5.3.0, flutter_svg 1.1.6 \u2192 2.0.5, shake 2.1.0 \u2192 2.2.0, fl_chart 0.61.0 \u2192 0.62.0.</li> <li>Color emoji support in web apps with \"canvaskit\" renderer (docs).</li> <li>Add CLI option -m to run as module (#1389).</li> <li>Selectable rich text control (#1386).</li> </ul>"},{"location":"getting-started/changelog/#062","title":"0.6.2","text":"<ul> <li>Fix <code>SnackBar</code> (and other controls) exit animation.</li> <li>Fix <code>Text</code> default style color.</li> </ul>"},{"location":"getting-started/changelog/#061","title":"0.6.1","text":"<ul> <li>Fix regression in <code>AlertDialog</code> and <code>BottomSheet</code> controls (#1344)</li> </ul>"},{"location":"getting-started/changelog/#060","title":"0.6.0","text":"<ul> <li><code>Canvas</code> control (docs).</li> <li>Rich text support in <code>Text</code> control.</li> <li>Added <code>url</code> and <code>url_target</code> to controls with <code>on_click</code> event (#1337)</li> <li>Auto-follow links in <code>Markdown</code> (docs).</li> <li>Capturing web client info: IP and user agent (#1302)</li> <li>Fix: Make non-visual controls working with routing (#1333)</li> <li>Fix: Update <code>page.route</code> if typed in the URL (#1289)</li> </ul>"},{"location":"getting-started/changelog/#052","title":"0.5.2","text":"<ul> <li>Fix: Dispose controls only on session closed event</li> <li>Fix \"There is no current event loop\" error in auth module</li> </ul>"},{"location":"getting-started/changelog/#051","title":"0.5.1","text":"<ul> <li>Fix <code>page</code> reference in <code>will_unmount</code> method.</li> </ul>"},{"location":"getting-started/changelog/#050","title":"0.5.0","text":"<ul> <li>Fixed: Memory usage continues to increase. (#1223)</li> <li>Fixed: possible memory leak (#969)</li> <li>Color values can contain opacity, e.g. <code>color=red,0.5</code> or <code>ft.colors.with_opacity(0.5, \"red\")</code></li> <li>1<sup>st</sup> class Flet charts based on fl_chart package (#1255)</li> <li>Pyodide 0.23</li> <li>Use named loggers in Python (#1157)</li> <li>Fix Contribution guide as PDM is no longer used (#1124)</li> <li>Added focus() method, focus and blur events to Elevated, Outlined, Text and Icon buttons (#1079)</li> <li>New Card props: color, shadow_color, surface_tint_color (#1078)</li> <li>Added WindowDragArea.maximizable property (#1077)</li> <li>Added Container.blur and Container.shadow properties (#1076)</li> <li>Add template for Q&amp;A discussions (#1070)</li> </ul>"},{"location":"getting-started/changelog/#042","title":"0.4.2","text":"<ul> <li>Fix reading versioninfo for PyInstaller 5.8.0</li> <li>Fix <code>Dropdown.disable</code> property</li> </ul>"},{"location":"getting-started/changelog/#041","title":"0.4.1","text":"<ul> <li>Slider.round to round slider value on a label</li> <li>Fix page.client_storage.get_keys() timeout </li> <li>Fix encode() import in PyInstaller integration</li> <li>Fix \"ConnectionAbortedError\" error on Windows</li> <li>Consistent licensing across the code - Apache 2.0</li> <li>Fix assets loading in a sub-directory app (#1019)</li> <li>Add --distpath option to flet pack and flet publish commands (#1018)</li> <li>Updating manifest.json when using flet publish (#1014)</li> <li>Fix \"Address already in use\" error on flet run hot reload (#1007)</li> <li>Force Python sub-process to run with UTF-8 encoding (#1002)</li> <li>Fix: View with content crashes in some routing scenarios (#1001)</li> </ul>"},{"location":"getting-started/changelog/#040","title":"0.4.0","text":"<ul> <li>Changed re-connection logic to make hot reload work (#971)</li> <li>Pyodide publishing fixes and improvements (#953)</li> <li>feat: Add PaddingValue to init.py (#936)</li> <li>Standalone Flet web apps with Pyodide (#913)</li> <li>modified <code>tooltip</code> attribute from <code>prefere*</code> to <code>prefer*</code> (#909)</li> <li>Fix unicode encoding in <code>FletTcpSocketServerProtocol</code></li> <li>Fix relative assets path in desktop app</li> <li>PDM changed to Poetry</li> <li>Add <code>--hidden-import</code> option to <code>flet pack</code> command</li> <li>Add transparancy to matplotlib (#889)</li> <li>Replace Fletd server for desktop apps with a light-weight Python shim (#838)</li> <li>add default values in Border dataclass (#883)</li> <li>Fix for issue in control.py when checking add command (#835)</li> <li>Fix async pubsub (#868)</li> <li>add: Border, BorderSide, Scale Offset, Rotate to <code>__init__.py</code> (#866)</li> <li>Loading images from a local file (#817)</li> <li>Asyncio support (#799)</li> <li>Set filled=True when setting bgcolor in TextField (#807)</li> <li>Page transition without animation (#809)</li> </ul>"},{"location":"getting-started/changelog/#032","title":"0.3.2","text":"<ul> <li>Fix <code>flet pack</code> command on Windows and macOS (#795)</li> </ul>"},{"location":"getting-started/changelog/#031","title":"0.3.1","text":"<ul> <li>Fixed Flutter package CHANGELOG and README.</li> </ul>"},{"location":"getting-started/changelog/#030","title":"0.3.0","text":"<ul> <li><code>flet pack</code> CLI to create app bundles with custom icons and metadata (#770)</li> <li>Control comments (#681)</li> <li>Fix MaterialState error in ButtonStyle (#689)</li> <li>Flet CLI moved into separate module (#679)</li> <li>Added BorderRadius to <code>__init__.py</code> (#691)</li> <li>Added dense property to TextField and Dropdown controls (#696)</li> <li>Correctly handle control replacement (#710)</li> <li>Fix \"replace\" when moving children in the collection (#711)</li> <li>Remove hard-coded colors in Markdown default code theme (#731)</li> <li>Authorization should allow to override, such as request_token() methods (#776)</li> </ul>"},{"location":"getting-started/changelog/#024","title":"0.2.4","text":"<ul> <li>Use correct Flet viewer path when installed from a source package (#675)</li> <li>add <code>ControlEvent</code> to <code>__init__.py</code> (#657)</li> <li>fix: handle a few corner cases (#503)</li> </ul>"},{"location":"getting-started/changelog/#022","title":"0.2.2","text":"<ul> <li>Make <code>Control.offset</code> work without animation enabled (#632)</li> <li>Added <code>Dropdown.alignment</code> property (#630)</li> <li>Remove beartype runtime check for all <code>value</code> properties</li> <li>Fix <code>page.scroll</code> to allow None and strings</li> <li>Literals to Enums (#626)</li> <li><code>gapless_playback</code> is <code>True</code> by default for base64 images</li> <li>Ability to change border shape of FAB control (#621)</li> <li>Added Slider's <code>on_change_start</code> and <code>on_change_end</code> events (#620)</li> <li>DataTable control: 1-to-1 mapping to Flutter (#583)</li> <li>Implemented <code>page.can_launch_url()</code> (#582)</li> <li>Update project changelog from very beginning (#581)</li> <li>Publish pre releases to pypi.org (#579)</li> <li>Theming Slider control (#573)</li> </ul>"},{"location":"getting-started/changelog/#0165","title":"0.1.65","text":"<ul> <li>Fixed: Floating Action Button now showing on top left (#567)</li> </ul>"},{"location":"getting-started/changelog/#0164","title":"0.1.64","text":"<ul> <li>Using variable fonts (#21)</li> <li>Old flet client app versions do not launch on Mac (#161)</li> <li>NavigationBar control (#193)</li> <li><code>ResponsiveRow</code> control (#227)</li> <li>Add code syntax highlighter to markdown (#294)</li> <li>feature: add mouse scroll wheel event (#354)</li> <li>Tooltip class (#367)</li> <li>BottomSheet control (#483)</li> <li>Fixed: Calling <code>update()</code> inside <code>Control.did_mount()</code> causes deadlock (#489)</li> <li>Add <code>page.window_maximizable</code> (#494)</li> <li>Add an ability to change font family of <code>TextField</code> (#511)</li> <li>Feature: Theming Switch and Checkbox component (#523)</li> <li>Change shape of AlertDialog (#537)</li> <li>Fixed: Saving and retreiving a string value from client storage adds quotation marks (#545)</li> </ul>"},{"location":"getting-started/changelog/#0163","title":"0.1.63","text":"<ul> <li>Matplotlib and Plotly Charts (#509)</li> <li>make control a cooperative object (#490)</li> </ul>"},{"location":"getting-started/changelog/#0162","title":"0.1.62","text":"<ul> <li>GestureDetector and other fixes (#459)</li> <li>removed all problems except dart:html problem because it needs material html kind of thing (#461)</li> <li>fix: ensure correct version is fetched in dev mode (#443)</li> <li>Fix controls setter for empty list input (#454)</li> <li>make ink=True behavior consistent with ink=False (#427)</li> </ul>"},{"location":"getting-started/changelog/#0161","title":"0.1.61","text":"<ul> <li>Audio control (#425)</li> </ul>"},{"location":"getting-started/changelog/#0160_1","title":"0.1.60","text":"<ul> <li>Authentication (#335)</li> <li>Fix Flutter/Dart warnings (#401, #369, #372)</li> </ul>"},{"location":"getting-started/changelog/#0159","title":"0.1.59","text":"<ul> <li>Fixes for Gallery (#351)</li> <li>add data prop to PopupMenuItem #327</li> </ul>"},{"location":"getting-started/changelog/#0158","title":"0.1.58","text":"<ul> <li>Client storage (#288)</li> </ul>"},{"location":"getting-started/changelog/#0157","title":"0.1.57","text":"<ul> <li>Container fixes (#275)</li> <li>add error fix for those working with a source package (#272)</li> </ul>"},{"location":"getting-started/changelog/#0156","title":"0.1.56","text":"<ul> <li>Windows: Clear FilePicker state before opening the dialog as it's blocking</li> <li>Reconnect with sessionID on desktop/mobile</li> </ul>"},{"location":"getting-started/changelog/#0155","title":"0.1.55","text":"<ul> <li>FilePicker and uploads (#258)</li> </ul>"},{"location":"getting-started/changelog/#0154","title":"0.1.54","text":"<p>Fix ElevatedButton regression (9540beb)</p>"},{"location":"getting-started/changelog/#0153","title":"0.1.53","text":"<ul> <li>Desktop Flet app can be started with a hidden window</li> <li>New <code>page</code> properties to control window appearance and behavior</li> <li>New <code>Stack</code> properties</li> <li>Hot reload</li> <li>Platform details (<code>page.web</code>, <code>page.platform</code>)</li> <li>Customisable route transitions</li> </ul>"},{"location":"getting-started/changelog/#0152","title":"0.1.52","text":"<ul> <li><code>RouteChangeEvent</code>, <code>ViewPopEvent</code></li> </ul>"},{"location":"getting-started/changelog/#0151","title":"0.1.51","text":"<ul> <li>Fix container click event data object (#198)</li> <li>Fix #196 bgcolor has no effect if FAB has a custom content (#196)</li> </ul>"},{"location":"getting-started/changelog/#0150_1","title":"0.1.50","text":"<ul> <li>Linux ARM64 support for Flet runner app (#189)</li> <li>Bugfix: Image control attribute src_base64 accepts str now (#187)</li> <li><code>ContainerTapEventData</code></li> <li>Accessibility fixes (#179)</li> <li>Fix button style updates</li> </ul>"},{"location":"getting-started/changelog/#0149","title":"0.1.49","text":"<ul> <li>Fix #173 - ValueError: mutable default (#173)</li> </ul>"},{"location":"getting-started/changelog/#0148","title":"0.1.48","text":"<ul> <li>Fix container blend mode</li> </ul>"},{"location":"getting-started/changelog/#0147","title":"0.1.47","text":"<ul> <li>Remove <code>SnackBar.elevation</code></li> <li>Implicit animations and AnimatedSwitcher control (#162)</li> <li>Markdown and ShaderMask controls (#160)</li> <li>Add slugify to utils (#154)</li> </ul>"},{"location":"getting-started/changelog/#0146","title":"0.1.46","text":"<ul> <li>New <code>Container</code> properties.</li> <li>New <code>ElevatedButton</code>, <code>OutlinedButton</code>, <code>TextButton</code> properties.</li> <li>New <code>IconButton</code> properties.</li> <li>New <code>ListTile</code> properties.</li> <li>New <code>Theme</code> properties.</li> <li><code>hidden</code> value for <code>Column</code>, <code>Page</code>, <code>View</code>, <code>Row</code> and <code>View</code> controls - to enable scrolling but hide a scrollbar.</li> <li>New <code>TextField</code> and <code>Dropdown</code> properties.</li> <li>New <code>TextField</code> properties</li> <li>Fixed https://github.com/flet-dev/flet/issues/138 page.width and page.height are 0 on the first page load</li> <li>Fixed https://github.com/flet-dev/flet/issues/77 Allow partial theme updates</li> <li>Fixed https://github.com/flet-dev/flet/issues/140 Container on_click callback breaks containers without explicit size</li> <li>Fixed https://github.com/flet-dev/flet/issues/30 Assertion \"lookup_hash_table\" fails on ToDo App example</li> <li>Flutter SDK switched to <code>beta</code> channel.</li> <li>Fixed https://github.com/flet-dev/flet/issues/98 Changing app host/IP binding</li> </ul>"},{"location":"getting-started/changelog/#0143","title":"0.1.43","text":"<ul> <li>Switching between \"hash\" and \"path\" routing URL strategy (#110)</li> </ul>"},{"location":"getting-started/changelog/#0142","title":"0.1.42","text":"<ul> <li>Navigation and Routing (#95)</li> </ul>"},{"location":"getting-started/changelog/#0141","title":"0.1.41","text":"<ul> <li>Fix draggable.content_when_dragging</li> </ul>"},{"location":"getting-started/changelog/#0140_1","title":"0.1.40","text":"<ul> <li>Drag and Drop (https://github.com/flet-dev/flet/issues/62)</li> <li>Any control can be positioned absolutely inside Stack (https://github.com/flet-dev/flet/issues/60)</li> <li>Clickable Container (https://github.com/flet-dev/flet/issues/59)</li> <li>Added <code>page.pwa</code> property to detect if an app is running as PWA (https://github.com/flet-dev/flet/issues/58)</li> </ul>"},{"location":"getting-started/changelog/#0139","title":"0.1.39","text":"<ul> <li>Fix <code>UserControl._build()</code> call (https://github.com/flet-dev/flet/issues/52)</li> </ul>"},{"location":"getting-started/changelog/#0138","title":"0.1.38","text":"<ul> <li>Window Manager fix for Linux (https://github.com/flet-dev/flet/issues/44)</li> </ul>"},{"location":"getting-started/changelog/#0137","title":"0.1.37","text":"<ul> <li>Controlling application window (https://github.com/flet-dev/flet/issues/39)</li> </ul>"},{"location":"getting-started/changelog/#0136","title":"0.1.36","text":"<ul> <li>Page events allow multiple subscribers (https://github.com/flet-dev/flet/issues/38)</li> <li>page.rtl to control text directionality (https://github.com/flet-dev/flet/issues/37)</li> </ul>"},{"location":"getting-started/changelog/#0135","title":"0.1.35","text":"<ul> <li>Fix web_renderer arg</li> <li>Default webrenderer is canvaskit</li> </ul>"},{"location":"getting-started/changelog/#0134","title":"0.1.34","text":"<ul> <li>support \"assets\" dir for \"onefile\" PyInstaller</li> <li>Try packaging bin as data</li> <li>PyInstaller integration (https://github.com/flet-dev/flet/issues/34)</li> </ul>"},{"location":"getting-started/changelog/#0133","title":"0.1.33","text":"<ul> <li>Update control itself when isolated (https://github.com/flet-dev/flet/issues/31)</li> </ul>"},{"location":"getting-started/changelog/#0132","title":"0.1.32","text":"<ul> <li>Linux runner (https://github.com/flet-dev/flet/issues/29)</li> </ul>"},{"location":"getting-started/changelog/#0131","title":"0.1.31","text":"<ul> <li>User control (https://github.com/flet-dev/flet/issues/26)</li> </ul>"},{"location":"getting-started/changelog/#0130_1","title":"0.1.30","text":"<ul> <li>Upgraded to Flutter 3.0.2 (https://github.com/flet-dev/flet/issues/23)</li> <li>Custom fonts (https://github.com/flet-dev/flet/issues/22)</li> </ul>"},{"location":"getting-started/changelog/#0129","title":"0.1.29","text":"<ul> <li>PubSub (https://github.com/flet-dev/flet/issues/19)</li> </ul>"},{"location":"getting-started/changelog/#0128","title":"0.1.28","text":"<ul> <li>Support for Python 3.7 (https://github.com/flet-dev/flet/issues/16)</li> <li>Update logo-inkscape.svg</li> <li>Add executables to artifacts again</li> <li>Upload Fletd archives only, without binaries</li> <li>Fix links in Python SDK README (https://github.com/flet-dev/flet/issues/15)</li> </ul>"},{"location":"getting-started/changelog/#0127","title":"0.1.27","text":"<ul> <li>Fixed #10 (https://github.com/flet-dev/flet/issues/14)</li> <li>Row, Column and ListView spacing and scrolling improvements (https://github.com/flet-dev/flet/issues/13)</li> <li>Installing specific versions of Fletd and Flet apps for Python source distro (https://github.com/flet-dev/flet/issues/12)</li> <li>focus() method for TextField and Dropdown controls (https://github.com/flet-dev/flet/issues/11)</li> </ul>"},{"location":"getting-started/changelog/#0126","title":"0.1.26","text":"<ul> <li>Upload Flet client app to GitHub releases</li> <li>.focus() method for TextField and Dropdown</li> <li>Update fletd name to get download working (https://github.com/flet-dev/flet/issues/7)</li> </ul>"},{"location":"getting-started/changelog/#0125","title":"0.1.25","text":"<ul> <li>Sprint 1 (https://github.com/flet-dev/flet/pull/6)</li> </ul>"},{"location":"getting-started/changelog/#0124","title":"0.1.24","text":"<ul> <li>Fix expand for TextField and Dropdown</li> </ul>"},{"location":"getting-started/changelog/#0123","title":"0.1.23","text":"<ul> <li>app_store_connect_api_key with base64 key</li> <li>index.html with loading animation</li> <li>Upgrade Flutter 3.0.1</li> <li>Update AndroidManifest.xml</li> <li>Build to client's \"build\" folder</li> <li>Update Fastlane</li> <li>Building and publishing iOS Flutter app on AppVeyor</li> </ul>"},{"location":"getting-started/changelog/#0122_1","title":"0.1.22","text":"<ul> <li>TextField and Dropdown unlim size fix</li> <li>Python samples cleanup</li> <li>Merge pull request #5 from flet-dev/s1-ios</li> <li>Config flutter</li> <li>Fix FLET_PACKAGE_VERSION</li> <li>Fix iOS building for PR builds</li> <li>Restore complete yaml</li> </ul>"},{"location":"getting-started/changelog/#0120_1","title":"0.1.20","text":"<ul> <li>Row python examples</li> <li>More control examples</li> <li>Text max_lines</li> </ul>"},{"location":"getting-started/changelog/#0119","title":"0.1.19","text":"<ul> <li>Fix setting clipboard</li> </ul>"},{"location":"getting-started/changelog/#0118","title":"0.1.18","text":"<ul> <li>ListTile</li> <li>Card control</li> <li>Slight protocol optimization</li> <li>Control._set_attr_json</li> <li>Tabs selected_index</li> <li>Check collection controls for visibility</li> <li>NavigationRail selected_index</li> <li>NavigationRail control</li> <li>AppBar, NavigationRail - Python</li> </ul>"},{"location":"getting-started/changelog/#0117","title":"0.1.17","text":"<ul> <li>PopupMenuButton control</li> <li>Dividers example</li> <li>Filled buttons, dividers</li> <li>Filled elevated button</li> <li>Upgraded to Flutter 3.0</li> <li>Progress indicator samples</li> <li>Fix page size parsing</li> <li>page.content -&gt; page.controls</li> <li>Expand can be True</li> <li>FAB</li> <li>bgColor for ImageButton</li> <li>CircleAvatar control added</li> <li>PWA icons all good</li> <li>Temp remove icons</li> <li>Large logo on an icon</li> <li>Icons updated</li> <li>Exponential reconnection logic, PWA icons</li> <li>Re-connecting flow</li> </ul>"},{"location":"getting-started/changelog/#0116","title":"0.1.16","text":"<ul> <li>Use canvaskit even on mobile for now</li> <li>Upgrade to Flutter 2.10.5</li> <li>Multiline textboxes done right</li> </ul>"},{"location":"getting-started/changelog/#0114","title":"0.1.14","text":"<ul> <li>Create a separate package for Alpine</li> </ul>"},{"location":"getting-started/changelog/#0113","title":"0.1.13","text":"<ul> <li>Add package for Alpine distro</li> </ul>"},{"location":"getting-started/changelog/#0112","title":"0.1.12","text":"<ul> <li>More general wheel package tags for Linux</li> </ul>"},{"location":"getting-started/changelog/#0111","title":"0.1.11","text":"<ul> <li>Icon browser done</li> <li>autofocus, on_focus, on_blur to Python classes</li> <li>Default Flet color theme</li> <li>autofocus, focus, blur to all form controls</li> <li>Remove tooltip from iconbutton</li> <li>ignoreChange sometimes</li> <li>Update container.dart</li> <li>Clipboard</li> <li>Make tooltip delay longer</li> <li>Tooltip property added to all visible controls</li> <li>Icons browser with outlined buttons</li> </ul>"},{"location":"getting-started/changelog/#0110_1","title":"0.1.10","text":"<ul> <li>GridView child_aspect_ratio</li> <li>Dynamic lazy building ListView and GridView controls</li> <li>Alignment parsing fixed</li> </ul>"},{"location":"getting-started/changelog/#017","title":"0.1.7","text":"<ul> <li>App icons changed for web, windows and macos</li> </ul>"},{"location":"getting-started/changelog/#015","title":"0.1.5","text":"<ul> <li>Open Flet client on Windows and MacOS only</li> </ul>"},{"location":"getting-started/changelog/#014","title":"0.1.4","text":"<ul> <li>mkdir server/server/content</li> </ul>"},{"location":"getting-started/create-flet-app/","title":"Creating a new Flet app","text":"<p>Create a new directory (or directory with <code>pyproject.toml</code> already exists if initialized with <code>poetry</code> or <code>uv</code>) and switch into it.</p> <p>To create a new \"minimal\" Flet app run the following command:</p> uvpippoetry <pre><code>uv run flet create\n</code></pre> <pre><code>flet create\n</code></pre> <pre><code>poetry run flet create\n</code></pre> <p>Note</p> <p>Any existing <code>README.md</code> or <code>pyproject.toml</code> (for example, created by <code>uv init</code> or <code>poetry init</code>)  will be replaced by the one created by <code>flet create</code> command.</p> <p>The command will create the following directory structure:</p> <pre><code>\ud83d\udcc4 README.md\n\ud83d\udcc4 pyproject.toml\n\ud83d\udcc1 src\n\u251c\u2500\u2500 \ud83d\udcc1 assets\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 icon.png\n\u2514\u2500\u2500 \ud83d\udcc4 main.py # (1)!\n\ud83d\udcc1 storage\n\u251c\u2500\u2500 \ud83d\udcc4 data\n\u2514\u2500\u2500 \ud83d\udcc4 temp\n</code></pre> <ol> <li>Contains a simple Flet program.      It has <code>main()</code> function where you would add UI elements (controls) to a page or a window.      The application ends with a <code>ft.run()</code> function which initializes the Flet app and runs <code>main()</code>.</li> </ol> <p>You can find more information about <code>flet create</code> command here.</p> <p>Now let's see Flet in action by running the app!</p>"},{"location":"getting-started/custom-controls/","title":"Custom Controls","text":"<p>While Flet provides 100+ built-in controls that can be used on their own, the real beauty of programming with Flet is that all those controls can be utilized for creating your own reusable UI components using Python object-oriented programming concepts.</p> <p>You can create custom controls in Python by styling and/or combining existing Flet controls.</p>"},{"location":"getting-started/custom-controls/#styled-controls","title":"Styled controls","text":"<p>The most simple custom control you can create is a styled control, for example, a button of a certain color and behaviour that will be used multiple times throughout your app.</p> <p>To create a styled control, you need to create a new class in Python that inherits from the Flet control you are going to customize, <code>ElevatedButton</code> in this case:</p> <p><pre><code>class MyButton(ft.ElevatedButton):\n    def __init__(self, text):\n        super().__init__()\n        self.bgcolor = ft.Colors.ORANGE_300\n        self.color = ft.Colors.GREEN_800\n        self.text = text     \n</code></pre> Your control has a constructor to customize properties and events and pass custom data. Note that you must call <code>super().__init__()</code> in your own constructor to have access to the properties and methods of the Flet control from which you inherit.</p> <p>Now you can use your brand-new control in your app:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(MyButton(text=\"OK\"), MyButton(text=\"Cancel\"))\n\nft.run(main)\n</code></pre> <p></p> <p>See example of using styled controls in Calculator App tutorial.</p>"},{"location":"getting-started/custom-controls/#handling-events","title":"Handling events","text":"<p>Similar to properties, you can pass event handlers as parameters into your custom control class constructor:</p> <pre><code>import flet as ft\n\nclass MyButton(ft.ElevatedButton):\n    def __init__(self, text, on_click):\n        super().__init__()\n        self.bgcolor = ft.Colors.ORANGE_300\n        self.color = ft.Colors.GREEN_800\n        self.text = text\n        self.on_click = on_click\n\ndef main(page: ft.Page):\n\n    def ok_clicked(e):\n        print(\"OK clicked\")\n\n    def cancel_clicked(e):\n        print(\"Cancel clicked\")\n\n    page.add(\n        MyButton(text=\"OK\", on_click=ok_clicked),\n        MyButton(text=\"Cancel\", on_click=cancel_clicked),\n    )\n\nft.run(main)\n</code></pre>"},{"location":"getting-started/custom-controls/#composite-controls","title":"Composite controls","text":"<p>Composite custom controls inherit from container controls such as <code>Column</code>, <code>Row</code>, <code>Stack</code> or even <code>View</code> to combine multiple Flet controls. The example below is a <code>Task</code> control that can be used in a To-Do app:</p> <pre><code>import flet as ft\n\nclass Task(ft.Row):\n    def __init__(self, text):\n        super().__init__()\n        self.text_view = ft.Text(text)\n        self.text_edit = ft.TextField(text, visible=False)\n        self.edit_button = ft.IconButton(icon=ft.Icons.EDIT, on_click=self.edit)\n        self.save_button = ft.IconButton(\n            visible=False, icon=ft.Icons.SAVE, on_click=self.save\n        )\n        self.controls = [\n            ft.Checkbox(),\n            self.text_view,\n            self.text_edit,\n            self.edit_button,\n            self.save_button,\n        ]\n\n    def edit(self, e):\n        self.edit_button.visible = False\n        self.save_button.visible = True\n        self.text_view.visible = False\n        self.text_edit.visible = True\n        self.update()\n\n    def save(self, e):\n        self.edit_button.visible = True\n        self.save_button.visible = False\n        self.text_view.visible = True\n        self.text_edit.visible = False\n        self.text_view.value = self.text_edit.value\n        self.update()\n\ndef main(page: ft.Page):\n    page.add(\n        Task(text=\"Do laundry\"),\n        Task(text=\"Cook dinner\"),\n    )\n\nft.run(main)\n</code></pre> <p></p> <p>You can find more examples of composite custom controls in community examples and flet-contrib repos.</p>"},{"location":"getting-started/custom-controls/#life-cycle-methods","title":"Life-cycle methods","text":"<p>Custom controls provide life-cycle \"hook\" methods that you may need to use for different use cases in your app.</p>"},{"location":"getting-started/custom-controls/#build","title":"<code>build()</code>","text":"<p><code>build()</code> method is called when the control is being created and assigned its <code>self.page</code>. </p> <p>Override <code>build()</code> method if you need to implement logic that cannot be executed in control's constructor because it requires access to the <code>self.page</code>. For example, choose the right icon depending on <code>self.page.platform</code> for your adaptive app. </p>"},{"location":"getting-started/custom-controls/#did_mount","title":"<code>did_mount()</code>","text":"<p><code>did_mount()</code> method is called after the control is added to the page and assigned transient <code>uid</code>.</p> <p>Override <code>did_mount()</code> method if you need to implement logic that needs to be executed after the control was added to the page, for example Weather widget which calls Open Weather API every minute to update itself with the new weather conditions.</p>"},{"location":"getting-started/custom-controls/#will_unmount","title":"<code>will_unmount()</code>","text":"<p><code>will_unmount()</code> method is called before the control is removed from the page.</p> <p>Override <code>will_unmount()</code> method to execute clean-up code.</p>"},{"location":"getting-started/custom-controls/#before_update","title":"<code>before_update()</code>","text":"<p><code>before_update()</code> method is called every time when the control is being updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"},{"location":"getting-started/custom-controls/#isolated-controls","title":"Isolated controls","text":"<p>Custom control has <code>is_isolated</code> property which defaults to <code>False</code>.</p> <p>If you set <code>is_isolated</code> to <code>True</code>, your control will be isolated from outside layout, i.e. when <code>update()</code> method is called for the parent control, the control itself will be updated but any changes to the controls' children are not included into the update digest. Isolated controls should call <code>self.update()</code> to push its changes to a Flet page.</p> <p>As a best practice, any custom control that calls <code>self.update()</code> inside its class methods should be isolated.</p> <p>In the above examples, simple styled <code>MyButton</code> doesn't need to be isolated, but the <code>Task</code> should be:</p> <pre><code>class Task(ft.Row):\n    def __init__(self, text):\n        super().__init__()\n\n    def is_isolated(self):\n        return True\n</code></pre>"},{"location":"getting-started/displaying-data/","title":"Displaying data","text":""},{"location":"getting-started/displaying-data/#text","title":"Text","text":"<p><code>Text</code> control is used to output textual data. Its main properties are <code>value</code> and <code>size</code>, but it also has a number of formatting properties to control its appearance. For example:</p> <p><pre><code>t = ft.Text(\n    value=\"This is a Text control sample\",\n    size=30,\n    color=\"white\",\n    bgcolor=\"pink\",\n    weight=\"bold\",\n    italic=True,\n)\npage.add(t)\n</code></pre> </p>"},{"location":"getting-started/displaying-data/#text-styles","title":"Text styles","text":"<p>[TBD] Fonts? Variable weight? Built-in styles with customization. TextField class description.</p>"},{"location":"getting-started/displaying-data/#icon","title":"Icon","text":"<ul> <li>Icons list</li> <li>Link to an app</li> </ul>"},{"location":"getting-started/displaying-data/#image","title":"Image","text":"<p>Note about CORS Side-loading assets HTML renderer in web to display all formats what formats are supported?</p> <p>in the desktop version it does support jpeg, jpg, png in the web version it only supports png  Could you try using html renderer for the web? https://flet.dev/docs/controls/text/#using-system-fonts Reading this I think \"html\" renderer must support any format supported by the browser: https://docs.flutter.dev/development/platform-integration/web/web-images</p>"},{"location":"getting-started/flet-controls/","title":"Flet Controls","text":"<p>User interface is made of Controls (aka widgets). To make controls visible to a user they must be added to a <code>Page</code> or inside other controls. Page is the top-most control. Nesting controls into each other could be represented as a tree with Page as a root.</p> <p>Controls are just regular Python classes. Create control instances via constructors with parameters matching their properties, for example:</p> <pre><code>t = ft.Text(value=\"Hello, world!\", color=\"green\")\n</code></pre> <p>To display control on a page add it to <code>controls</code> list of a Page and call <code>page.update()</code> to send page changes to a browser or desktop client:</p> <p><pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    t = ft.Text(value=\"Hello, world!\", color=\"green\")\n    page.controls.append(t)\n    page.update()\n\nft.run(main)\n</code></pre> </p> <p>::note In the following examples we will be showing just the contents of <code>main</code> function. ::</p> <p>You can modify control properties and the UI will be updated on the next <code>page.update()</code>:</p> <pre><code>t = ft.Text()\npage.add(t) # it's a shortcut for page.controls.append(t) and then page.update()\n\nfor i in range(10):\n    t.value = f\"Step {i}\"\n    page.update()\n    time.sleep(1)\n</code></pre> <p>Some controls are \"container\" controls (like Page) which could contain other controls. For example, <code>Row</code> control allows arranging other controls in a row one-by-one:</p> <pre><code>page.add(\n    ft.Row(controls=[\n        ft.Text(\"A\"),\n        ft.Text(\"B\"),\n        ft.Text(\"C\")\n    ])\n)\n</code></pre> <p>or <code>TextField</code> and <code>ElevatedButton</code> next to it:</p> <pre><code>page.add(\n    ft.Row(controls=[\n        ft.TextField(label=\"Your name\"),\n        ft.ElevatedButton(text=\"Say my name!\")\n    ])\n)\n</code></pre> <p><code>page.update()</code> is smart enough to send only the changes made since its last call, so you can add a couple of new controls to the page, remove some of them, change other controls' properties and then call <code>page.update()</code> to do a batched update, for example:</p> <pre><code>for i in range(10):\n    page.controls.append(ft.Text(f\"Line {i}\"))\n    if i &gt; 4:\n        page.controls.pop(0)\n    page.update()\n    time.sleep(0.3)\n</code></pre> <p>Some controls, like buttons, could have event handlers reacting on a user input, for example <code>ElevatedButton.on_click</code>:</p> <pre><code>def button_clicked(e):\n    page.add(ft.Text(\"Clicked!\"))\n\npage.add(ft.ElevatedButton(text=\"Click me\", on_click=button_clicked))\n</code></pre> <p>and more advanced example for a simple To-Do:</p> <p><pre><code>import flet as ft\n\ndef main(page):\n    def add_clicked(e):\n        page.add(ft.Checkbox(label=new_task.value))\n        new_task.value = \"\"\n        new_task.focus()\n        new_task.update()\n\n    new_task = ft.TextField(hint_text=\"What's needs to be done?\", width=300)\n    page.add(ft.Row([new_task, ft.ElevatedButton(\"Add\", on_click=add_clicked)]))\n\nft.run(main)\n</code></pre> </p> <p>::info Flet implements imperative UI model where you \"manually\" build application UI with stateful controls and then mutate it by updating control properties. Flutter implements declarative model where UI is automatically re-built on application data changes. Managing application state in modern frontend applications is inherently complex task and Flet's \"old-school\" approach could be more attractive to programmers without frontend experience. ::</p>"},{"location":"getting-started/flet-controls/#visible-property","title":"<code>visible</code> property","text":"<p>Every control has <code>visible</code> property which is <code>true</code> by default - control is rendered on the page. Setting <code>visible</code> to <code>false</code> completely prevents control (and all its children if any) from rendering on a page canvas. Hidden controls cannot be focused or selected with a keyboard or mouse and they do not emit any events.</p>"},{"location":"getting-started/flet-controls/#disabled-property","title":"<code>disabled</code> property","text":"<p>Every control has <code>disabled</code> property which is <code>false</code> by default - control and all its children are enabled. <code>disabled</code> property is mostly used with data entry controls like <code>TextField</code>, <code>Dropdown</code>, <code>Checkbox</code>, buttons. However, <code>disabled</code> could be set to a parent control and its value will be propagated down to all children recursively.</p> <p>For example, if you have a form with multiple entry control you can set <code>disabled</code> property for each control individually:</p> <pre><code>first_name = ft.TextField()\nlast_name = ft.TextField()\nfirst_name.disabled = True\nlast_name.disabled = True\npage.add(first_name, last_name)\n</code></pre> <p>or you can put form controls into container, e.g. <code>Column</code> and then set <code>disabled</code> for the column:</p> <pre><code>first_name = ft.TextField()\nlast_name = ft.TextField()\nc = ft.Column(controls=[\n    first_name,\n    last_name\n])\nc.disabled = True\npage.add(c)\n</code></pre>"},{"location":"getting-started/flet-controls/#buttons","title":"Buttons","text":"<p><code>Button</code> is the most essential input control which generates <code>click</code> event when pressed:</p> <pre><code>btn = ft.ElevatedButton(\"Click me!\")\npage.add(btn)\n</code></pre> <p></p> <p>All events generated by controls on a web page are continuously sent back to your script, so how do you respond to a button click?</p>"},{"location":"getting-started/flet-controls/#event-handlers","title":"Event handlers","text":"<p>Buttons with events in \"Counter\" app:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.IconButton(ft.Icons.REMOVE, on_click=minus_click),\n                txt_number,\n                ft.IconButton(ft.Icons.ADD, on_click=plus_click),\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n        )\n    )\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"getting-started/flet-controls/#textbox","title":"Textbox","text":"<p>Flet provides a number of controls for building forms: TextField, Checkbox, Dropdown, ElevatedButton.</p> <p>Let's ask a user for a name:</p> <pre><code>import flet as ft\n\ndef main(page):\n    def btn_click(e):\n        if not txt_name.value:\n            txt_name.error_text = \"Please enter your name\"\n            page.update()\n        else:\n            name = txt_name.value\n            page.clean()\n            page.add(ft.Text(f\"Hello, {name}!\"))\n\n    txt_name = ft.TextField(label=\"Your name\")\n\n    page.add(txt_name, ft.ElevatedButton(\"Say hello!\", on_click=btn_click))\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"getting-started/flet-controls/#checkbox","title":"Checkbox","text":"<p>The Checkbox control provides you with various properties and events emmiters for ease of use.</p> <p>Let's create a one checkbox ToDo:</p> <pre><code>import flet as ft\n\n\ndef main(page):\n    def checkbox_changed(e):\n        output_text.value = (\n            f\"You have learned how to ski :  {todo_check.value}.\"\n        )\n        page.update()\n\n    output_text = ft.Text()\n    todo_check = ft.Checkbox(label=\"ToDo: Learn how to use ski\", value=False, on_change=checkbox_changed)\n    page.add(todo_check, output_text)\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"getting-started/flet-controls/#dropdown","title":"Dropdown","text":"<pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    def button_clicked(e):\n        output_text.value = f\"Dropdown value is:  {color_dropdown.value}\"\n        page.update()\n\n    output_text = ft.Text()\n    submit_btn = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    color_dropdown = ft.Dropdown(\n        width=100,\n        options=[\n            ft.dropdown.Option(\"Red\"),\n            ft.dropdown.Option(\"Green\"),\n            ft.dropdown.Option(\"Blue\"),\n        ],\n    )\n    page.add(color_dropdown, submit_btn, output_text)\n\nft.run(main)\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#python-version","title":"Python version","text":"<p>Flet requires Python 3.10 or later.</p>"},{"location":"getting-started/installation/#supported-operating-systems","title":"Supported Operating Systems","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>Flet supports macOS 11 (Big Sur) or later.</p>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Flet supports 64-bit version of Microsoft Windows 10 or later.</p>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Flet supports Debian Linux 11 or later and Ubuntu Linux 20.04 LTS or later.</p> <p>There are additional prerequisites when developing and running Flet apps on Linux.</p> Windows Subsystem for Linux (WSL) <p>Flet apps can be run on WSL 2 (Windows Subsystem for Linux 2).</p> <p>However, if you are getting <code>cannot open display</code> error follow this  guide for troubleshooting.</p>"},{"location":"getting-started/installation/#creating-a-virtual-environment-venv","title":"Creating a Virtual environment (venv)","text":"<p>We recommend using a virtual environment for your Flet projects to keep dependencies  isolated and avoid conflicts with your other Python projects.</p> <p>First, create a new directory for your Flet project and switch into it:</p> <pre><code>mkdir my-app\ncd my-app\n</code></pre> <p>Next, create and activate a virtual environment:</p> uvpippoetry <p>uv is \"An extremely fast Python package and project manager, written in Rust\".</p> <p>Install <code>uv</code> if you haven't already, then run the following commands:</p> <pre><code>uv init --python='&gt;=3.10' \nuv venv\nsource .venv/bin/activate # (1)!\n</code></pre> <ol> <li>If you are on Windows, use <code>.venv\\Scripts\\activate</code> instead.</li> </ol> <p>Use Python's built-in <code>venv</code> module: <pre><code>python -m venv .venv  # (1)!\nsource .venv/bin/activate # (2)!\n</code></pre></p> <ol> <li>On Unix-like systems (Linux, macOS), use <code>python3 -m venv .venv</code> if <code>python</code> points to Python 2.x.</li> <li>If you are on Windows, use <code>.venv\\Scripts\\activate</code> instead.</li> </ol> <p>Another way to set up a virtual environment for your Flet project is using Poetry.</p> <p>Install Poetry if you haven't already, then run the following commands:</p> <pre><code>poetry init --python='&gt;=3.10' --no-interaction\n</code></pre> <p>Now install the latest Flet version and add it to your project dependencies:</p> uvpippoetry <pre><code>uv add 'flet[all]'\n</code></pre> <pre><code>pip install 'flet[all]' # (1)!\n</code></pre> <ol> <li>After this, you will have to manually add this package to your <code>requirements.txt</code> or <code>pyproject.toml</code>.</li> </ol> <pre><code>poetry add 'flet[all]'\n</code></pre> <p>To make sure Flet has been installed correctly, we can check its version:</p> uvpippoetry <pre><code>uv run flet --version # (1)!\n</code></pre> <ol> <li>You can use the shorthand <code>-V</code> instead of <code>--version</code> to print the version of Flet installed.</li> </ol> <pre><code>flet --version # (1)!\n</code></pre> <ol> <li>You can use the shorthand <code>-V</code> instead of <code>--version</code> to print the version of Flet installed.</li> </ol> <pre><code>poetry run flet --version # (1)!\n</code></pre> <ol> <li>You can use the shorthand <code>-V</code> instead of <code>--version</code> to print the version of Flet installed.</li> </ol> <p>Now you are ready to create your first Flet app.</p>"},{"location":"getting-started/license/","title":"License","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"getting-started/navigation-and-routing/","title":"Navigation and Routing","text":"<p>Navigation and routing is an essential feature of Single Page Applications (SPA) which allows organizing application user interface into virtual pages (views) and \"navigate\" between them while application URL reflects the current state of the app.</p> <p>For mobile apps navigation and routing serves as a deep linking to specific application parts.</p> <p>Well, it took more efforts than expected to add navigation and routing into Flet as the implementation is based on Navigator 2.0 Flutter API and required to replace Flet's \"Page\" abstraction with \"Page and Views\". Flutter's newer navigation and routing API has substantial improvements such as:</p> <ol> <li>Programmatic control over history stack.</li> <li>An easy way to intercept a call to \"Back\" button in AppBar.</li> <li>Robust synchronization with browser history.</li> </ol> <p></p> <p>Explore source code of the example above.</p>"},{"location":"getting-started/navigation-and-routing/#page-route","title":"Page route","text":"<p>Page route is a portion of application URL after <code>#</code> symbol:</p> <p></p> <p>Default application route, if not set in application URL by the user, is <code>/</code>.  All routes start with <code>/</code>, for example <code>/store</code>, <code>/authors/1/books/2</code>.</p> <p>Application route can be obtained by reading <code>page.route</code> property, for example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(f\"Initial route: {page.route}\"))\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Grab application URL, open a new browser tab, paste the URL, modify its part after <code>#</code> to <code>/test</code> and hit enter. You should see \"Initial route: /test\".</p> <p>Every time the route in the URL is changed (by editing the URL or navigating browser history with Back/Forward buttons) Flet calls <code>page.on_route_change</code> event handler:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(f\"Initial route: {page.route}\"))\n\n    def route_change(e: ft.RouteChangeEvent):\n        page.add(ft.Text(f\"New route: {e.route}\"))\n\n    page.on_route_change = route_change\n    page.update()\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Now try updating URL hash a few times and then use Back/Forward buttons! You should see a new message added to a page each time the route changes:</p> <p></p> <p>Route can be changed programmatically, by updating <code>page.route</code> property:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(f\"Initial route: {page.route}\"))\n\n    def route_change(e: ft.RouteChangeEvent):\n        page.add(ft.Text(f\"New route: {e.route}\"))\n\n    def go_store(e):\n        page.route = \"/store\"\n        page.update()\n\n    page.on_route_change = route_change\n    page.add(ft.ElevatedButton(\"Go to Store\", on_click=go_store))\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Click \"Go to Store\" button and you'll see application URL is changed and a new item is pushed in a browser history. You can use browser \"Back\" button to navigate to a previous route.</p>"},{"location":"getting-started/navigation-and-routing/#page-views","title":"Page views","text":"<p>Flet's Page now is not just a single page, but a container for View layered on top of each other like a sandwich:</p> <p></p> <p>A collection of views represents navigator history. Page has <code>page.views</code> property to access views collection.</p> <p>The last view in the list is the one currently displayed on a page. Views list must have at least one element (root view).</p> <p>To simulate a transition between pages change <code>page.route</code> and add a new <code>View</code> in the end of <code>page.view</code> list.</p> <p>Pop the last view from the collection and change route to a \"previous\" one in <code>page.on_view_pop</code> event handler to go back.</p>"},{"location":"getting-started/navigation-and-routing/#building-views-on-route-change","title":"Building views on route change","text":"<p>To build a reliable navigation there must be a single place in the program which builds a list of views depending on the current route. Other words, navigation history stack (represented by the list of views) must be a function of a route.</p> <p>This place is <code>page.on_route_change</code> event handler.</p> <p>Let's put everything together into a complete example which allows navigating between two pages:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Routes Example\"\n\n    def route_change(route):\n        page.views.clear()\n        page.views.append(\n            ft.View(\n                \"/\",\n                [\n                    ft.AppBar(title=ft.Text(\"Flet app\"), bgcolor=ft.Colors.SURFACE_CONTAINER_HIGHEST),\n                    ft.ElevatedButton(\"Visit Store\", on_click=lambda _: page.go(\"/store\")),\n                ],\n            )\n        )\n        if page.route == \"/store\":\n            page.views.append(\n                ft.View(\n                    \"/store\",\n                    [\n                        ft.AppBar(title=ft.Text(\"Store\"), bgcolor=ft.Colors.SURFACE_CONTAINER_HIGHEST),\n                        ft.ElevatedButton(\"Go Home\", on_click=lambda _: page.go(\"/\")),\n                    ],\n                )\n            )\n        page.update()\n\n    def view_pop(view):\n        page.views.pop()\n        top_view = page.views[-1]\n        page.go(top_view.route)\n\n    page.on_route_change = route_change\n    page.on_view_pop = view_pop\n    page.go(page.route)\n\n\nft.run(main, view=ft.AppView.WEB_BROWSER)\n</code></pre> <p>Try navigating between pages using \"Visit Store\" and \"Go Home\" buttons, Back/Forward browser buttons, manually changing route in the URL - it works no matter what! :)</p> <p>Note</p> <p>To \"navigate\" between pages we used <code>page.go(route)</code> - a helper method that updates <code>page.route</code>, calls <code>page.on_route_change</code> event handler to update views and finally calls <code>page.update()</code>.</p> <p>Notice the usage of <code>page.on_view_pop</code> event handler. It fires when the user clicks automatic \"Back\" button in <code>AppBar</code> control. In the handler we remove the last element from views collection and navigate to view's root \"under\" it.</p>"},{"location":"getting-started/navigation-and-routing/#route-templates","title":"Route templates","text":"<p>Flet offers <code>TemplateRoute</code> - an utility class based on repath library which allows matching ExpressJS-like routes and parsing their parameters, for example <code>/account/:account_id/orders/:order_id</code>.</p> <p><code>TemplateRoute</code> plays great with route change event:</p> <pre><code>troute = TemplateRoute(page.route)\n\nif troute.match(\"/books/:id\"):\n    print(\"Book view ID:\", troute.id)\nelif troute.match(\"/account/:account_id/orders/:order_id\"):\n    print(\"Account:\", troute.account_id, \"Order:\", troute.order_id)\nelse:\n    print(\"Unknown route\")\n</code></pre> <p>You can read more about template syntax supported by <code>repath</code> library here.</p>"},{"location":"getting-started/navigation-and-routing/#url-strategy-for-web","title":"URL strategy for web","text":"<p>Flet web apps support two ways of configuring URL-based routing:</p> <ul> <li>Path (default) - paths are read and written without a hash. For example, <code>fletapp.dev/path/to/view</code>.</li> <li>Hash - paths are read and written to the hash fragment. For example, <code>fletapp.dev/#/path/to/view</code>.</li> </ul> <p>To change URL strategy use <code>route_url_strategy</code> parameter of <code>flet.app()</code> method, for example:</p> <pre><code>ft.run(main, route_url_strategy=\"hash\")\n</code></pre> <p>URL strategy for Flet Server can be configured with <code>FLET_ROUTE_URL_STRATEGY</code> environment variable which could be set to either <code>path</code> (default) or <code>hash</code>.</p>"},{"location":"getting-started/running-app/","title":"Running a Flet app (Hot Reload)","text":"<p>Flet apps can be executed as either desktop or web applications using the <code>flet run</code> command. Doing so will start the app in a native OS window or a web browser, respectively, with hot reload enabled to view changes in real-time.</p>"},{"location":"getting-started/running-app/#desktop-app","title":"Desktop app","text":"<p>To run Flet app as a desktop app, use the following command:</p> uvpippoetry <pre><code>uv run flet run\n</code></pre> <pre><code>flet run\n</code></pre> <pre><code>poetry run flet run\n</code></pre> <p>When you run the command without any arguments, <code>main.py</code> script in the current directory will be executed, by default.</p> <p>If you need to provide a different path, use the following command:</p> uvpippoetry <pre><code>uv run flet run [script]\n</code></pre> <pre><code>flet run [script]\n</code></pre> <pre><code>poetry run flet run [script]\n</code></pre> <p>Where <code>[script]</code> is a relative (ex: <code>counter.py</code>) or absolute (ex: <code>/Users/john/projects/flet-app/main.py</code>) path to the Python script you want to run.</p> <p>The app will be started in a native OS window:</p> <p></p> <p>macOS</p> <p></p> <p>Windows</p>"},{"location":"getting-started/running-app/#web-app","title":"Web app","text":"<p>To run Flet app as a web app, use the <code>--web</code> (or <code>-w</code>) option:</p> uvpippoetry <pre><code>uv run flet run --web [script]  # (1)!\n</code></pre> <ol> <li>A fixed port can be specified using <code>--port</code> ( or <code>-p</code>) option, followed by the port number.</li> </ol> <pre><code>flet run --web [script]  # (1)!\n</code></pre> <ol> <li>A fixed port can be specified using <code>--port</code> ( or <code>-p</code>) option, followed by the port number.</li> </ol> <pre><code>poetry run flet run --web [script]  # (1)!\n</code></pre> <ol> <li>A fixed port can be specified using <code>--port</code> ( or <code>-p</code>) option, followed by the port number.</li> </ol> <p>A new browser window/tab will be opened and the app will be using a random TCP port:</p> <p></p> <p>Web app</p>"},{"location":"getting-started/running-app/#watching-for-changes","title":"Watching for changes","text":"<p>By default, Flet will watch the script file that was run and reload the app whenever the contents  of this file are modified+saved, but will not watch for changes in other files.</p> <p>To modify this behavior, you can use one or more of the following options:</p> <ul> <li><code>-d</code> or <code>--directory</code> to watch for changes in the <code>[script]</code>s directory only</li> <li><code>-r</code> or <code>--recursive</code> to watch for changes in the <code>[script]</code>s directory and all sub-directories recursively</li> </ul> <p>Example</p> uvpippoetry <pre><code>uv run flet run --recursive [script]\n</code></pre> <pre><code>flet run --recursive [script]\n</code></pre> <pre><code>poetry run flet run --recursive [script]\n</code></pre>"},{"location":"getting-started/testing-on-android/","title":"Testing Flet app on Android","text":"<p>Start building awesome mobile apps in Python using just your computer and mobile phone!</p> <p>Install the Flet Android app on your Android device.  You will be using this app to see how your Flet project is working on Android device.</p> <p></p> <p>Important</p> <ul> <li>Make sure your computer fullfills these requirements.</li> <li>Your Android device and computer must be connected to the same Wi-Fi or local network.</li> </ul> <p>We recommend starting with the creation of a new virtual environment.</p> <p>Run the following command to start Flet development server with your app:</p> uvpippoetry <pre><code>uv run flet run --android [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <pre><code>flet run --android [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <pre><code>poetry run flet run --android [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <p>A QR code with encoded project URL will be displayed in the terminal:</p> <p></p> <p>Open Camera app on your Android device, point to QR code you got and click URL to open it in Flet app.</p> <p>Try updating your <code>[script]</code> - the app will be instantly refreshed on your Android device.</p> <p>To return to \"Home\" tab either:</p> <ul> <li>Long-press anywhere on the screen with 3 fingers or</li> <li>Shake your Android device.</li> </ul> <p>You can also \"manually\" add a new project by clicking \"+\" floating action button in the app and typing in its URL.</p> <p>Examples</p> <ul> <li>Below is a URL to a \"Counter\" Flet app that we hosted for testing purposes:     <pre><code>https://flet-counter-test-ios.fly.dev\n</code></pre></li> <li>The \"Gallery\" tab of the app has some more examples that you can try out.</li> <li>Explore Flet examples for even more examples.</li> </ul>"},{"location":"getting-started/testing-on-ios/","title":"Testing on iOS","text":"<p>Start building awesome mobile apps in Python using just your computer and mobile phone!</p> <p>Install the Flet iOS app on your iOS device.  You will be using this app to see how your Flet project is working on iPhone or iPad.</p> <p></p> <p>Important</p> <ul> <li>Make sure your computer fullfills these requirements.</li> <li>Your Android device and computer must be connected to the same Wi-Fi or local network.</li> </ul> <p>We recommend starting with the creation of a new virtual environment.</p> <p>Run the following command to start Flet development server with your app:</p> uvpippoetry <pre><code>uv run flet run --ios [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <pre><code>flet run --ios [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <pre><code>poetry run flet run --ios [script]  # (1)!\n</code></pre> <ol> <li><code>flet run</code> starts your app in hot reload mode. More info here.</li> </ol> <p>A QR code with encoded project URL will be displayed in the terminal:</p> <p></p> <p>Open Camera app on your Android device, point to QR code you got and click URL to open it in Flet app.</p> <p>Try updating your <code>[script]</code> - the app will be instantly refreshed on your Android device.</p> <p>To return to \"Home\" tab either:</p> <ul> <li>Long-press anywhere on the screen with 3 fingers or</li> <li>Shake your Android device.</li> </ul> <p>You can also \"manually\" add a new project by clicking \"+\" floating action button in the app and typing in its URL.</p> <p>Examples</p> <ul> <li>Below is a URL to a \"Counter\" Flet app that we hosted for testing purposes:     <pre><code>https://flet-counter-test-ios.fly.dev\n</code></pre></li> <li>The \"Gallery\" tab of the app has some more examples that you can try out.</li> <li>Explore Flet examples for even more examples.</li> </ul>"},{"location":"tutorials/calculator/","title":"Calculator Tutorial","text":"<p>In this tutorial you will learn, step-by-step, how to create a Calculator app in Python using Flet framework and publish it as a desktop, mobile or web app. The app is a simple console program, yet it is a multi-platform application with similar to iPhone calculator app UI:</p> <p></p> <p>You can find a live demo here.</p> <p>In this tutorial, we will cover all of the basic concepts for creating a Flet app: building a page layout, adding controls, making reusable UI components, handling events, and publishing options.</p> <p>The tutorial consists of the following steps:</p>"},{"location":"tutorials/calculator/#getting-started-with-flet","title":"Getting started with Flet","text":"<p>To create a multi-platform app in Python with Flet, you don't need to know HTML, CSS or JavaScript, but you do need a basic knowledge of Python and object-oriented programming.</p> <p>Before you can create your first Flet app, you need to setup your development environment, which requires Python 3.9 or above and <code>flet</code> package.</p> <p>Once you have Flet installed, let's create a simple hello-world app.</p> <p>Create <code>hello.py</code> with the following contents:</p> hello.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(value=\"Hello, world!\"))\n\nft.run(main)\n</code></pre> <p>Run this app and you will see a new window with a greeting:</p> <p></p>"},{"location":"tutorials/calculator/#adding-page-controls","title":"Adding page controls","text":"<p>Now you are ready to create a calculator app.</p> <p>To start, you'll need a Text control for showing the result of calculation, and a few ElevatedButtons with all the numbers and actions on them.</p> <p>Create <code>calc.py</code> with the following contents:</p> calc.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Calc App\"\n    result = ft.Text(value=\"0\")\n\n    page.add(\n        result,\n        ft.ElevatedButton(text=\"AC\"),\n        ft.ElevatedButton(text=\"+/-\"),\n        ft.ElevatedButton(text=\"%\"),\n        ft.ElevatedButton(text=\"/\"),\n        ft.ElevatedButton(text=\"7\"),\n        ft.ElevatedButton(text=\"8\"),\n        ft.ElevatedButton(text=\"9\"),\n        ft.ElevatedButton(text=\"*\"),\n        ft.ElevatedButton(text=\"4\"),\n        ft.ElevatedButton(text=\"5\"),\n        ft.ElevatedButton(text=\"6\"),\n        ft.ElevatedButton(text=\"-\"),\n        ft.ElevatedButton(text=\"1\"),\n        ft.ElevatedButton(text=\"2\"),\n        ft.ElevatedButton(text=\"3\"),\n        ft.ElevatedButton(text=\"+\"),\n        ft.ElevatedButton(text=\"0\"),\n        ft.ElevatedButton(text=\".\"),\n        ft.ElevatedButton(text=\"=\"),\n    )\n\nft.run(main)\n</code></pre> <p>Run the app and you should see a page like this:</p> <p></p>"},{"location":"tutorials/calculator/#building-page-layout","title":"Building page layout","text":"<p>Now let's arrange the text and buttons in 6 horizontal rows.</p> <p>Replace <code>calc.py</code> contents with the following:</p> calc.py<pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"Calc App\"\n    result = ft.Text(value=\"0\")\n\n    page.add(\n        ft.Row(controls=[result]),\n        ft.Row(\n            controls=[\n                ft.ElevatedButton(text=\"AC\"),\n                ft.ElevatedButton(text=\"+/-\"),\n                ft.ElevatedButton(text=\"%\"),\n                ft.ElevatedButton(text=\"/\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                ft.ElevatedButton(text=\"7\"),\n                ft.ElevatedButton(text=\"8\"),\n                ft.ElevatedButton(text=\"9\"),\n                ft.ElevatedButton(text=\"*\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                ft.ElevatedButton(text=\"4\"),\n                ft.ElevatedButton(text=\"5\"),\n                ft.ElevatedButton(text=\"6\"),\n                ft.ElevatedButton(text=\"-\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                ft.ElevatedButton(text=\"1\"),\n                ft.ElevatedButton(text=\"2\"),\n                ft.ElevatedButton(text=\"3\"),\n                ft.ElevatedButton(text=\"+\"),\n            ]\n        ),\n        ft.Row(\n             controls=[\n                ft.ElevatedButton(text=\"0\"),\n                ft.ElevatedButton(text=\".\"),\n                ft.ElevatedButton(text=\"=\"),\n            ]\n        ),\n    )\n\nft.run(main)\n</code></pre> <p>Run the app and you should see a page like this:</p> <p></p>"},{"location":"tutorials/calculator/#using-container-for-decoration","title":"Using Container for decoration","text":"<p>To add a black background with rounded border around the calculator, we will be using <code>Container</code> control.  Container may decorate only one control, so we will need to wrap all the 6 rows into a single vertical  <code>Column</code> that will be used as the container's <code>content</code>:</p> <p></p> <p>Here is the code for adding the container to the page:</p> <pre><code>    page.add(\n        ft.Container(\n            width=350,\n            bgcolor=ft.Colors.BLACK,\n            border_radius=ft.border_radius.all(20),\n            padding=20,\n            content=ft.Column(\n                controls= [], # (1)!\n            )\n        )\n    )\n</code></pre> <ol> <li>This controls list (of the <code>Column</code>) will contain the six rows of buttons.</li> </ol>"},{"location":"tutorials/calculator/#styled-controls","title":"Styled Controls","text":"<p>To complete the UI portion of the program, we need to update style for result text and buttons to look similar to iPhone calculator app.</p> <p>For the result text, let's specify its  <code>color</code> and <code>size</code> properties: <pre><code>result = ft.Text(value=\"0\", color=ft.Colors.WHITE, size=20)\n</code></pre></p> <p>For the buttons, if we look again at the UI we are aiming to achieve, there are 3 types of buttons: 1. Digit Buttons. They have dark grey background color and white text, size is the same for all. 2. Action Buttons.  They have orange background color and white text, size is the same for all except <code>0</code> button which is twice as large. 3. Extra action buttons. They have light grey background color and dark text, size is the same for all.</p> <p>The buttons will be used multiple time in the program, so we will be creating custom Styled Controls to reuse the code.</p> <p>Since all those types should inherit from <code>ElevatedButton</code> class and have common <code>text</code> and <code>expand</code> properties, let's create a parent <code>CalcButton</code> class: <pre><code>class CalcButton(ft.ElevatedButton):\n    def __init__(self, text, expand=1):\n        super().__init__()\n        self.text = text\n        self.expand = expand\n</code></pre></p> <p>Now let's create child classes for all three types of buttons:</p> <pre><code>class DigitButton(CalcButton):\n    def __init__(self, text, expand=1):\n        CalcButton.__init__(self, text, expand)\n        self.bgcolor = ft.Colors.WHITE24\n        self.color = ft.Colors.WHITE\n\nclass ActionButton(CalcButton):\n    def __init__(self, text):\n        CalcButton.__init__(self, text)\n        self.bgcolor = ft.Colors.ORANGE\n        self.color = ft.Colors.WHITE\n\nclass ExtraActionButton(CalcButton):\n    def __init__(self, text):\n        CalcButton.__init__(self, text)\n        self.bgcolor = ft.Colors.BLUE_GREY_100\n        self.color = ft.Colors.BLACK\n</code></pre> <p>We will be using these new classes now to create rows of buttons in the Container:</p> <pre><code>content=ft.Column(\n    controls=[\n        ft.Row(controls=[result], alignment=\"end\"),\n        ft.Row(\n            controls=[\n                ExtraActionButton(text=\"AC\"),\n                ExtraActionButton(text=\"+/-\"),\n                ExtraActionButton(text=\"%\"),\n                ActionButton(text=\"/\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                DigitButton(text=\"7\"),\n                DigitButton(text=\"8\"),\n                DigitButton(text=\"9\"),\n                ActionButton(text=\"*\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                DigitButton(text=\"4\"),\n                DigitButton(text=\"5\"),\n                DigitButton(text=\"6\"),\n                ActionButton(text=\"-\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                DigitButton(text=\"1\"),\n                DigitButton(text=\"2\"),\n                DigitButton(text=\"3\"),\n                ActionButton(text=\"+\"),\n            ]\n        ),\n        ft.Row(\n            controls=[\n                DigitButton(text=\"0\", expand=2),\n                DigitButton(text=\".\"),\n                ActionButton(text=\"=\"),\n            ]\n        ),\n    ]\n),\n</code></pre> <p>Since the program is too long now to be fully included in this tutorial,  copy the entire code for this step from here. Run the app and you should see a page like this:</p> <p></p> <p>Just what we wanted!</p>"},{"location":"tutorials/calculator/#reusable-ui-components","title":"Reusable UI components","text":"<p>While you can continue writing your app in the <code>main</code> function, the best practice would be to create a reusable UI component. </p> <p>Imagine you are working on an app header, a side menu, or UI that will be a part  of a larger project (for example, at Flet we will be using this Calculator app in a bigger \"Gallery\" app that will show all the examples for Flet framework). </p> <p>Even if you can't think of such uses right now, we still recommend creating all your  Flet apps with composability and reusability in mind. </p> <p>To make a reusable Calc app component, we are going to encapsulate its state and  presentation logic in a separate <code>CalculatorApp</code> class. Copy the entire code for this step from here.</p> <p>Try something</p> <p>Try adding two <code>CalculatorApp</code> components to the page:</p> <pre><code># create application instance\ncalc1 = CalculatorApp()\ncalc2 = CalculatorApp()\n\n# add application's root control to the page\npage.add(calc1, calc2)\n</code></pre>"},{"location":"tutorials/calculator/#handling-events","title":"Handling events","text":"<p>Now let's make the calculator do its job. We will be using the same event handler  for all the buttons and use <code>data</code> property to differentiate between the actions  depending on the button clicked. For <code>CalcButton</code> class, let's specify <code>on_click=button_clicked</code>  event and set <code>data</code> property equal to button's text:</p> <pre><code>class CalcButton(ft.ElevatedButton):\n    def __init__(self, text, button_clicked, expand=1):\n        super().__init__()\n        self.text = text\n        self.expand = expand\n        self.on_click = button_clicked\n        self.data = text\n</code></pre> <p>We will define <code>button_click</code> method in <code>CalculatorClass</code> and pass it to each button.  Below is <code>on_click</code> event handler that will reset the Text value when \"AC\" button is clicked:</p> <pre><code>def button_clicked(self, e):\n    if e.control.data == \"AC\":\n        self.result.value = \"0\"\n</code></pre> <p>With similar approach, <code>button_click</code> method will handle different calculator actions  depending on <code>data</code> property for each button. Copy the entire code for this step from here.</p> <p>Run the app and see it in the action: </p>"},{"location":"tutorials/calculator/#publishing-your-app","title":"Publishing your app","text":"<p>Congratulations! You have created your Calculator app with Flet, and it looks awesome!  Now it's time to share your app with the world!</p> <p>Flet Python app and all its dependencies can be packaged into a standalone executable a  package for distribution using <code>flet build</code> command.</p> <p>Follow these instructions to package your Calculator app into a desktop executable,  mobile app bundle or web app.</p>"},{"location":"tutorials/calculator/#summary","title":"Summary","text":"<p>In this tutorial you have learned how to:</p> <ul> <li>Create a simple Flet app;</li> <li>Work with Reusable UI components;</li> <li>Design UI layout using <code>Column</code>, <code>Row</code> and <code>Container</code> controls;</li> <li>Handle events;</li> <li>Publish your Flet app to multiple platforms;</li> </ul> <p>For further reading you can explore controls and examples repository.</p>"},{"location":"tutorials/chat/","title":"Chat Tutorial","text":"<p>In this tutorial we are going to create a trivial in-memory Chat app that will help you understand Flet framework basics. This app could be a good starting point to creating your own more complex and useful projects.</p> <p>In this tutorial you will learn how to:</p> <ul> <li>Create your first Flet app</li> <li>Add page controls and handle events</li> <li>Broadcast messages using built-in PubSub library</li> <li>Use AlertDialog control for accepting user name</li> <li>Enhance user interface with reusable controls</li> <li>Deploy the app as a web app</li> </ul> <p>The complete application will look like this:</p> <p></p> <p>You can play with a live demo here.</p> <p>The full code for the chat app can be found here.</p>"},{"location":"tutorials/chat/#getting-started-with-flet","title":"Getting started with Flet","text":"<p>It's a tradition to start with \"Hello, world!\" app!</p> <p>To create a multi-platform app in Python with Flet, you don't need to know HTML, CSS or JavaScript, but you do need a basic knowledge of Python and object-oriented programming.</p> <p>Before you can create your first Flet app, you need to setup your development environment, which requires Python 3.9 or above and <code>flet</code> package.</p> <p>Once you have Flet installed, let's create a hello-world app.</p> <p>Create <code>hello.py</code> with the following contents:</p> hello.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(value=\"Hello, world!\"))\n\nft.run(main)\n</code></pre> <p>Run this app you will see a new window with a greeting:</p> <p></p>"},{"location":"tutorials/chat/#adding-page-controls-and-handling-events","title":"Adding page controls and handling events","text":"<p>To start, we want to be able to take user input (chat message) and show messages history on the screen. The layout for this step could look like this:</p> <p></p> <p>To implement this layout, we will be using these Flet controls: * Column - a container to display chat messages (Text controls) vertically. * Text - chat message displayed in the chat Column. * TextField - input control used for taking new message input from the user. * ElevatedButton - \"Send\" button that will add new message to the chat Column. * Row - a container to display TextField and ElevatedButton horizontally.</p> <p>Create <code>chat.py</code> with the following contents:</p> chat.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    chat = ft.Column()\n    new_message = ft.TextField()\n\n    def send_click(e):\n        chat.controls.append(ft.Text(new_message.value))\n        new_message.value = \"\"\n        page.update()\n\n    page.add(\n        chat, ft.Row(controls=[new_message, ft.ElevatedButton(\"Send\", on_click=send_click)])\n    )\n\nft.run(main)\n</code></pre> <p>When user clicks on the \"Send\" button, it triggers <code>on_click</code> event which calls <code>send_click</code> method. <code>send_click</code> then adds new <code>Text</code> control to the list of Column <code>controls</code> and clears <code>new_message</code> TextField value.</p> <p>Note</p> <p>After any properties of a control are updated, an <code>update()</code> method of the control (or its parent control) should be called for the update to take effect.</p> <p>Chat app now looks like this: </p>"},{"location":"tutorials/chat/#broadcasting-chat-messages","title":"Broadcasting chat messages","text":"<p>In the previous step we have created a simple app that takes input from the user and displays chats messages on the screen. </p> <p>If you open this app in two web browser tabs, it will create two app sessions. Each session will have its own list of messages.</p> <p>Tip</p> <p>To open your app in two web browser tabs locally, run the following command: <pre><code>flet run --web &lt;path_to_your_app&gt;\n</code></pre> Once it is opened, copy the url and paste it into a new tab.</p> <p>To build a realtime chat app, you need to somehow pass the messages between chat app sessions. When a user sends a message, it should be broadcasted to all other app sessions and displayed on their pages.</p> <p>Flet provides a simple built-in PubSub mechanism for asynchronous communication between page sessions.</p> <p>First, we need subscribe the user to receive broadcast messages: <pre><code>    page.pubsub.subscribe(on_message)\n</code></pre></p> <p><code>pubsub.subscribe()</code> method will add current app session to the list of subscribers. It accepts <code>handler</code> as an argument, that will later be called at the moment a publisher calls <code>pubsub.send_all()</code> method.</p> <p>In the <code>handler</code> we will be adding new message (<code>Text</code>) to the list of chat <code>controls</code>: <pre><code>    def on_message(message: Message):\n        chat.controls.append(ft.Text(f\"{message.user}: {message.text}\"))\n        page.update()\n</code></pre></p> <p>Finally, you need to call <code>pubsub.send_all()</code> method when the user clicks on \"Send\" button: <pre><code>    def send_click(e):\n        page.pubsub.send_all(Message(user=page.session_id, text=new_message.value))\n        new_message.value = \"\"\n        page.update()\n\n    page.add(chat, ft.Row([new_message, ft.ElevatedButton(\"Send\", on_click=send_click)]))   \n</code></pre></p> <p><code>pubsub.send_all()</code> will call the <code>on_message()</code> and pass on the Message object down to it.</p> <p>Here is the full code for this step:</p> chat.py<pre><code>import flet as ft\n\nclass Message():\n    def __init__(self, user: str, text: str):\n        self.user = user\n        self.text = text\n\ndef main(page: ft.Page):\n\n    chat = ft.Column()\n    new_message = ft.TextField()\n\n    def on_message(message: Message):\n        chat.controls.append(ft.Text(f\"{message.user}: {message.text}\"))\n        page.update()\n\n    page.pubsub.subscribe(on_message)\n\n    def send_click(e):\n        page.pubsub.send_all(Message(user=page.session_id, text=new_message.value))\n        new_message.value = \"\"\n        page.update()\n\n    page.add(chat, ft.Row([new_message, ft.ElevatedButton(\"Send\", on_click=send_click)]))\n\nft.run(main)\n</code></pre> <p></p>"},{"location":"tutorials/chat/#user-name-dialog","title":"User name dialog","text":"<p>Chat app that you have created in the previous step has basic functionality needed to exchange messages between user sessions. It is not very user-friendly though, since it shows <code>session_id</code> that sent a message, which doesn't tell much about who you are communicating with. </p> <p>Let's improve our app to show user name instead of <code>session_id</code> for each message. To capture user name, we will be using <code>AlertDialog</code> control. Let's add it to the page:</p> <pre><code>    user_name = ft.TextField(label=\"Enter your name\")\n\n    page.dialog = ft.AlertDialog(\n        open=True,\n        modal=True,\n        title=ft.Text(\"Welcome!\"),\n        content=ft.Column([user_name], tight=True),\n        actions=[ft.ElevatedButton(text=\"Join chat\", on_click=join_click)],\n        actions_alignment=\"end\",\n    )\n</code></pre> <p>Note</p> <p>A dialog will be opened on the start of the program since we have set its <code>open</code> property to <code>True</code>.</p> <p></p> <p>When the user clicks on \"Join chat\" button, it will call <code>join_click</code> method that should send a message to all subscribers, informing them that the user has joined the chat. This message should look different from the regular chat message, for example, like this:</p> <p></p> <p>Let's add <code>message_type</code> property to the <code>Message</code> class to differentiate between login and chat messages:</p> <pre><code>class Message():\n    def __init__(self, user: str, text: str, message_type: str):\n        self.user = user\n        self.text = text\n        self.message_type = message_type\n</code></pre> <p>We will be checking <code>message_type</code> in <code>on_message</code> method:</p> <pre><code>def on_message(message: Message):\n    if message.message_type == \"chat_message\":\n        chat.controls.append(ft.Text(f\"{message.user}: {message.text}\"))\n    elif message.message_type == \"login_message\":\n        chat.controls.append(\n            ft.Text(message.text, italic=True, color=ft.Colors.BLACK45, size=12)\n        )\n    page.update()\n</code></pre> <p>Messages of \"login_message\" and \"chat_message\" types will now be sent on two events:  when user joins the chat and when user sends a message. </p> <p>Let's create <code>join_click</code> method:</p> <pre><code>def join_click(e):\n    if not user_name.value:\n        user_name.error_text = \"Name cannot be blank!\"\n        user_name.update()\n    else:\n        page.session.set(\"user_name\", user_name.value)\n        page.dialog.open = False\n        page.pubsub.send_all(Message(user=user_name.value, text=f\"{user_name.value} has joined the chat.\", message_type=\"login_message\"))\n        page.update()\n</code></pre> <p>We used page session storage to store user_name for its future use in  <code>send_click</code> method to send chat messages.</p> <p>Note</p> <p>User name dialog will close as soon as we set its <code>open</code> property to <code>False</code> and call <code>update()</code> method. </p> <p>Finally, let's update <code>send_click</code> method to use <code>user_name</code> that we previously saved using <code>page.session</code>:</p> <pre><code>def send_click(e):\n    page.pubsub.send_all(Message(user=page.session.get('user_name'), text=new_message.value, message_type=\"chat_message\"))\n    new_message.value = \"\"\n    page.update()\n</code></pre> <p>The full code for this step can be found here.</p> <p></p>"},{"location":"tutorials/chat/#enhancing-user-interface","title":"Enhancing user interface","text":"<p>Chat app that you have created in the previous step already serves its purpose of  exchanging messages between users with basic login functionality. </p> <p>Before moving on to deploying your app, we suggest adding some extra features  to it that will improve user experience and make the app look more professional.</p>"},{"location":"tutorials/chat/#reusable-user-controls","title":"Reusable user controls","text":"<p>You may want to show messages in a different format, like this:</p> <p></p> <p>Chat message will now be a <code>Row</code> containing <code>CircleAvatar</code> with username initials and  <code>Column</code> that contains two <code>Text</code> controls: user name and message text.</p> <p>We will need to show quite a few chat messages in the chat app, so it makes sense to create  your own reusable control. Lets create a new <code>ChatMessage</code> class that will inherit from <code>Row</code>.</p> <p>When creating an instance of <code>ChatMessage</code> class, we will pass a <code>Message</code> object as an  argument and then <code>ChatMessage</code> will display itself based on <code>message.user_name</code> and <code>message.text</code>:</p> <p><pre><code>class ChatMessage(ft.Row):\n    def __init__(self, message: Message):\n        super().__init__()\n        self.vertical_alignment = ft.CrossAxisAlignment.START\n        self.controls=[\n                ft.CircleAvatar(\n                    content=ft.Text(self.get_initials(message.user_name)),\n                    color=ft.Colors.WHITE,\n                    bgcolor=self.get_avatar_color(message.user_name),\n                ),\n                ft.Column(\n                    [\n                        ft.Text(message.user_name, weight=\"bold\"),\n                        ft.Text(message.text, selectable=True),\n                    ],\n                    tight=True,\n                    spacing=5,\n                ),\n            ]\n\n    def get_initials(self, user_name: str):\n        return user_name[:1].capitalize()\n\n    def get_avatar_color(self, user_name: str):\n        colors_lookup = [\n            ft.Colors.AMBER,\n            ft.Colors.BLUE,\n            ft.Colors.BROWN,\n            ft.Colors.CYAN,\n            ft.Colors.GREEN,\n            ft.Colors.INDIGO,\n            ft.Colors.LIME,\n            ft.Colors.ORANGE,\n            ft.Colors.PINK,\n            ft.Colors.PURPLE,\n            ft.Colors.RED,\n            ft.Colors.TEAL,\n            ft.Colors.YELLOW,\n        ]\n        return colors_lookup[hash(user_name) % len(colors_lookup)]\n</code></pre> <code>ChatMessage</code> control extracts initials and algorithmically derives avatar color from a username. Later, if you decide to improve control layout or its logic, it won't affect the rest of the program - that's the power of encapsulation!</p>"},{"location":"tutorials/chat/#laying-out-controls","title":"Laying out controls","text":"<p>Now you can use your brand new <code>ChatMessage</code> to build a better layout for the chat app:</p> <p></p> <p>Instances of <code>ChatMessage</code> will be created instead of plain <code>Text</code> chat messages in <code>on_message</code> method:</p> <pre><code>    def on_message(message: Message):\n        if message.message_type == \"chat_message\":\n            m = ChatMessage(message)\n        elif message.message_type == \"login_message\":\n            m = ft.Text(message.text, italic=True, color=ft.Colors.BLACK45, size=12)\n        chat.controls.append(m)\n        page.update()\n</code></pre> <p>Other improvements suggested with the new layout are:</p> <ul> <li><code>ListView</code> instead of <code>Column</code> for displaying messages, to be able to scroll through the messages later</li> <li><code>Container</code> for displaying border around <code>ListView</code></li> <li><code>IconButton</code> instead of <code>ElevatedButton</code> to send messages</li> <li>Use of <code>expand</code> property for controls to fill available space</li> </ul> <p>Here is how you can implement this layout:</p> <pre><code>    # Chat messages\n    chat = ft.ListView(\n        expand=True,\n        spacing=10,\n        auto_scroll=True,\n    )\n\n    # A new message entry form\n    new_message = ft.TextField(\n        hint_text=\"Write a message...\",\n        autofocus=True,\n        shift_enter=True,\n        min_lines=1,\n        max_lines=5,\n        filled=True,\n        expand=True,\n        on_submit=send_message_click,\n    )\n\n    # Add everything to the page\n    page.add(\n        ft.Container(\n            content=chat,\n            border=ft.border.all(1, ft.Colors.OUTLINE),\n            border_radius=5,\n            padding=10,\n            expand=True,\n        ),\n        ft.Row(\n            [\n                new_message,\n                ft.IconButton(\n                    icon=ft.Icons.SEND_ROUNDED,\n                    tooltip=\"Send message\",\n                    on_click=send_message_click,\n                ),\n            ]\n        ),\n    )\n</code></pre> <p>The full code for this step can be found here.</p> <p>This is the final version of the chat app for the purpose of this tutorial. Below you can read more about the enhancements that we have made.</p>"},{"location":"tutorials/chat/#keyboard-support","title":"Keyboard support","text":""},{"location":"tutorials/chat/#focusing-input-controls","title":"Focusing input controls","text":"<p>All data entry controls have <code>autofocus</code> property which when set to <code>True</code> moves  initial focus to the control. If there is more than one control on a page with <code>autofocus</code> set,  then the first one added to the page will get focus.</p> <p>We set <code>autofocus=True</code> on a username TextField inside a dialog and then on a TextField  for entering chat message to set initial focus on it when the dialog is closed.</p> <p>When a user click \"Send\" button or presses Enter to submit a chat message, TextField loses focus. To programmatically set control focus we used <code>TextField.focus()</code> method.</p>"},{"location":"tutorials/chat/#submitting-forms-on-enter","title":"Submitting forms on <code>Enter</code>","text":"<p>It's so tempting to submit forms with just pushing <code>Enter</code> button on the keyboard!  Type your name in the dialog, hit <code>Enter</code>, type a new message, hit <code>Enter</code>, type another,  hit <code>Enter</code> - no mouse involved at all! \ud83d\ude80</p> <p>Flet has support for that by providing <code>TextField.on_submit</code> event handler which fires  when a user press <code>Enter</code> button while the focus is on the TextField.</p>"},{"location":"tutorials/chat/#entering-multiline-messages","title":"Entering multiline messages","text":"<p>What about multiline TextFields where <code>Enter</code> must advance a cursor to the next line?  We've got that covered too! <code>TextField</code> control has <code>shift_enter</code> property which when set  to <code>True</code> enables Discord-like behavior: to get to a new line user presses <code>Shift</code>+<code>Enter</code> while  hitting just <code>Enter</code> submits a form.</p>"},{"location":"tutorials/chat/#animated-scrolling-to-the-last-message","title":"Animated scrolling to the last message","text":"<p>Noticed a nice animation of scrolling to the last message in a chat window?  It could be enabled by setting <code>ListView.auto_scroll</code> property to <code>True</code>.  The top most <code>Page</code> class, being a scrollable container itself, also supports <code>auto_scroll</code>.</p>"},{"location":"tutorials/chat/#page-title","title":"Page title","text":"<p>Final touch - page title that could be changed as simply as:</p> <pre><code>page.title = \"Flet Chat\"\npage.update()\n</code></pre>"},{"location":"tutorials/chat/#deploying-the-app","title":"Deploying the app","text":"<p>Congratulations! You have created your Chat app in Python with Flet, and it looks awesome!</p> <p>Now it's time to share your app with the world!</p> <p>Follow these instructions to deploy your Flet app as a web app to Fly.io or Replit.</p>"},{"location":"tutorials/chat/#whats-next","title":"What's next","text":"<p>There are plenty of features we could implement to improve this chat app:</p> <ul> <li>Disconnect, reconnect, session timeout</li> <li>Upload/download images</li> <li>Authentication, avatars</li> <li>Using database for the storage</li> <li>Chat channels, topics</li> <li>Full-text search</li> <li>Emojis, markdown</li> <li>Bots</li> <li>Mobile app</li> </ul> <p>Please let us know if you would like to contribute to the app/tutorial and share it with other Flet developers.</p>"},{"location":"tutorials/chat/#summary","title":"Summary","text":"<p>In this tutorial, you have learnt how to:</p> <ul> <li>Create a simple Flet app;</li> <li>Add page controls and handle events;</li> <li>Use built in PubSub library;</li> <li>User AlertDialog for entering user name;</li> <li>Build page layout with reusable controls;</li> <li>Deploy your Flet app to the web;</li> </ul> <p>For further reading you can explore controls and examples repository.</p> <p>We would love to hear your feedback! Please drop us an email, join the discussion on Discord.</p>"},{"location":"tutorials/solitaire/","title":"Solitaire Tutorial","text":"<p>In this tutorial we will show you step-by-step creation of a famous Klondike solitaire game in Python with Flet. For an inspiration, we looked at this online game: https://www.solitr.com/</p> <p>This tutorial is aimed at beginner/intermediate level Python developers who have basic knowledge of Python and object oriented programming.</p> <p>You can find a live demo here.</p> <p></p> <p>We have broken down the game implementation into the following steps:</p> <ul> <li>Getting started with Flet</li> <li>Proof of concept app for draggable cards</li> <li>Fanned card piles</li> <li>Solitaire setup</li> <li>Solitaire rules</li> <li>Winning the game</li> <li>Deploying the app</li> </ul> <p>In the Part 2 (will be covered in the next tutorial) we'll be adding Appbar with options to start new game, view game rules and change game settings.</p>"},{"location":"tutorials/solitaire/#getting-started-with-flet","title":"Getting started with Flet","text":"<p>To create a multi-platform app in Python with Flet, you don't need to know HTML, CSS or JavaScript, but you do need a basic knowledge of Python and object-oriented programming.</p> <p>Before you can create your first Flet app, you need to setup your development environment, which requires Python 3.9 or above and <code>flet</code> package.</p> <p>Once you have Flet installed, let's create a simple hello-world app.</p> <p>Create <code>hello.py</code> with the following contents:</p> hello.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(value=\"Hello, world!\"))\n\nft.run(main)\n</code></pre> <p>Run this app and you will see a new window with a greeting:</p> <p></p>"},{"location":"tutorials/solitaire/#proof-of-concept-app-for-draggable-cards","title":"Proof of concept app for draggable cards","text":"<p>For the proof of concept, we will only be using three types of controls:</p> <ul> <li><code>Stack</code> - will be used as a parent control for absolute positioning of slots and cards</li> <li><code>GestureDetector</code> - the card that will be moved within the <code>Stack</code></li> <li><code>Container</code> - the slot where the card will be dropped. Will also be used as <code>content</code> for the <code>GestureDetector</code>.</li> </ul> <p>We have broken down the proof of concept app into four easy steps, so that after each step you have  a complete short program to run and test.</p>"},{"location":"tutorials/solitaire/#step-1-drag-the-card-around","title":"Step 1: Drag the card around","text":"<p>In this step we will create a <code>Stack</code> (Solitaire game field) and a <code>GestureDetector</code> (Solitaire card).  The card will then be added to the list of the <code>Stack.controls</code>. <code>top</code> and <code>left</code> properties of the  <code>GestureDetector</code> are used for absolute positioning of the card in the <code>Stack</code>.</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n   card = ft.GestureDetector(\n       left=0,\n       top=0,\n       content=ft.Container(bgcolor=ft.Colors.GREEN, width=70, height=100),\n   )   \n\n   page.add(ft.Stack(controls=[card], width=1000, height=500))\n\nft.run(main)\n</code></pre> <p>Run the app to see the card added to the stack:</p> <p></p> <p>To be able to move the card, we'll create a <code>drag</code> method that will be called in <code>on_pan_update</code>  event of <code>GestureDetector</code> which happens every <code>drag_interval</code> while the user drags the card with their mouse.</p> <p>To show the card's movement, we\u2019ll be updating the card\u2019s <code>top</code> and <code>left</code> properties in the <code>drag</code>  method each time the <code>on_pan_update</code> event happens.</p> <p>Below is the simplest code for dragging <code>GestureDetector</code> in <code>Stack</code>:</p> <pre><code>import flet as ft\n\n# Use of GestureDetector with on_pan_update event for dragging card\n# Absolute positioning of controls within stack\n\ndef main(page: ft.Page):\n   def drag(e: ft.DragUpdateEvent):\n       e.control.top = max(0, e.control.top + e.delta_y)\n       e.control.left = max(0, e.control.left + e.delta_x)\n       e.control.update()\n\n   card = ft.GestureDetector(\n       mouse_cursor=ft.MouseCursor.MOVE,\n       drag_interval=5,\n       on_pan_update=drag,\n       left=0,\n       top=0,\n       content=ft.Container(bgcolor=ft.Colors.GREEN, width=70, height=100),\n   )   \n\n   page.add(ft.Stack(controls=[card], width=1000, height=500))\n\nft.run(main)\n</code></pre> <p>Now you can see the card moving:</p> <p></p> <p>Note</p> <p>After any properties of a control are updated, an <code>update()</code> method of the control (or its parent control) should be called for the update to take effect.</p>"},{"location":"tutorials/solitaire/#step-2-drop-the-card-in-the-slot-or-bounce-it-back","title":"Step 2: Drop the card in the slot or bounce it back","text":"<p>The goal of this step is to be able to drop a card into a slot if it is close enough and bounce it back if it\u2019s not. </p> <p>Let\u2019s create a <code>Container</code> control that will represent a slot to which we\u2019ll be dropping the card: <pre><code>slot = ft.Container(\n    width=70, height=100, left=200, top=0, border=ft.border.all(1)\n    )\npage.add(ft.Stack(controls = [slot, card], width=1000, height=500))\n</code></pre></p> <p><code>on_pan_end</code> event of the card is called when the card is dropped:  <pre><code>card = ft.GestureDetector(\n    mouse_cursor=ft.MouseCursor.MOVE,\n    drag_interval=5,\n    on_pan_update=drag,\n    on_pan_end=drop,\n    left=0,\n    top=0,\n    content=ft.Container(bgcolor=ft.Colors.GREEN, width=70, height=100),\n)\n</code></pre></p> <p>On this event, we\u2019ll call <code>drop</code> method to check if the card is close enough to the slot (let\u2019s say it\u2019s closer than 20px to the slot), and <code>place</code> it there:</p> <pre><code>def drop(e: ft.DragEndEvent):\n    if (\n        abs(e.control.top - slot.top) &lt; 20\n        and abs(e.control.left - slot.left) &lt; 20\n    ):\n        place(e.control, slot)\n    e.control.update()\n\ndef place(card, slot):\n    \"\"\"place card to the slot\"\"\"\n    card.top = slot.top\n    card.left = slot.left\n    page.update()\n</code></pre> <p>Now, if the card is not close enough, we need to bounce it back to its original position. Unfortunately, we don\u2019t know the original position coordinates, since the card\u2019s <code>top</code> and <code>left</code> properties were changed on <code>on_pan_update</code> event.</p> <p>To solve this problem, let\u2019s create a <code>Solitaire</code> class object to keep track of the original position of the card when <code>on_pan_start</code> event of the card is called: <pre><code>class Solitaire:\n   def __init__(self):\n       self.start_top = 0\n       self.start_left = 0\n\nsolitaire = Solitaire()\n\ndef start_drag(e: ft.DragStartEvent):\n    solitaire.start_top = e.control.top\n    solitaire.start_left = e.control.left\n    e.control.update()\n</code></pre></p> <p>Now let\u2019s update <code>on_pan_end</code> event with the option to bounce card back: <pre><code>def bounce_back(game, card):\n    \"\"\"return card to its original position\"\"\"\n    card.top = game.start_top\n    card.left = game.start_left\n    page.update()\n\ndef drop(e: ft.DragEndEvent):\n    if (\n        abs(e.control.top - slot.top) &lt; 20\n        and abs(e.control.left - slot.left) &lt; 20\n    ):\n        place(e.control, slot)\n\n    else:\n        bounce_back(solitaire, e.control)\n\n    e.control.update()\n</code></pre></p> <p>The full code for this step can be found here.</p>"},{"location":"tutorials/solitaire/#step-3-adding-a-second-card","title":"Step 3: Adding a second card","text":"<p>Eventually, we\u2019ll need 52 cards to play the game. For our proof of concept, let\u2019s add a second card: <pre><code>   card2 = ft.GestureDetector(\n       mouse_cursor=ft.MouseCursor.MOVE,\n       drag_interval=5,\n       on_pan_start=start_drag,\n       on_pan_update=drag,\n       on_pan_end=drop,\n       left=100,\n       top=0,\n       content=ft.Container(bgcolor=ft.Colors.YELLOW, width=70, height=100),\n   )\n\n   controls = [slot, card1, card2]\n   page.add(ft.Stack(controls=controls, width=1000, height=500))\n</code></pre></p> <p>Now, if you run the app with the two cards, you will notice that when you move the cards around, the  yellow card (<code>card2</code>) is moving as expected but the green the card (<code>card1</code>) is moving under the yellow card. </p> <p></p> <p>It happens because <code>card2</code> is added to the list of stack <code>controls</code> after <code>card1</code>. To fix this problem,  we need to move the draggable card to the top of the list of controls on <code>on_pan_start</code> event:</p> <pre><code>def move_on_top(card, controls):\n    \"\"\"Moves draggable card to the top of the stack\"\"\"\n    controls.remove(card)\n    controls.append(card)\n    page.update()\n\ndef start_drag(e: ft.DragStartEvent):\n    move_on_top(e.control, controls)\n    solitaire.start_top = e.control.top\n    solitaire.start_left = e.control.left\n</code></pre> <p>Now the two cards can be dragged without issues:</p> <p></p> <p>The full code for this step can be found here.</p>"},{"location":"tutorials/solitaire/#step-4-adding-more-slots","title":"Step 4: Adding more slots","text":"<p>As a final step for the proof of concept app, let\u2019s create two more slots: <pre><code>slot0 = ft.Container(\n    width=70, height=100, left=0, top=0, border=ft.border.all(1)\n)\n\nslot1 = ft.Container(\n    width=70, height=100, left=200, top=0, border=ft.border.all(1)\n)\n\nslot2 = ft.Container(\n    width=70, height=100, left=300, top=0, border=ft.border.all(1)\n)\n\nslots = [slot0, slot1, slot2]\n</code></pre></p> <p>When creating new cards, we will not specify their <code>top</code> and <code>left</code> position now, but instead,  will place them to the <code>slot0</code>:</p> <pre><code># deal cards\nplace(card1, slot0)\nplace(card2, slot0)\n</code></pre> <p><code>on_pan_end</code> event, where we check if a card is close to a slot, we will now go through the  list of slots to find where the card should be dropped:</p> <pre><code>def drop(e: ft.DragEndEvent):\n    for slot in slots:\n        if (\n            abs(e.control.top - slot.top) &lt; 20\n        and abs(e.control.left - slot.left) &lt; 20\n        ):\n            place(e.control, slot)\n            e.control.update()\n            return\n\n    bounce_back(solitaire, e.control)\n    e.control.update()\n</code></pre> <p>As a result, the two cards can be dragged between the three slots:</p> <p></p> <p>The full code for this step can be found here.</p> <p>Congratulations on completing the proof of concept app for the Solitaire game!  Now you can work with <code>GestureDetector</code> to move cards inside <code>Stack</code> and place them to  certain <code>Containers</code>, which is a great part of the game to begin with.</p>"},{"location":"tutorials/solitaire/#fanned-card-piles","title":"Fanned card piles","text":"<p>In the proof of concept app you have accomplished the task of dropping a card into a slot in  proximity or bounce it back. If there is already a card in that slot, the new card is placed on top of it,  covering it completely.</p> <p>In the actual Solitaire game, if there is already a card in a tableau slot, you want to  place the draggable card a bit lower, so that you can see the previous card too, and if there are two cards,  even lower. Those are called \u201cfanned piles\u201d.</p> <p>Then, we want to be able to pick a card from the fanned pile that is not the top card of  the pile and drag the card together with all the cards below it:</p> <p></p> <p>To be able to do that, it would be useful to have the information about the pile of cards  in the slot from which the card is dragged, as well as in the slot to which it is being dropped.  Let\u2019s restructure our program and get it ready for the implementation of the fanned piles.</p>"},{"location":"tutorials/solitaire/#slot-card-and-solitaire-classes","title":"Slot, Card and Solitaire classes","text":"<p>A slot could have a <code>pile</code> property that would hold a list of cards that were placed there.  Now the slot is a <code>Container</code> control object, and we can\u2019t add any new properties to it.  Let\u2019s create a new <code>Slot</code> class that will inherit from <code>Container</code> and add a <code>pile</code> property to it:</p> <pre><code>SLOT_WIDTH = 70\nSLOT_HEIGHT = 100\n\nimport flet as ft\n\nclass Slot(ft.Container):\n   def __init__(self, top, left):\n       super().__init__()\n       self.pile=[]\n       self.width=SLOT_WIDTH\n       self.height=SLOT_HEIGHT\n       self.left=left\n       self.top=top\n       self.border=ft.border.all(1)\n</code></pre> <p>Similarly to <code>Slot</code> class, let\u2019s create a new <code>Card</code> class with <code>slot</code> property to remember in which slot it resides. It will inherit from <code>GestureDetector</code> and we\u2019ll move all card-related methods to it: <pre><code>CARD_WIDTH = 70\nCARD_HEIGTH = 100\nDROP_PROXIMITY = 20\n\nimport flet as ft\n\nclass Card(ft.GestureDetector):\n   def __init__(self, solitaire, color):\n       super().__init__()\n       self.slot = None\n       self.mouse_cursor=ft.MouseCursor.MOVE\n       self.drag_interval=5\n       self.on_pan_start=self.start_drag\n       self.on_pan_update=self.drag\n       self.on_pan_end=self.drop\n       self.left=None\n       self.top=None\n       self.solitaire = solitaire\n       self.color = color\n       self.content=ft.Container(bgcolor=self.color, width=CARD_WIDTH, height=CARD_HEIGTH)\n\n   def move_on_top(self):\n       \"\"\"Moves draggable card to the top of the stack\"\"\"\n       self.solitaire.controls.remove(self)\n       self.solitaire.controls.append(self)\n       self.solitaire.update()\n\n   def bounce_back(self):\n       \"\"\"Returns card to its original position\"\"\"\n       self.top = self.slot.top\n       self.left = self.slot.left\n       self.update()\n\n   def place(self, slot):\n       \"\"\"Place card to the slot\"\"\"\n       self.top = slot.top\n       self.left = slot.left\n\n   def start_drag(self, e: ft.DragStartEvent):\n       self.move_on_top()\n       self.update()\n\n   def drag(self, e: ft.DragUpdateEvent):\n       self.top = max(0, self.top + e.delta_y)\n       self.left = max(0, self.left + e.delta_x)\n       self.update()\n\n   def drop(self, e: ft.DragEndEvent):\n       for slot in self.solitaire.slots:\n           if (\n               abs(self.top - slot.top) &lt; DROP_PROXIMITY\n           and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n         ):\n               self.place(slot)\n               self.update()\n               return\n\n       self.bounce_back()\n       self.update()\n</code></pre></p> <p>Note</p> <p>Since each card has <code>slot</code> property now, there is no need to remember <code>start_left</code> and <code>start_top</code>  position of the draggable card in Solitaire class anymore, because we can just bounce it back to its slot.</p> <p>Let\u2019s update <code>Solitaire</code> class to inherit from <code>Stack</code>, and move the creation of cards and slots there: <pre><code>SOLITAIRE_WIDTH = 1000\nSOLITAIRE_HEIGHT = 500\n\nimport flet as ft\nfrom slot import Slot\nfrom card import Card\n\nclass Solitaire(ft.Stack):\n   def __init__(self):\n       super().__init__()\n       self.controls = []\n       self.slots = []\n       self.cards = []\n       self.width = SOLITAIRE_WIDTH\n       self.height = SOLITAIRE_HEIGHT\n\n   def did_mount(self):\n       self.create_card_deck()\n       self.create_slots()\n       self.deal_cards()\n\n   def create_card_deck(self):\n       card1 = Card(self, color=\"GREEN\")\n       card2 = Card(self, color=\"YELLOW\")\n       self.cards = [card1, card2]\n\n   def create_slots(self):\n       self.slots.append(Slot(top=0, left=0))\n       self.slots.append(Slot(top=0, left=200))\n       self.slots.append(Slot(top=0, left=300))\n       self.controls.extend(self.slots)\n       self.update()\n\n   def deal_cards(self):\n       self.controls.extend(self.cards)\n       for card in self.cards:\n           card.place(self.slots[0])\n       self.update()\n</code></pre></p> <p>Note</p> <p>If you try to call <code>create_slots()</code> and <code>create_card_deck()</code> and <code>deal_cards()</code> methods  <code>__init__()</code>  method of the Solitaire class, it will cause an error \u201cControl must be added to the page first\u201d.  To fix this, we  create slots and cards inside the <code>did_mount()</code> method, which happens immediately  after the stack is added to the page.</p> <p>Our main program will be very simple now: <pre><code>import flet as ft\nfrom solitaire import Solitaire\n\ndef main(page: ft.Page):\n\n   solitaire = Solitaire()\n\n   page.add(solitaire)\n\nft.run(main)\n</code></pre></p> <p>You can find the full source code for this step here. It works exactly the same way as  the proof of concept app, but re-written with the new classes to be ready for adding more  complex functionality to it. </p>"},{"location":"tutorials/solitaire/#placing-card-with-offset","title":"Placing card with offset","text":"<p>When the card is being placed to a slot in the <code>card.place()</code> method, we need to do three things: * Remove the card from its original slot, if it exists * Change card\u2019s slot to the new slot * Add the card to the new slot\u2019s pile <pre><code>def place(self, slot):\n    # remove card from it's original slot, if exists\n    if self.slot is not None:\n        self.slot.pile.remove(self)\n\n    # change card's slot to a new slot\n    self.slot = slot\n\n    # add card to the new slot's pile\n    slot.pile.append(self)\n</code></pre></p> <p>When updating card\u2019s <code>top</code> and <code>left</code> position, <code>left</code> should remain the same, but <code>top</code>  will depend on the length of the new slot\u2019s pile: <pre><code>    self.top = slot.top + len(slot.pile) * CARD_OFFSET\n    self.left = slot.left\n</code></pre></p> <p>Now the cards are placed with offset which gives us the fanned pile look:</p> <p></p>"},{"location":"tutorials/solitaire/#drag-pile-of-cards","title":"Drag pile of cards","text":"<p>If you try to drag the card from the bottom of the pile now, it will look like this:</p> <p></p> <p>To fix this problem, we need to update all the methods that work with the draggable  card to work with the draggable pile instead.</p> <p>Let\u2019s create <code>get_draggable_pile()</code> method that will get the list of cards that need to be dragged  together, starting with the card you picked: <pre><code>    def get_draggable_pile(self):\n        \"\"\"returns list of cards that will be dragged together, starting with the current card\"\"\"\n        if self.slot is not None:\n            self.draggable_pile = self.slot.pile[self.slot.pile.index(self) :]\n        else:  # slot == None when the cards are dealt and need to be place in slot for the first time\n            self.draggable_pile = [self]\n</code></pre></p> <p>Then, we\u2019ll update <code>move_on_top()</code> method: <pre><code>    def move_on_top(self):\n        \"\"\"Brings draggable card pile to the top of the stack\"\"\"\n\n        # for card in self.get_draggable_pile():\n        for card in self.draggable_pile:\n            self.solitaire.controls.remove(card)\n            self.solitaire.controls.append(card)\n        self.solitaire.update()\n</code></pre></p> <p>Additionally, we need to update <code>drag()</code> method to go through the draggable pile and update  positions of all the cards being dragged:  <pre><code>    def drag(self, e: ft.DragUpdateEvent):\n        for card in self.draggable_pile:\n            card.top = (\n                max(0, self.top + e.delta_y)\n                + self.draggable_pile.index(card) * CARD_OFFSET\n            )\n            card.left = max(0, self.left + e.delta_x)\n            self.solitaire.update()\n</code></pre></p> <p>Also, we need to update <code>place()</code> method to place place the draggable pile to the slot: <pre><code>    def place(self, slot):\n        \"\"\"Place draggable pile to the slot\"\"\"\n        for card in self.draggable_pile:\n            card.top = slot.top + len(slot.pile) * CARD_OFFSET\n            card.left = slot.left\n\n            # remove card from it's original slot, if it exists\n            if card.slot is not None:\n                card.slot.pile.remove(card)\n\n            # change card's slot to a new slot\n            card.slot = slot\n\n            # add card to the new slot's pile\n            slot.pile.append(card)\n\n        self.solitaire.update()\n</code></pre></p> <p>Finally, if no slot in proximity is found, we need to bounce the whole pile back to its original position: <pre><code>    def bounce_back(self):\n        \"\"\"Returns draggable pile to its original position\"\"\"\n        for card in self.draggable_pile:\n            card.top = card.slot.top + card.slot.pile.index(card) * CARD_OFFSET\n            card.left = card.slot.left\n        self.solitaire.update()\n</code></pre></p> <p>The full source code of this step can be found here. Now we can drag and drop cards in fanned piles,  which means we are ready for the real deal! </p>"},{"location":"tutorials/solitaire/#solitaire-setup","title":"Solitaire setup","text":"<p>Let\u2019s take a look at the wikipedia article about Klondike (solitaire):</p> <p>Klondike is played with a standard 52-card deck.</p> <p>After shuffling, a tableau of seven fanned piles of cards is laid from left to right.  From left to right, each pile contains one more card than the last.  The first and left-most pile contains a single upturned card, the second pile contains two cards,  the third pile contains three cards, the fourth pile contains four cards,  the fifth pile contains five cards, the sixth pile contains six cards, and the seventh pile contains seven cards.  The topmost card of each pile is turned face up. The remaining cards form the stock and are placed facedown at the upper left of the layout.</p> <p>The four foundations (light rectangles in the upper right of the figure) are built up by suit from Ace (low in this game) to King, and the tableau piles can be built down by alternate colors.</p> <p></p> <p>We will now work on this setup step by step.</p>"},{"location":"tutorials/solitaire/#create-card-deck","title":"Create card deck","text":"<p>The first step is to create a full deck of cards in Solitaire class. Each card should have a <code>suit</code> property (hearts, diamonds, clubs and spades) and a <code>rank</code> property (from Ace to King).  For the suit, its <code>color</code> is important, because tableau piles are built by alternate colors.</p> <p>For the rank, its <code>value</code> is important, because foundations are built from the lowest (Ace) to the highest (King) rank value.</p> <p>In solitaire.py, create <code>Suite</code> and <code>Rank</code> classes: <pre><code>class Suite:\n    def __init__(self, suite_name, suite_color):\n        self.name = suite_name\n        self.color = suite_color\n\nclass Rank:\n    def __init__(self, card_name, card_value):\n        self.name = card_name\n        self.value = card_value\n</code></pre> Now, in the <code>Card</code> class, instead of accepting the color as an argument, we\u2019ll be accepting <code>suite</code> and <code>rank</code> in <code>__init__()</code>. Additionally, we\u2019ll add <code>face_up</code> property to the card and the Container will now has image of the back of the card as its <code>content</code>: <pre><code>class Card(ft.GestureDetector):\n    def __init__(self, solitaire, suite, rank):\n        super().__init__()\n        self.mouse_cursor=ft.MouseCursor.MOVE\n        self.drag_interval=5\n        self.on_pan_start=self.start_drag\n        self.on_pan_update=self.drag\n        self.on_pan_end=self.drop\n        self.suite=suite\n        self.rank=rank\n        self.face_up=False\n        self.top=None\n        self.left=None\n        self.solitaire = solitaire\n        self.slot = None\n        self.content=ft.Container(\n            width=CARD_WIDTH,\n            height=CARD_HEIGTH,\n            border_radius = ft.border_radius.all(6),\n            content=ft.Image(src=\"card_back.png\"))\n</code></pre> All the images for the face up cards, as well as card back are stored in the \u201cimages\u201d folder in the same directory as main.py. </p> <p>::note For the reference to the image file to work, we need to specify the folder were it resides in the assets_dir in main.py: <pre><code>ft.run(main, assets_dir=\"images\")\n</code></pre> ::</p> <p>Finally, in <code>solitaire.create_card_deck()</code> we'll create lists of suites and ranks and then the 52-card deck: <pre><code>def create_card_deck(self):\n    suites = [\n        Suite(\"hearts\", \"RED\"),\n        Suite(\"diamonds\", \"RED\"),\n        Suite(\"clubs\", \"BLACK\"),\n        Suite(\"spades\", \"BLACK\"),\n    ]\n    ranks = [\n        Rank(\"Ace\", 1),\n        Rank(\"2\", 2),\n        Rank(\"3\", 3),\n        Rank(\"4\", 4),\n        Rank(\"5\", 5),\n        Rank(\"6\", 6),\n        Rank(\"7\", 7),\n        Rank(\"8\", 8),\n        Rank(\"9\", 9),\n        Rank(\"10\", 10),\n        Rank(\"Jack\", 11),\n        Rank(\"Queen\", 12),\n        Rank(\"King\", 13),\n    ]\n\n    self.cards = []\n\n    for suite in suites:\n        for rank in ranks:\n            self.cards.append(Card(solitaire=self, suite=suite, rank=rank))\n</code></pre> The card deck is ready to be dealt, and now we need to create the layout for it.</p>"},{"location":"tutorials/solitaire/#create-slots","title":"Create slots","text":"<p>Klondike solitaire game layout should look like this:</p> <p></p> <p>Let\u2019s create all those slots in <code>solitaire.create_slots()</code>: <pre><code>def create_slots(self):\n\n    self.stock = Slot(top=0, left=0, border=ft.border.all(1))\n    self.waste = Slot(top=0, left=100, border=None)\n\n    self.foundations = []\n    x = 300\n    for i in range(4):\n        self.foundations.append(Slot(top=0, left=x, border=ft.border.all(1, \"outline\")))\n        x += 100\n\n    self.tableau = []\n    x = 0\n    for i in range(7):\n        self.tableau.append(Slot(top=150, left=x, border=None))\n        x += 100\n\n    self.controls.append(self.stock)\n    self.controls.append(self.waste)\n    self.controls.extend(self.foundations)\n    self.controls.extend(self.tableau)\n    self.update()\n</code></pre></p> <p>Note</p> <p>Note: some slots should have visible border and some shouldn\u2019t, so we added border to the list of arguments for the creation of <code>Slot</code> objects.</p>"},{"location":"tutorials/solitaire/#deal-cards","title":"Deal cards","text":"<p>Let's start with shuffling the cards and adding them to the list of controls: <pre><code>def deal_cards(self):\n    random.shuffle(self.cards)\n    self.controls.extend(self.cards)\n    self.update()\n</code></pre></p> <p>Then we'll deal the cards to the tableau piles from left to right so that each pile contains one more card than the last, and place the remaining cards to the stock pile: <pre><code>def deal_cards(self):\n    random.shuffle(self.cards)\n    self.controls.extend(self.cards)\n\n    # deal to tableau\n    first_slot = 0\n    remaining_cards = self.cards\n\n    while first_slot &lt; len(self.tableau):\n        for slot in self.tableau[first_slot:]:\n            top_card = remaining_cards[0]\n            top_card.place(slot)\n            remaining_cards.remove(top_card)\n        first_slot +=1\n\n    # place remaining cards to stock pile\n    for card in remaining_cards:\n        card.place(self.stock)\n\n    self.update()\n</code></pre></p> <p>Let\u2019s run the program and see where we are at now:</p> <p></p> <p>Cards in stock were placed in a fanned pile in the same manner as to the tableau,  but they should have been placed to a regular pile instead. To fix this problem,  let\u2019s add this condition to the <code>card.place()</code> method: <pre><code>def place(self, slot):\n    \"\"\"Place draggable pile to the slot\"\"\"\n    if slot in self.solitaire.tableau:\n        self.top = slot.top + len(slot.pile) * self.solitaire.card_offset\n    else:\n        self.top = slot.top\n    self.left = slot.left\n</code></pre> Now cards are only placed in fanned piles to tableau:</p> <p></p> <p>If you try moving the cards around now, the program won\u2019t work.  The reason for this is that in the <code>card.drop()</code> method iterates through list of slots which we don\u2019t have now. </p> <p>Let\u2019s update the method to go separately through foundations and tableau: <pre><code>def drop(self, e: ft.DragEndEvent):\n    for slot in self.solitaire.tableau:\n        if (\n            abs(self.top - (slot.top + len(slot.pile) * CARD_OFFSET)) &lt; DROP_PROXIMITY\n        and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n            self.place(slot)\n            self.solitaire.update()\n            return\n\n    for slot in self.solitaire.foundations:\n        if (\n            abs(self.top - slot.top) &lt; DROP_PROXIMITY\n        and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n            self.place(slot)\n            self.solitaire.update()\n            return\n\n    self.bounce_back()\n</code></pre></p>"},{"location":"tutorials/solitaire/#reveal-top-cards-in-tableau-piles","title":"Reveal top cards in tableau piles","text":"<p>Now we have the correct game setup and as a last touch we need to reveal the topmost cards in tableau piles.</p> <p>In <code>Slot</code> class, create a <code>get_top_card()</code> method: <pre><code>def get_top_card(self):\n    if len(self.pile) &gt; 0:\n        return self.pile[-1]\n</code></pre> In <code>Card</code> class, create <code>turn_dace_up()</code> method: <pre><code>def turn_face_up(self):\n    self.face_up = True\n    self.content.content.src=f\"/images/{self.rank.name}_{self.suite.name}.svg\"\n    self.solitaire.update()\n</code></pre> Finally, reveal the topmost cards in the <code>solitaire.deal_cards()</code>: <pre><code>for slot in self.tableau:\n    slot.get_top_card().turn_face_up()\n    self.update()\n</code></pre></p> <p>Let\u2019s see how it looks now:</p> <p></p> <p>The full source code for this step can be found here.</p> <p>Congratulations on completing the Solitaire game setup! You\u2019ve created a full 52-card deck, built layout with stock, waste, foundations and tableau piles, dealt the cards and revealed the top cards in tableau. Let\u2019s move on to the next item on our todo list, which is Solitaire Rules.</p>"},{"location":"tutorials/solitaire/#solitaire-rules","title":"Solitaire rules","text":"<p>If you run your current version of Solitaire, you\u2019ll notice that you can do some crazy things with your cards: </p> <p>Now it is time to implement some rules.</p>"},{"location":"tutorials/solitaire/#general-rules","title":"General rules","text":"<p>Currently, we can move any card, but only face-up cards should be moved.  Let\u2019s add this check in <code>start_drag</code>, <code>drag</code> and <code>drop</code> methods of the card: <pre><code>def start_drag(self, e: ft.DragStartEvent):\n    if self.face_up:\n        self.move_on_top()\n        self.solitaire.update()\n\ndef drag(self, e: ft.DragUpdateEvent):\n    if self.face_up:\n        for card in self.draggable_pile:\n            card.top = max(0, self.top + e.delta_y) + self.draggable_pile.index(card) * CARD_OFFSET\n            card.left = max(0, self.left + e.delta_x)\n            card.solitaire.update()\n\ndef drop(self, e: ft.DragEndEvent):\n    if self.face_up:\n        for slot in self.solitaire.tableau:\n            if (\n                abs(self.top - (slot.top + len(slot.pile) * CARD_OFFSET)) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n                self.place(slot)\n                return\n\n        for slot in self.solitaire.foundations:\n            if (\n                    abs(self.top - slot.top) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n                self.place(slot)\n                return\n\n    self.bounce_back()\n</code></pre></p> <p>Now let\u2019s specify <code>click</code> method for the <code>on_tap</code> event of the card to reveal the card  if you click on a faced-down top card in a tableau pile: <pre><code>def click(self, e):\n    if self.slot in self.solitaire.tableau:\n        if not self.face_up and self == self.slot.get_top_card():\n            self.turn_face_up()\n            self.solitaire.update()\n</code></pre></p> <p>Let's check how it works:</p> <p></p>"},{"location":"tutorials/solitaire/#foundations-rules","title":"Foundations rules","text":"<p>At the moment we can place fanned piles to foundations, which shouldn\u2019t be allowed.  Let\u2019s check the draggable pile length to fix it:</p> <pre><code>def drop(self, e: ft.DragEndEvent):\n    for slot in self.solitaire.tableau:\n        if (\n            abs(self.top - (slot.top + len(slot.pile) * CARD_OFFSET)) &lt; DROP_PROXIMITY\n        and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n            self.place(slot)\n            return\n\n    if len(self.draggable_pile) == 1:\n        for slot in self.solitaire.foundations:\n            if (\n                abs(self.top - slot.top) &lt; DROP_PROXIMITY\n        and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n                self.place(slot)\n                return\n\n    self.bounce_back()\n</code></pre> <p>Then, of course, not any card can be placed to a foundation. According to the rules, a foundation should start with an Ace and then the cards of the same suite can be placed on top of it to build a pile form Ace to King.</p> <p>Let\u2019s add this rule to Solitaire class: <pre><code>def check_foundations_rules(self, card, slot):\n    top_card = slot.get_top_card()\n    if top_card is not None:\n        return (\n            card.suite.name == top_card.suite.name\n            and card.rank.value - top_card.rank.value == 1\n        )\n    else:\n        return card.rank.name == \"Ace\"\n</code></pre></p> <p>We\u2019ll check this rule in <code>drop()</code> method before placing a card to a foundation slot: <pre><code>def drop(self, e: ft.DragEndEvent):\n    if self.face_up:\n        for slot in self.solitaire.tableau:\n            if (\n                abs(self.top - (slot.top + len(slot.pile) * CARD_OFFSET)) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ):\n                self.place(slot)\n                return\n\n        if len(self.draggable_pile) == 1:\n            for slot in self.solitaire.foundations:\n                if (\n                    abs(self.top - slot.top) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ) and self.solitaire.check_foundations_rules(self, slot):\n                    self.place(slot)\n                    return\n\n        self.bounce_back()\n</code></pre></p> <p>As a final touch for foundations rules, let\u2019s implement <code>doublclick</code> method for <code>on_double_tap</code> event of a card.  It will be checking if the faced-up card fits into any of the foundations and place it there: <pre><code>   def double-click(self, e):\n       self.get_draggable_pile()\n       if self.face_up and len(self.draggable_pile == 1):\n           self.move_on_top()\n           for slot in self.solitaire.foundations:\n               if self.solitaire.check_foundations_rules(self, slot):\n                   self.place(slot)\n                   return\n</code></pre></p>"},{"location":"tutorials/solitaire/#tableau-rules","title":"Tableau rules","text":"<p>Finally, let's implement the rules to build tableau piles down from King to Ace by alternating suite color. Additionally, only King can be placed to an empty tableau slot.</p> <p>Let\u2019s add these rules for Solitaire class: <pre><code>def check_tableau_rules(self, card, slot):\n    top_card = slot.get_top_card()\n    if top_card is not None:\n        return (\n            card.suite.color != top_card.suite.color\n            and top_card.rank.value - card.rank.value == 1\n            and top_card.face_up\n        )\n    else:\n        return card.rank.name == \"King\"\n</code></pre> Similarly to the foundations rules, we\u2019ll check tableau rules before placing a card to a tableau pile: <pre><code>def drop(self, e: ft.DragEndEvent):\n    if self.face_up:\n        for slot in self.solitaire.tableau:\n            if (\n                abs(self.top - (slot.top + len(slot.pile) * CARD_OFFSET)) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ) and self.solitaire.check_tableau_rules(self, slot):\n                self.place(slot)\n                return\n\n        if len(self.draggable_pile) == 1:\n            for slot in self.solitaire.foundations:\n                if (\n                    abs(self.top - slot.top) &lt; DROP_PROXIMITY\n            and abs(self.left - slot.left) &lt; DROP_PROXIMITY\n        ) and self.solitaire.check_foundations_rules(self, slot):\n                    self.place(slot)\n                    return\n\n        self.bounce_back()\n</code></pre></p>"},{"location":"tutorials/solitaire/#stock-and-waste","title":"Stock and waste","text":"<p>To properly play Solitaire game right now we are missing the remaining cards that are piled in the stock.</p> <p>Let\u2019s update <code>click()</code> method of the card to go through the stock pile and place the cards to waste as we go: <pre><code>def click(self, e):\n    if self.slot in self.solitaire.tableau:\n        if not self.face_up and self == self.slot.get_top_card():\n            self.turn_face_up()\n    elif self.slot == self.solitaire.stock:\n        self.move_on_top()\n        self.place(self.solitaire.waste)\n        self.turn_face_up()\n</code></pre></p> <p>That\u2019s it! Now you can properly play solitaire, but it very difficult to win the game if  you cannot pass though the waste again. Let\u2019s implement <code>click()</code> for <code>on_click</code> event of  the stock Slot to go thought the stock pile again: <pre><code>class Slot(ft.Container):\n   def __init__(self, solitaire, top, left, border):\n       super().__init__()\n       self.pile=[]\n       self.width=SLOT_WIDTH\n       self.height=SLOT_HEIGHT\n       self.left=left\n       self.top=top\n       self.on_click=self.click\n       self.solitaire=solitaire\n       self.border=border\n       self.border_radius = ft.border_radius.all(6)\n\n   def click(self, e):\n       if self == self.solitaire.stock:\n           self.solitaire.restart_stock()\n</code></pre></p> <p><code>restart_stock()</code> method in <code>Solitaire</code> class will place all cards from waste to stock again: <pre><code>def restart_stock(self):\n    while len(self.waste.pile) &gt; 0:\n        card = self.waste.get_top_card()\n        card.turn_face_down()\n        card.move_on_top()\n        card.place(self.stock)   \n</code></pre></p> <p>For <code>card.place()</code> method to work properly with cards from Stock and Waste, we\u2019ve added a  condition to <code>card.get_draggable_pile()</code>, so that it returns the top card only and not the whole pile: <pre><code>    def get_draggable_pile(self):\n        \"\"\"returns list of cards that will be dragged together, starting with the current card\"\"\"\n\n        if (\n            self.slot is not None\n            and self.slot != self.solitaire.stock\n            and self.slot != self.solitaire.waste\n        ):\n            self.draggable_pile = self.slot.pile[self.slot.pile.index(self) :]\n        else:  # slot == None when the cards are dealt and need to be place in slot for the first time\n            self.draggable_pile = [self]\n</code></pre> All done! The full source code for this step can be found here.</p> <p>Let\u2019s move on to the last step of the game itself - detecting the situation when you have won.</p>"},{"location":"tutorials/solitaire/#winning-the-game","title":"Winning the game","text":"<p>According to wikipedia, some suggest the chances of winning the game as being 1 in 30 games. </p> <p>Knowing that the chances of winning are quite low, we should plan on showing the user something exciting when that finally happens.</p> <p>First, let\u2019s add a check for the winning condition to <code>Solitaire</code> class. If all four foundations contain total of 52 cards, then you have won: <pre><code>def check_win(self):\n    cards_num = 0\n    for slot in self.foundations:\n        cards_num += len(slot.pile)\n    if cards_num == 52:\n        return True\n    return False\n</code></pre></p> <p>We\u2019ll be checking if this condition is true each time a card is placed to a foundation: <pre><code>def place(self, slot):\n    \"\"\"Place draggable pile to the slot\"\"\"\n\n    draggable_pile = self.get_draggable_pile()\n\n    for card in draggable_pile:\n        if slot in self.solitaire.tableau:\n            card.top = slot.top + len(slot.pile) * CARD_OFFSET\n        else:\n            card.top = slot.top\n        card.left = slot.left\n\n        # remove card from it's original slot, if exists\n        if card.slot is not None:\n            card.slot.pile.remove(card)\n\n        # change card's slot to a new slot\n        card.slot = slot\n\n        # add card to the new slot's pile\n        slot.pile.append(card)\n\n    if self.solitaire.check_win():\n        self.solitaire.winning_sequence()\n\n    self.solitaire.update()\n</code></pre></p> <p>Finally, if the winning condition is met, it will trigger a winning sequence involving position animation: <pre><code>def winning_sequence(self):\n    for slot in self.foundations:   \n        for card in slot.pile:\n            card.animate_position=1000\n            card.move_on_top()\n            card.top = random.randint(0, SOLITAIRE_HEIGHT)\n            card.left = random.randint(0, SOLITAIRE_WIDTH)\n            self.update()\n    self.controls.append(ft.AlertDialog(title=ft.Text(\"Congratulations! You won!\"), open=True))\n</code></pre></p> <p></p> <p>Wow! We did it. You can find the full source code for the Solitaire game here. </p> <p>Now, as we have a decent desktop version of the game, let\u2019s deploy it as a web app to share with your friends and colleagues.</p>"},{"location":"tutorials/solitaire/#deploying-the-app","title":"Deploying the app","text":"<p>Congratulations! You have created your Solitaire game app in Python with Flet, and it looks awesome!</p> <p>Now it's time to share your app with the world!</p> <p>Follow these instructions to deploy your Flet app as a web app to Fly.io or Replit.</p>"},{"location":"tutorials/solitaire/#summary","title":"Summary","text":"<p>In this tutorial, you have learnt how to:</p> <ul> <li>Create a simple Flet app;</li> <li>Drag and drop cards with GestureDetector;</li> <li>Create your own classes that inherit from Flet controls;</li> <li>Design UI layout using absolute positioning of controls in Stack;</li> <li>Implement implicit animations;</li> <li>Deploy your Flet app to the web;</li> </ul> <p>For further reading you can explore controls and examples repository.</p> <p>We would love to hear your feedback! Please drop us an email, join the discussion on Discord.</p>"},{"location":"tutorials/todo/","title":"ToDo Tutorial","text":"<p>In this tutorial we will show you, step-by-step, how to create a To-Do app in Python using Flet framework and then publish it as a desktop, mobile or web app. The app is a single-file console program of just 172 lines (formatted!) of Python code, yet it is a multi-platform application with rich, responsive UI:</p> <p></p> <p>You can see the live demo here.</p> <p>We chose a To-Do app for the tutorial, because it covers all of the basic concepts you would need to create a Flet app: building a page layout, adding controls, handling events, displaying and editing lists, making reusable UI components, and publishing options.</p> <p>The tutorial consists of the following steps:</p> <ul> <li>Getting started with Flet</li> <li>Adding page controls and handling events</li> <li>View, edit and delete list items</li> <li>Filtering list items</li> <li>Final touches</li> <li>Publishing the app</li> </ul>"},{"location":"tutorials/todo/#getting-started-with-flet","title":"Getting started with Flet","text":"<p>To create a multi-platform app in Python with Flet, you don't need to know HTML, CSS or JavaScript, but you do need a basic knowledge of Python and object-oriented programming.</p> <p>Before you can create your first Flet app, you need to setup your development environment, which requires Python 3.9 or above and <code>flet</code> package.</p> <p>Once you have Flet installed, let's create a simple hello-world app.</p> <p>Create <code>hello.py</code> with the following contents:</p> hello.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(value=\"Hello, world!\"))\n\nft.run(main)\n</code></pre> <p>Run this app and you will see a new window with a greeting:</p> <p></p>"},{"location":"tutorials/todo/#adding-page-controls-and-handling-events","title":"Adding page controls and handling events","text":"<p>Now we're ready to create a multi-user To-Do app.</p> <p>To start, we'll need a TextField for entering a task name, and an \"+\" FloatingActionButton with an event handler that will display a Checkbox with a new task.</p> <p>Create <code>todo.py</code> with the following contents:</p> todo.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def add_clicked(e):\n        page.add(ft.Checkbox(label=new_task.value))\n        new_task.value = \"\"\n        page.update()\n\n    new_task = ft.TextField(hint_text=\"What's needs to be done?\")\n\n    page.add(new_task, ft.FloatingActionButton(icon=ft.Icons.ADD, on_click=add_clicked))\n\nft.run(main)\n</code></pre> <p>Run the app and you should see a page like this:</p> <p></p>"},{"location":"tutorials/todo/#page-layout","title":"Page layout","text":"<p>Now let's make the app look nice! We want the entire app to be at the top center of the page,  taking up 600 px width. The TextField and the \"+\" button should be aligned horizontally, and take up full app width:</p> <p></p> <p><code>Row</code>  is a control that is used to lay its children controls out horizontally on a page.  <code>Column</code> is a control that is used to lay its children controls out vertically on a page.</p> <p>Replace <code>todo.py</code> contents with the following:</p> todo.py<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def add_clicked(e):\n        tasks_view.controls.append(ft.Checkbox(label=new_task.value))\n        new_task.value = \"\"\n        view.update()\n\n    new_task = ft.TextField(hint_text=\"What needs to be done?\", expand=True)\n    tasks_view = ft.Column()\n    view=ft.Column(\n        width=600,\n        controls=[\n            ft.Row(\n                controls=[\n                    new_task,\n                    ft.FloatingActionButton(icon=ft.Icons.ADD, on_click=add_clicked),\n                ],\n            ),\n            tasks_view,\n        ],\n    )\n\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.add(view)\n\nft.run(main)\n</code></pre> <p>Run the app and you should see a page like this:</p> <p></p>"},{"location":"tutorials/todo/#reusable-ui-components","title":"Reusable UI components","text":"<p>While we could continue writing our app in the <code>main</code> function, the best practice would be to  create a reusable UI component. Imagine you are working on an app header, a side menu,  or UI that will be a part of a larger project. Even if you can't think of such uses right now,  we still recommend creating all your Flet apps with composability and reusability in mind.</p> <p>To make a reusable To-Do app component, we are going to encapsulate its state and presentation  logic in a separate class: </p> todo.py<pre><code>import flet as ft\n\nclass TodoApp(ft.Column):\n    # application's root control is a Column containing all other controls\n    def __init__(self):\n        super().__init__()\n        self.new_task = ft.TextField(hint_text=\"What needs to be done?\", expand=True)\n        self.tasks_view = ft.Column()\n        self.width = 600\n        self.controls = [\n            ft.Row(\n                controls=[\n                    self.new_task,\n                    ft.FloatingActionButton(\n                        icon=ft.Icons.ADD, on_click=self.add_clicked\n                    ),\n                ],\n            ),\n            self.tasks_view,\n        ]\n\n    def add_clicked(self, e):\n        self.tasks_view.controls.append(ft.Checkbox(label=self.new_task.value))\n        self.new_task.value = \"\"\n        self.update()\n\n\ndef main(page: ft.Page):\n    page.title = \"To-Do App\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.update()\n\n    # create application instance\n    todo = TodoApp()\n\n    # add application's root control to the page\n    page.add(todo)\n\nft.run(main)\n</code></pre> Try this out! <p>Try adding two <code>TodoApp</code> components to the page:</p> <pre><code># create application instance\napp1 = TodoApp()\napp2 = TodoApp()\n\n# add application's root control to the page\npage.add(app1, app2)\n</code></pre>"},{"location":"tutorials/todo/#view-edit-and-delete-list-items","title":"View, edit and delete list items","text":"<p>In the previous step, we created a basic To-Do app with task items shown as checkboxes.  Let's improve the app by adding \"Edit\" and \"Delete\" buttons next to a task name. The \"Edit\" button  will switch a task item to edit mode.</p> <p></p> <p>Each task item is represented by two rows: <code>display_view</code> row with Checkbox, \"Edit\" and \"Delete\"  buttons and <code>edit_view</code> row with TextField and \"Save\" button. <code>view</code> column serves as a container  for both <code>display_view</code> and <code>edit_view</code> rows.</p> <p>Before this step, the code was short enough to be fully included in the tutorial. Going forward,  we will be highlighting only the changes introduced in a step.</p> <p>Copy the entire code for this step from here. Below we will explain the changes we've done  to implement view, edit, and delete tasks.</p> <p>To encapsulate task item views and actions, we introduced a new <code>Task</code> class:</p> todo.py<pre><code>class Task(ft.Column):\n    def __init__(self, task_name, task_delete):\n        super().__init__()\n        self.task_name = task_name\n        self.task_delete = task_delete\n        self.display_task = ft.Checkbox(value=False, label=self.task_name)\n        self.edit_name = ft.TextField(expand=1)\n\n        self.display_view = ft.Row(\n            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n            vertical_alignment=ft.CrossAxisAlignment.CENTER,\n            controls=[\n                self.display_task,\n                ft.Row(\n                    spacing=0,\n                    controls=[\n                        ft.IconButton(\n                            icon=ft.Icons.CREATE_OUTLINED,\n                            tooltip=\"Edit To-Do\",\n                            on_click=self.edit_clicked,\n                        ),\n                        ft.IconButton(\n                            ft.Icons.DELETE_OUTLINE,\n                            tooltip=\"Delete To-Do\",\n                            on_click=self.delete_clicked,\n                        ),\n                    ],\n                ),\n            ],\n        )\n\n        self.edit_view = ft.Row(\n            visible=False,\n            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n            vertical_alignment=ft.CrossAxisAlignment.CENTER,\n            controls=[\n                self.edit_name,\n                ft.IconButton(\n                    icon=ft.Icons.DONE_OUTLINE_OUTLINED,\n                    icon_color=ft.Colors.GREEN,\n                    tooltip=\"Update To-Do\",\n                    on_click=self.save_clicked,\n                ),\n            ],\n        )\n        self.controls = [self.display_view, self.edit_view]\n\n    def edit_clicked(self, e):\n        self.edit_name.value = self.display_task.label\n        self.display_view.visible = False\n        self.edit_view.visible = True\n        self.update()\n\n    def save_clicked(self, e):\n        self.display_task.label = self.edit_name.value\n        self.display_view.visible = True\n        self.edit_view.visible = False\n        self.update()\n\n    def delete_clicked(self, e):\n        self.task_delete(self)\n</code></pre> <p>Additionally, we changed <code>TodoApp</code> class to create and hold <code>Task</code> instances when the \"Add\" button is clicked:</p> todo.py<pre><code>class TodoApp(ft.Column):\n    # application's root control is a Column containing all other controls\n    def __init__(self):\n        super().__init__()\n        self.new_task = ft.TextField(hint_text=\"What needs to be done?\", expand=True)\n        self.tasks = ft.Column()\n        self.width = 600\n        self.controls = [\n            ft.Row(\n                controls=[\n                    self.new_task,\n                    ft.FloatingActionButton(\n                        icon=ft.Icons.ADD, on_click=self.add_clicked\n                    ),\n                ],\n            ),\n            self.tasks,\n        ]\n\n    def add_clicked(self, e):\n        task = Task(self.new_task.value, self.task_delete)\n        self.tasks.controls.append(task)\n        self.new_task.value = \"\"\n        self.update()\n\n    def task_delete(self, task):\n        self.tasks.controls.remove(task)\n        self.update()\n</code></pre> <p>For \"Delete\" task operation, we implemented <code>task_delete()</code> method in <code>TodoApp</code> class which  accepts task control instance as a parameter.</p> <p>Then, we passed a reference to <code>task_delete</code> method into Task constructor and called it on  \"Delete\" button event handler.</p> <p>Run the app and try to edit and delete tasks:</p> <p></p>"},{"location":"tutorials/todo/#filtering-list-items","title":"Filtering list items","text":"<p>We already have a functional To-Do app where we can create, edit, and delete tasks.  To be even more productive, we want to be able to filter tasks by their status.</p> <p>Copy the entire code for this step from here. Below we will explain the changes we've done  to implement filtering.</p> <p><code>Tabs</code> control is used to display filter:</p> todo.py<pre><code># ...\n\nclass TodoApp(ft.Column):\n    # application's root control is a Column containing all other controls\n    def __init__(self):\n        super().__init__()\n        self.new_task = ft.TextField(hint_text=\"What's needs to be done?\", expand=True)\n        self.tasks = ft.Column()\n\n        self.filter = ft.Tabs(\n            selected_index=0,\n            on_change=self.tabs_changed,\n            tabs=[ft.Tab(text=\"all\"), ft.Tab(text=\"active\"), ft.Tab(text=\"completed\")],\n        )\n\n    # ...\n</code></pre> <p>To display different lists of tasks depending on their statuses, we could maintain three  lists with \"All\", \"Active\" and \"Completed\" tasks. We, however, chose an easier approach  where we maintain the same list and only change a task's visibility depending on its status.</p> <p>In <code>TodoApp</code> class we overrided <code>before_update()</code> method alled every time when the  control is being updated. It iterates through all the tasks and updates their <code>visible</code>  property depending on the status of the task:</p> todo.py<pre><code>class TodoApp(ft.Column):\n\n    # ...\n\n    def before_update(self):\n        status = self.filter.tabs[self.filter.selected_index].text\n        for task in self.tasks.controls:\n            task.visible = (\n                status == \"all\"\n                or (status == \"active\" and task.completed == False)\n                or (status == \"completed\" and task.completed)\n            )\n</code></pre> <p>Filtering should occur when we click on a tab or change a task status. <code>TodoApp.before_update()</code> method is called when Tabs selected value is changed or Task item checkbox is clicked:</p> todo.py<pre><code>class TodoApp(ft.Column):\n\n    # ...\n\n    def tabs_changed(self, e):\n        self.update()\n\n    def task_status_change(self, e):\n        self.update()\n\n    def add_clicked(self, e):\n        task = Task(self.new_task.value, self.task_status_change, self.task_delete)\n    # ...\n\nclass Task(ft.Column):\n    def __init__(self, task_name, task_status_change, task_delete):\n        super().__init__()\n        self.completed = False\n        self.task_name = task_name\n        self.task_status_change = task_status_change\n        self.task_delete = task_delete\n        self.display_task = ft.Checkbox(\n            value=False, label=self.task_name, on_change=self.status_changed\n        )\n        # ...\n\n    def status_changed(self, e):\n        self.completed = self.display_task.value\n        self.task_status_change()\n</code></pre> <p>Run the app and try filtering tasks by clicking on the tabs:</p> <p></p>"},{"location":"tutorials/todo/#final-touches","title":"Final touches","text":"<p>Our Todo app is almost complete now. As a final touch, we will add a footer (<code>Column</code> control)  displaying the number of incomplete tasks (<code>Text</code> control) and a \"Clear completed\" button.</p> <p>Copy the entire code for this step from here. Below we highlighted the changes we've  done to implement the footer:</p> <p>todo.py<pre><code>class TodoApp():\n    def __init__(self):\n        # ...\n\n        self.items_left = ft.Text(\"0 items left\")\n\n        self.width = 600\n        self.controls = [\n            ft.Row(\n                [ft.Text(value=\"Todos\", theme_style=ft.TextThemeStyle.HEADLINE_MEDIUM)],\n                alignment=ft.MainAxisAlignment.CENTER,\n            ),\n            ft.Row(\n                controls=[\n                    self.new_task,\n                    ft.FloatingActionButton(\n                        icon=ft.Icons.ADD, on_click=self.add_clicked\n                    ),\n                ],\n            ),\n            ft.Column(\n                spacing=25,\n                controls=[\n                    self.filter,\n                    self.tasks,\n                    ft.Row(\n                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                        vertical_alignment=ft.CrossAxisAlignment.CENTER,\n                        controls=[\n                            self.items_left,\n                            ft.OutlinedButton(\n                                text=\"Clear completed\", on_click=self.clear_clicked\n                            ),\n                        ],\n                    ),\n                ],\n            ),\n        ]\n\n    # ...\n\n    def clear_clicked(self, e):\n        for task in self.tasks.controls[:]:\n            if task.completed:\n                self.task_delete(task)\n\n    def before_update(self):\n        status = self.filter.tabs[self.filter.selected_index].text\n        count = 0\n        for task in self.tasks.controls:\n            task.visible = (\n                status == \"all\"\n                or (status == \"active\" and task.completed == False)\n                or (status == \"completed\" and task.completed)\n            )\n            if not task.completed:\n                count += 1\n        self.items_left.value = f\"{count} active item(s) left\"\n</code></pre> Run the app:</p> <p></p>"},{"location":"tutorials/todo/#publishing-the-app","title":"Publishing the app","text":"<p>Congratulations! You have created your first Python app with Flet, and it looks awesome!</p> <p>Now it's time to share your app with the world!</p> <p>Follow these instructions to publish your Flet app as a mobile, desktop or web app.</p>"},{"location":"tutorials/todo/#summary","title":"Summary","text":"<p>In this tutorial, you have learnt how to:</p> <ul> <li>Create a simple Flet app;</li> <li>Work with Reusable UI components;</li> <li>Design UI layout using <code>Column</code> and <code>Row</code> controls;</li> <li>Work with lists: view, edit and delete items, filtering;</li> <li>Publish your Flet app to multiple platforms;</li> </ul> <p>For further reading you can explore controls and examples repository.</p> <p>We would love to hear your feedback! Please drop us an email, join the discussion on Discord.</p>"},{"location":"tutorials/trolli/","title":"Trolli Tutorial","text":"<p>Let's make a clone of Trello in Python with the Flet framework and then deploy it to fly.io!</p> <p></p> <p>The code for this tutorial can be found here with self explanatory commits.  Be sure to run <code>pip install -r requirements.txt</code> after cloning. </p> <p>You can see the live demo here.</p>"},{"location":"tutorials/trolli/#why-flet","title":"Why Flet?","text":"<p>Most developers are undoubtedly familiar with the situation of either having developed a console app that  turns out to have a wider audience than originally intended, or needing to develop an internal tool for  non-developers but which is destined to have a small user base and/or a relatively brief shelf life.  In situations like these it can often feel awkward to reach for an oversized tool such as electron,  a feature rich framework like flutter (irony acknowledged!), or try to quickly get a handle on some other  cross platform framework like .NET MAUI. What we would really like is to be able to throw a UI on our logic  that looks generically decent, has acceptable performance, and ideally, takes less time to write than did  the business logic, and preferably in the same language in which the rest of the logic was written - i.e.  a language with which we are already proficient (currently the only released library is in Python but C#,  Typescript, and Golang libraries are on the roadmap). This is exactly what the Flet platform aims to provide. </p> <p>Flet takes a different approach to many new UI frameworks that is arguably more intuitive to the majority  of experienced programmers. Diverging from the currently ubiquitous declarative approach and opting instead  for an imperative model. </p> <p>Having intimated that Flet is designed with simple GUIs in mind, lets nonetheless try to make something a  tad more complicated than, for example, a simple dashboard with some filters, and shoot for something like a  minimal version of Trello - and bestow upon it the totally-independently-arrived-at-name, Trolli. For the purposes of this tutorial I'll assume the reader is familiar with the basic concept and setup of a  Flet project (read the tutorials and the docs if not), and instead focus more on aspects  that are not part of the existing tutorials.</p>"},{"location":"tutorials/trolli/#defining-entities-and-layout","title":"Defining Entities and Layout","text":"<p>With the proximate goal of creating the MVP of our clone, let's start by defining the main  entities (<code>boards</code>, <code>board_lists</code>, <code>items</code>), settle on an acceptable design and layout, and implement  a sort of pseudo-repository pattern so that in future development we can move from in-memory data storage  to persistent storage of some kind. </p> <p>Here, in the <code>main.py</code> module we'll add this code and then continue to define the <code>TrelloApp</code> class. </p> main.py<pre><code>import flet as ft\n\nif __name__ == \"__main__\":\n    def main(page: ft.Page):\n        page.title = \"Flet Trello clone\"\n        page.padding = 0\n        page.bgcolor = colors.BLUE_GREY_200\n        app = TrelloApp(page)\n        page.add(app)\n        page.update()\n\n    ft.run(main)\n</code></pre> <p>In terms of layout we can consider the app to consist of a header (<code>appbar</code>) and below that a  collapsible navigation panel, next to which is the active view consisting of either a board, settings,  members or whatever else we may choose. Something like this...</p> <p></p> <p>So the class for the app itself could look something like this... </p> <pre><code>import flet as ft\n\nclass TrelloApp:\n    def __init__(self, page: ft.Page):\n        self.page = page\n        self.appbar_items = [\n            ft.PopupMenuItem(text=\"Login\"),\n            ft.PopupMenuItem(),  # divider\n            ft.PopupMenuItem(text=\"Settings\")\n        ]\n        self.appbar = ft.runBar(\n            leading=ft.Icon(ft.Icons.GRID_GOLDENRATIO_ROUNDED),\n            leading_width=100,\n            title=ft.Text(\"Trolli\",size=32, text_align=\"start\"),\n            center_title=False,\n            toolbar_height=75,\n            bgcolor=ft.Colors.LIGHT_BLUE_ACCENT_700,\n            actions=[\n                ft.Container(\n                    content=ft.PopupMenuButton(\n                        items=self.appbar_items\n                    ),\n                    margin=ft.margin.only(left=50, right=25)\n                )\n            ],\n        )\n        self.page.appbar = self.appbar\n        self.page.update()\n</code></pre> <p>In a new file (<code>app_layout.py</code>) we can define a layout for our app in a class which will inherit from  the <code>Row</code> control and in which the navigation rail along with a toggle button to collapse and expand it,  and the main content area are laid out. But rather than define the navigation sidebar in that module, we'll  place that in its own <code>sidebar.py</code> module. </p> app_layout.py<pre><code>import flet as ft\nfrom sidebar import Sidebar\n\n\nclass AppLayout(ft.Row):\n    def __init__(self, app, page: ft.Page, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.app = app\n        self.page = page\n        self.toggle_nav_rail_button = ft.IconButton(\n            icon=ft.Icons.ARROW_CIRCLE_LEFT,\n            icon_color=ft.Colors.BLUE_GREY_400,\n            selected=False,\n            selected_icon=ft.Icons.ARROW_CIRCLE_RIGHT,\n            on_click=self.toggle_nav_rail,\n        )\n        self.sidebar = Sidebar(self, page)\n        self._active_view: Control = ft.Column(\n            controls=[ft.Text(\"Active View\")],\n            alignment=ft.MainAxisAlignment.CENTER,\n            horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n        )\n        self.controls = [self.sidebar, self.toggle_nav_rail_button, self.active_view]\n\n    @property\n    def active_view(self):\n        return self._active_view\n\n    @active_view.setter\n    def active_view(self, view):\n        self._active_view = view\n        self.update()\n\n    def toggle_nav_rail(self, e):\n        self.sidebar.visible = not self.sidebar.visible\n        self.toggle_nav_rail_button.selected = not self.toggle_nav_rail_button.selected\n        self.page.update()\n</code></pre> <p>And here is the <code>Sidebar.py</code> file.</p> sidebar.py<pre><code>import flet as ft\n\n\nclass Sidebar(ft.Container):\n\n    def __init__(self, app_layout, store: DataStore):\n        self.store: DataStore = store\n        self.app_layout = app_layout\n        self.nav_rail_visible = True\n        self.top_nav_items = [\n            ft.NavigationRailDestination(\n                label_content=ft.Text(\"Boards\"),\n                label=\"Boards\",\n                icon=ft.Icons.BOOK_OUTLINED,\n                selected_icon=ft.Icons.BOOK_OUTLINED,\n            ),\n            ft.NavigationRailDestination(\n                label_content=ft.Text(\"Members\"),\n                label=\"Members\",\n                icon=ft.Icons.PERSON,\n                selected_icon=ft.Icons.PERSON,\n            ),\n        ]\n\n        self.top_nav_rail = ft.NavigationRail(\n            selected_index=None,\n            label_type=ft.NavigationRailLabelType.ALL,\n            on_change=self.top_nav_change,\n            destinations=self.top_nav_items,\n            bgcolor=ft.Colors.BLUE_GREY,\n            extended=True,\n            height=110,\n        )\n\n        self.toggle_nav_rail_button = ft.IconButton(ft.Icons.ARROW_BACK)\n\n        super().__init__(\n            content=ft.Column(\n                [\n                    ft.Row(\n                        [\n                            ft.Text(\"Workspace\"),\n                        ],\n                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                    ),\n                    # divider\n                    ft.Container(\n                        bgcolor=ft.Colors.BLACK26,\n                        border_radius=ft.border_radius.all(30),\n                        height=1,\n                        alignment=ft.alignment.center_right,\n                        width=220,\n                    ),\n                    self.top_nav_rail,\n                    # divider\n                    ft.Container(\n                        bgcolor=ft.Colors.BLACK26,\n                        border_radius=ft.border_radius.all(30),\n                        height=1,\n                        alignment=ft.alignment.center_right,\n                        width=220,\n                    ),\n                ],\n                tight=True,\n            ),\n            padding=ft.padding.all(15),\n            margin=ft.margin.all(0),\n            width=250,\n            bgcolor=ft.Colors.BLUE_GREY,\n            visible=self.nav_rail_visible,\n        )\n\n    def top_nav_change(self, e):\n        self.top_nav_rail.selected_index = e.control.selected_index\n        self.update()\n</code></pre> <p>If we run the main app with <pre><code>flet run\n</code></pre></p> <p>we can see the result and get hot reloading when we make any style changes.  For example, try adding <code>alignment=ft.MainAxisAlignment.CENTER</code> to the first row in the container like this\u2026 <pre><code>content = ft.Column(\n    alignment=ft.MainAxisAlignment.CENTER),\n    controls=[\n        ft.Row([ft.Text(\"Workspace\")]),\n    ], \n)\n</code></pre></p> <p>If you save the file you should be able to see the change in your app window. </p> <p></p> <p>Before we move on let's define our basic entities. We'll need a <code>Board</code> class, which will keep a list of lists, each of which will be a <code>BoardList</code> object (apologies for the unfortunate lexical collisions here - the colloquial use of 'list' derives from the nature of the app, whereas the technical use of 'list' derives from python's particular term for an array-like data structure), and each of which, in turn, will contain a list of <code>Item</code> objects. If that's confusing, take some time to look over the source code to clear things up. </p> <p>For each of the entities, we'll add an application wide unique id with an <code>id_counter = itertools.count()</code> statement at the top of each class and a call to <code>next(Board.id_counter)</code> at initialization. This way two lists or boards can have the same name but still represent distinct entities. </p>"},{"location":"tutorials/trolli/#data-access-layer-and-customization","title":"Data Access Layer and Customization","text":"<p>Now that we have a basic layout and entities defined, let's add a few customization parameters to the app itself. Lets also take some time to create a basic data access interface. You can see the boiler plate for the interface and the in-memory implementation in the <code>data_store.py</code> and <code>memory_store.py</code> files respectively. This will make it easier for us to swap in some persistent storage solution in a future tutorial.</p> <p>Here is the updated main function. We need to instantiate the <code>InMemoryStore</code> class within the main method so that each user session (i.e. each new tab using the app), has it's own version of the store. We'll then need to pass that store to each of the components that will need access to it.</p> <p>We'll also add a new font in an assets directory, which is specified in the named argument to the app function.</p> <pre><code>if __name__ == \"__main__\":\n\n    def main(page: ft.Page):\n\n        page.title = \"Flet Trello clone\"\n        page.padding = 0\n        page.theme = ft.Theme(font_family=\"Verdana\")\n        page.theme_mode = ft.ThemeMode.LIGHT\n        page.theme.page_transitions.windows = \"cupertino\"\n        page.fonts = {\"Pacifico\": \"/Pacifico-Regular.ttf\"}\n        page.bgcolor = ft.Colors.BLUE_GREY_200\n        page.update()\n        app = TrelloApp(page)\n\n    ft.run(main, assets_dir=\"../assets\")\n</code></pre>"},{"location":"tutorials/trolli/#application-logic","title":"Application Logic","text":"<p>You can run the app now but apart from a nicer font for the name, it still does not have any functionality. </p> <p>Now it's time to fill out the application logic. Although this app might qualify as non-trivial, we won't  bother to separate the code into distinct application and business layers. The separation of the data access  and the rest of the logic will suffice for this non-architecturally focused tutorial, though further separation  may be a sensible thing to consider. </p>"},{"location":"tutorials/trolli/#creating-views","title":"Creating Views","text":"<p>First up, we will add views to correspond to the sidebar navigation destinations. </p> <p>We need a view to display all boards and a view to display a Members pane which, for now, will simply be a  placeholder until a future tutorial. We'll add these views as controls to the <code>app_layout.py</code> module. </p> app_layout.py<pre><code>self.members_view = ft.Text(\"members view\")\n\nself.all_boards_view = ft.Column(\n    [\n        ft.Row(\n            [\n                ft.Container(\n                    ft.Text(\n                        value=\"Your Boards\",\n                        theme_style=ft.TextThemeStyle.HEADLINE_MEDIUM,\n                    ),\n                    expand=True,\n                    padding=ft.padding.only(top=15),\n                ),\n                ft.Container(\n                    ft.TextButton(\n                        \"Add new board\",\n                        icon=ft.Icons.ADD,\n                        on_click=self.app.add_board,\n                        style=ft.ButtonStyle(\n                            bgcolor={\n                                ft.ControlState.DEFAULT: ft.Colors.BLUE_200,\n                                ft.ControlState.HOVERED: ft.Colors.BLUE_400,\n                            },\n                            shape={\n                                ft.ControlState.DEFAULT: ft.RoundedRectangleBorder(\n                                    radius=3\n                                )\n                            },\n                        ),\n                    ),\n                    padding=ft.padding.only(right=50, top=15),\n                ),\n            ]\n        ),\n        ft.Row(\n            [\n                ft.TextField(\n                    hint_text=\"Search all boards\",\n                    autofocus=False,\n                    content_padding=ft.padding.only(left=10),\n                    width=200,\n                    height=40,\n                    text_size=12,\n                    border_color=ft.Colors.BLACK26,\n                    focused_border_color=ft.Colors.BLUE_ACCENT,\n                    suffix_icon=ft.Icons.SEARCH,\n                )\n            ]\n        ),\n        ft.Row([ft.Text(\"No Boards to Display\")]),\n    ],\n    expand=True,\n)\n</code></pre> <p>Since we are working in an imperative paradigm and have no explicit state management tool such as redux or the like,  we will need a method to 'rehydrate' the view that shows all the boards so that its current state reflects changes  made in other entities (namely the sideboard).</p> <pre><code>def hydrate_all_boards_view(self):\n    self.all_boards_view.controls[-1] = ft.Row(\n        [\n            ft.Container(\n                content=ft.Row(\n                    [\n                        ft.Container(\n                            content=ft.Text(value=b.name),\n                            data=b,\n                            expand=True,\n                            on_click=self.board_click,\n                        ),\n                        ft.Container(\n                            content=ft.PopupMenuButton(\n                                items=[\n                                    ft.PopupMenuItem(\n                                        content=ft.Text(\n                                            value=\"Delete\",\n                                            theme_style=ft.TextThemeStyle.LABEL_MEDIUM,\n                                            text_align=ft.TextAlign.CENTER,\n                                        ),\n                                        on_click=self.app.delete_board,\n                                        data=b,\n                                    ),\n                                    ft.PopupMenuItem(),\n                                    ft.PopupMenuItem(\n                                        content=ft.Text(\n                                            value=\"Archive\",\n                                            theme_style=ft.TextThemeStyle.LABEL_MEDIUM,\n                                            text_align=ft.TextAlign.CENTER,\n                                        ),\n                                    ),\n                                ]\n                            ),\n                            padding=ft.padding.only(right=-10),\n                            border_radius=ft.border_radius.all(3),\n                        ),\n                    ],\n                    alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                ),\n                border=ft.border.all(1, ft.Colors.BLACK38),\n                border_radius=ft.border_radius.all(5),\n                bgcolor=ft.Colors.WHITE60,\n                padding=ft.padding.all(10),\n                width=250,\n                data=b,\n            )\n            for b in self.store.get_boards()\n        ],\n        wrap=True,\n    )\n    self.sidebar.sync_board_destinations()\n</code></pre>"},{"location":"tutorials/trolli/#syncing-navigation-panel","title":"Syncing Navigation Panel","text":"<p>Next up we need a visually distinct section of the navigation panel to display boards we've created.  We'll add a second, <code>bottom_nav_rail</code> to the sidebar to represent when a particular board is the active view.  This will necessitate a <code>sync_board_destinations</code> method in the sidebar component to be called whenever any change  has been made to the list of current boards.  We'll now have a change handler for each of the top and bottom nav rails. </p> <p><pre><code>self.top_nav_rail = ft.NavigationRail(\n    selected_index=None,\n    label_type=ft.NavigationRailLabelType.ALL,\n    on_change=self.top_nav_change,\n    destinations=self.top_nav_items,\n    bgcolor=ft.Colors.BLUE_GREY,\n    extended=True,\n    height=110,\n)\n\nself.bottom_nav_rail = ft.NavigationRail(\n    selected_index=None,\n    label_type=ft.NavigationRailLabelType.ALL,\n    on_change=self.bottom_nav_change,\n    extended=True,\n    expand=True,\n    bgcolor=ft.Colors.BLUE_GREY,\n)\n\n# ...\n\ndef sync_board_destinations(self):\n    boards = self.store.get_boards()\n    self.bottom_nav_rail.destinations = []\n    for i in range(len(boards)):\n        b = boards[i]\n        self.bottom_nav_rail.destinations.append(\n            ft.NavigationRailDestination(\n                label_content=ft.TextField(\n                    value=b.name,\n                    hint_text=b.name,\n                    text_size=12,\n                    read_only=True,\n                    on_focus=self.board_name_focus,\n                    on_blur=self.board_name_blur,\n                    border=ft.InputBorder.NONE,\n                    height=50,\n                    width=150,\n                    text_align=ft.TextAlign.START,\n                    data=i,\n                ),\n                label=b.name,\n                selected_icon=ft.Icons.CHEVRON_RIGHT_ROUNDED,\n                icon=ft.Icons.CHEVRON_RIGHT_OUTLINED,\n            )\n        )\n</code></pre> Now we can add new boards and they appear in our navigation rail.  Unfortunately clicking on the navigation rail doesn't actually navigate to anything. </p> <p></p> <p>There are several ways we could achieve this such as having every view present in the <code>app_layout.py</code>  module and then toggling visibility on/off of the relevant views depending on the navigation rail index.  But that wouldn't help much in a browser context, nor in a mobile context with a back button.  We'll need to consider routing. Flet provides a <code>TemplateRoute</code> utility class for url matching. </p>"},{"location":"tutorials/trolli/#routing","title":"Routing","text":"<p>In the <code>main.py</code> module let's wire up a handler to the <code>page.on_route_change</code> event. </p> main.py<pre><code>class TrelloApp(AppLayout):\n    def __init__(self, page: ft.Page, user=None):\n        ...\n        self.page.on_route_change = self.route_change\n        ...\n\n    def initialize(self):\n        self.page.views.append(\n            ft.View(\n                \"/\",\n                [self.appbar, self],\n                padding=ft.padding.all(0),\n                bgcolor=ft.Colors.BLUE_GREY_200,\n            )\n        )\n        self.page.update()\n        # create an initial board for demonstration if no boards\n        if len(self.boards) == 0:\n            self.create_new_board(\"My First Board\")\n        self.page.go(\"/\")\n\n    def route_change(self, e):\n        troute = ft.TemplateRoute(self.page.route)\n        if troute.match(\"/\"):\n            self.page.go(\"/boards\")\n        elif troute.match(\"/board/:id\"):\n            if int(troute.id) &gt; len(self.store.get_boards()):\n                self.page.go(\"/\")\n                return\n            self.set_board_view(int(troute.id))\n        elif troute.match(\"/boards\"):\n            self.set_all_boards_view()\n        elif troute.match(\"/members\"):\n            self.set_members_view()\n        self.page.update()\n</code></pre> <p>While here, we'll also change our initialization method so that the app starts with a pre-made board  for demonstration purposes. Within that method note that we add a flet <code>View</code> object to the page.  The page maintains a list of Views as top level containers for other Controls in order to track navigation history.  We'll need to add the corresponding <code>set_***_view</code> methods to the <code>layout.py</code> module as well.  Here is the <code>set_board_view</code> method for example...</p> layout.py<pre><code>def set_board_view(self, i):\n    self.active_view = self.store.get_boards()[i]\n    self.sidebar.bottom_nav_rail.selected_index = i\n    self.sidebar.top_nav_rail.selected_index = None\n    self.page.update()\n</code></pre> <p>Now, if we fire up the project in a web browser with the  <pre><code>flet run -dw\n</code></pre> command (-d flag for hot reloading, and -w flag for web) we can add some boards and reach them by  clicking or entering <code>board/{i}</code>, where i is the zero indexed board, as the url.</p> <p></p>"},{"location":"tutorials/trolli/#changing-board-names","title":"Changing Board Names","text":"<p>Next, we should include the ability to change the name of a board. In contrast to the more \"proper\"  title editing logic that was implemented in the <code>board_list.py</code> module I'm going to favor what some might  consider a more \"hacky\" approach because I personally dislike overly ceremonial editing flows,  particularly in such a low stakes, fluid sort of application. We'll make use of the <code>on_focus</code> and <code>on_blur</code>  events in the bottom navigation rail destinations in the <code>sidebar.py</code> module. Here are the handlers we'll add.</p> sidebar.py<pre><code>def board_name_focus(self, e):\n    e.control.read_only = False\n    e.control.border = ft.InputBorder.OUTLINE\n    self.page.update()\n\n\ndef board_name_blur(self, e):\n    self.store.update_board(\n        self.store.get_boards()[e.control.data], {\"name\": e.control.value}\n    )\n    self.app_layout.hydrate_all_boards_view()\n    e.control.read_only = True\n    e.control.border = ft.InputBorder.NONE\n    self.page.update()\n</code></pre> <p>This makes for a very intuitive way to change a board name without unnecessary dialogs or extraneous button presses. </p> <p>Let's also quickly stub a login procedure which will be more fully realized in a future instalment.  For now, we'll simply add the following login method and wire it up to the login <code>PopupMenuItem</code> on_click event. </p> <pre><code>def login(self, e):\n    def close_dlg(e):\n        if user_name.value == \"\" or password.value == \"\":\n            user_name.error_text = \"Please provide username\"\n            password.error_text = \"Please provide password\"\n            self.page.update()\n            return\n        else:\n            user = User(user_name.value, password.value)\n            if user not in self.store.get_users():\n                self.store.add_user(user)\n            self.user = user_name.value\n            self.page.client_storage.set(\"current_user\", user_name.value)\n\n        self.page.close(dialog)\n        self.appbar_items[0] = ft.PopupMenuItem(\n            text=f\"{self.page.client_storage.get('current_user')}'s Profile\"\n        )\n        self.page.update()\n\n    user_name = ft.TextField(label=\"User name\")\n    password = ft.TextField(label=\"Password\", password=True)\n    dialog = ft.AlertDialog(\n        title=ft.Text(\"Please enter your login credentials\"),\n        content=ft.Column(\n            [\n                user_name,\n                password,\n                ft.ElevatedButton(text=\"Login\", on_click=close_dlg),\n            ],\n            tight=True,\n        ),\n        on_dismiss=lambda e: print(\"Modal dialog dismissed!\"),\n    )\n    self.page.open(dialog)\n</code></pre>"},{"location":"tutorials/trolli/#drag-and-drop","title":"Drag and Drop","text":"<p>Next, we'll add crucial drag and drop functionality to lists themselves and items within lists. </p> <p>We'll start with the simpler case of re-ordering lists within boards. In order to give some visual  indication of the target to which we're dragging a list, we'll modify the <code>board_list</code> containers <code>border</code> property,  darkening the color on the <code>list_will_drag_accept</code> event handler, and returning it to a lighter color in  the <code>list_drag_accept</code> and <code>list_drag_leave</code> handlers.</p> <p>Next, we'll wrap the <code>board_list</code> view in a <code>DragTarget</code> object, all of which we will then wrap in a  <code>Draggable</code> object. Both of these will be passed a <code>group</code> parameter of \"lists\". This will be important since later  we will want to add the ability to drag and drop individual items between different lists so for that function  we'll specify a different group. If anything is unclear in the previous sentence. , have a look at the  relevant documentation.</p> <p>Now the composition of the view should look something like this.</p> <pre><code>self.view = ft.DragTarget(\n    group=\"items\",\n    content=ft.Draggable(\n        group=\"lists\",\n        content=ft.DragTarget(\n            group=\"lists\",\n            content=self.inner_list,\n            data=self,\n            on_accept=self.list_drag_accept,\n            on_will_accept=self.list_will_drag_accept,\n            on_leave=self.list_drag_leave,\n        ),\n    ),\n    data=self,\n    on_accept=self.item_drag_accept,\n    on_will_accept=self.item_will_drag_accept,\n    on_leave=self.item_drag_leave,\n)\nself.inner_list = ft.Container(\n    content=ft.Column(\n        [\n            self.header,\n            self.new_item_field,\n            ft.TextButton(\n                content=ft.Row(\n                    [\n                        ft.Icon(ft.Icons.ADD),\n                        ft.Text(\"add card\", color=ft.Colors.BLACK38),\n                    ],\n                    tight=True,\n                ),\n                on_click=self.add_item_handler,\n            ),\n            self.items,\n            self.end_indicator,\n        ],\n        spacing=4,\n        tight=True,\n        data=self.title,\n    ),\n    width=250,\n    border=ft.border.all(2, ft.Colors.BLACK12),\n    border_radius=ft.border_radius.all(5),\n    bgcolor=self.color if (self.color != \"\") else ft.Colors.BACKGROUND,\n    padding=ft.padding.only(bottom=10, right=10, left=10, top=5),\n)\n</code></pre> <p>with the event handlers defined thus.</p> <pre><code>def list_drag_accept(self, e):\n    src = self.page.get_control(e.src_id)\n    l = self.board.content.controls\n    to_index = l.index(e.control.data)\n    from_index = l.index(src.content.data)\n    l[to_index], l[from_index] = l[from_index], l[to_index]\n    self.inner_list.border = ft.border.all(2, ft.Colors.BLACK12)\n    self.page.update()\n\ndef list_will_drag_accept(self, e):\n    if e.data == \"true\":\n        self.inner_list.border = ft.border.all(2, ft.Colors.BLACK)\n    self.update()\n\ndef list_drag_leave(self, e):\n    self.inner_list.border = ft.border.all(2, ft.Colors.BLACK12)\n    self.update()\n</code></pre> <p>Note the manipulation of the opacity field acting as a visual indication that the dragged item will be accepted  on the target. </p> <p></p> <p>Now for the slightly more complex case of dragging items within a list (including potentially to another list on  the same board). Now that we want a <code>board_list</code> to not only be a drag target for other lists, but also for items  being dragged to it from a different list, we'll need to add another <code>DragTarget</code> wrapper to the list, but this time we'll assign the group name \"items\" so that it only responds to the dragging of items.</p> <p>Since we'll have the ability to drag the list to a location above or below an existing list we'll employ a  different visual indicator strategy to what we've implemented for list dragging.  We'll make sure that every time a new <code>item</code> is added to the <code>board_list</code> it will be interspersed with a visual  indicator (implemented as a simple Container object).</p> <p>The <code>item.py</code> module will now need its view wrapped by <code>Draggable</code> and <code>DragTarget</code> and assigned to the \"items\"  group as seen below together with event handlers.</p> <pre><code>self.view = ft.Draggable(\n    group=\"items\",\n    content=ft.DragTarget(\n        group=\"items\",\n        content=self.card_item,\n        on_accept=self.drag_accept,\n        on_leave=self.drag_leave,\n        on_will_accept=self.drag_will_accept,\n    ),\n    data=self,\n)\nself.card_item = ft.Card(\n    content=ft.Row(\n        [\n            ft.Container(\n                content=ft.Checkbox(label=f\"{self.item_text}\", width=200),\n                border_radius=ft.border_radius.all(5),\n            )\n        ],\n        width=200,\n        wrap=True,\n    ),\n    elevation=1,\n    data=self.list,\n)\n\n\ndef drag_accept(self, e):\n    src = self.page.get_control(e.src_id)\n\n    # skip if item is dropped on itself\n    if src.content.content == e.control.content:\n        self.card_item.elevation = 1\n        self.list.set_indicator_opacity(self, 0.0)\n        e.control.update()\n        return\n\n    # item dropped within same list but not on self\n    if src.data.list == self.list:\n        self.list.add_item(chosen_control=src.data, swap_control=self)\n        self.card_item.elevation = 1\n        e.control.update()\n        return\n\n    # item added to different list\n    self.list.add_item(src.data.item_text, swap_control=self)\n    # remove from the list to which draggable belongs\n    src.data.list.remove_item(src.data)\n    self.list.set_indicator_opacity(self, 0.0)\n    self.card_item.elevation = 1\n    self.page.update()\n\n\ndef drag_will_accept(self, e):\n    if e.data == \"true\":\n        self.list.set_indicator_opacity(self, 1.0)\n    self.card_item.elevation = 20 if e.data == \"true\" else 1\n    self.page.update()\n\n\ndef drag_leave(self, e):\n    self.list.set_indicator_opacity(self, 0.0)\n    self.card_item.elevation = 1\n    self.page.update()\n</code></pre> <p>We need somewhere to house the logic that will decide on how and when to modify the items owned by a <code>board_list</code>  object based on a drag event. There are surely design pattern militants out there that will find several dozen  unholy violations of the sacred order of clean software design in the following approach but for this  size of application, simply overloading the <code>add_item</code> method to take optional keyword args when called from  different places, as seen below, seems to me like a perfectly workable approach. </p> <pre><code>def add_item(\n    self,\n    item: str | None = None,\n    chosen_control: ft.Draggable | None = None,\n    swap_control: ft.Draggable | None = None,\n):\n\n    controls_list = [x.controls[1] for x in self.items.controls]\n    to_index = (\n        controls_list.index(swap_control) if swap_control in controls_list else None\n    )\n    from_index = (\n        controls_list.index(chosen_control) if chosen_control in controls_list else None\n    )\n    control_to_add = ft.Column(\n        [\n            ft.Container(\n                bgcolor=ft.Colors.BLACK26,\n                border_radius=ft.border_radius.all(30),\n                height=3,\n                alignment=ft.alignment.center_right,\n                width=200,\n                opacity=0.0,\n            )\n        ]\n    )\n\n    # rearrange (i.e. drag drop from same list)\n    if (from_index is not None) and (to_index is not None):\n        self.items.controls.insert(to_index, self.items.controls.pop(from_index))\n        self.set_indicator_opacity(swap_control, 0.0)\n\n    # insert (drag from other list to middle of this list)\n    elif to_index is not None:\n        new_item = Item(self, self.store, item)\n        control_to_add.controls.append(new_item)\n        self.items.controls.insert(to_index, control_to_add)\n\n    # add new (drag from other list to end of this list, or use add item button)\n    else:\n        new_item = (\n            Item(self, self.store, item)\n            if item\n            else Item(self, self.store, self.new_item_field.value)\n        )\n        control_to_add.controls.append(new_item)\n        self.items.controls.append(control_to_add)\n        self.store.add_item(self.board_list_id, new_item)\n        self.new_item_field.value = \"\"\n\n    self.page.update()\n</code></pre> <p>And with these changes, we should be able to drag lists around within the board and also drag items between different lists.</p> <p></p>"},{"location":"tutorials/trolli/#handling-page-resizing","title":"Handling Page Resizing","text":"<p>The only final bit of logic we need to add is some page resizing to ensure that if more lists exist than can be displayed, there is a scroll bar to reach them. This logic will also have to take into account the state of the sidebar - extended or not. </p> <p>We'll add a resize method to <code>board.py</code> module: board.py<pre><code>def resize(self, nav_rail_extended, width, height):\n    self.board_lists.width = (width - 310) if nav_rail_extended else (width - 50)\n    self.height = height\n    self.update()\n</code></pre></p> <p>and wire up this <code>page.on_resize</code> handler in the <code>app_layout.py</code> module: app_layout.py<pre><code>def page_resize(self, e=None):\n    if type(self.active_view) is Board:\n        self.active_view.resize(self.sidebar.visible, self.page.width, self.page.height)\n    self.page.update()\n</code></pre></p>"},{"location":"tutorials/trolli/#deploying","title":"Deploying","text":"<p>TBA</p>"},{"location":"tutorials/trolli/#summary","title":"Summary","text":"<p>Hopefully this walkthrough gives the reader some idea of how actual usable apps can be developed and  deployed using the Flet framework. The flexibility, speed of development and developer experience make  it a really compelling tool to reach for in many different use cases and there is an ever growing number  of devs doing just that.</p>"},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/how-to/","title":"how-to","text":""},{"location":"blog/category/news/","title":"news","text":""},{"location":"blog/category/product/","title":"product","text":""}]}